{"version":3,"file":"static/js/841.129f0419.chunk.js","mappings":"mRAqBe,SAASA,IAGtB,MAAMC,GAAaC,EAAAA,EAAAA,OAEZC,EAAcC,IAAWC,EAAAA,EAAAA,MACzBC,EAAYC,IAAiBC,EAAAA,EAAAA,UAAS,MA0BvCC,EAAiBC,UACrBT,EAAW,yBAADU,OAA0BC,GAAe,EAOrD,OAJAC,EAAAA,EAAAA,YAAU,KA7BqBH,WAC7B,MAIMI,EAAgBC,EAAAA,EAAMC,SACtBC,QAAqBb,EACzBD,EACAW,EACA,oCACA,MATc,CACd,eAAgB,mBAChB,8BAA8B,GAS9B,KACA,MAEF,IAA2B,IAAvBG,EAAaC,MAAiB,CAChC,MAAMC,EAAWF,EAAaE,SAC9BZ,EAAcY,EAASC,KAAKA,KAC9B,MAEEC,MAAMJ,EAAaK,aAAaC,QAClC,EASAC,EAAwB,GACvB,KAGDC,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,UACEF,EAAAA,EAAAA,KAACG,EAAAA,GAAI,CAACC,UAAU,OAAMF,UACtBF,EAAAA,EAAAA,KAACK,EAAAA,GAAI,CAAAH,SACFrB,EACCA,EAAWyB,KAAI,CAACC,EAAWC,KACzBR,EAAAA,EAAAA,KAACG,EAAAA,GAAI,CAAaC,UAAU,0CAAyCF,UACnEF,EAAAA,EAAAA,KAACK,EAAAA,GAAI,CAACD,UAAU,0CAAyCF,UACvDO,EAAAA,EAAAA,MAACC,EAAAA,GAAK,CAACN,UAAU,GAAEF,SAAA,EACjBO,EAAAA,EAAAA,MAACE,EAAAA,GAAW,CAACP,UAAU,qEAAoEF,SAAA,EACzFO,EAAAA,EAAAA,MAAA,QAAML,UAAU,OAAMF,SAAA,CAAC,cAAYK,EAAUK,SAASC,SAASC,OAC/DL,EAAAA,EAAAA,MAAA,QAAOL,UAAU,OAAMF,SAAA,CAAC,cAAYK,EAAUK,SAASG,qBAEzDf,EAAAA,EAAAA,KAACgB,EAAAA,GAAS,CAAAd,UACRF,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,UACEF,EAAAA,EAAAA,KAACG,EAAAA,GAAI,CAACC,UAAU,qCAAoCF,UAClDF,EAAAA,EAAAA,KAACK,EAAAA,GAAI,CAACD,UAAU,0CAAyCF,UACvDF,EAAAA,EAAAA,KAAA,OAAKI,UAAU,GAAEF,UACfF,EAAAA,EAAAA,KAAA,OAAAE,UACEF,EAAAA,EAAAA,KAACG,EAAAA,GAAI,CAACC,UAAU,cAAca,MAAO,CAAEC,QAAS,KAAMhB,SACnDK,GAAaA,EAAUY,UAAUC,OAAS,EACzCb,EAAUY,UAAUb,KAAI,CAACe,EAAMb,KAC7BR,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,UACEO,EAAAA,EAAAA,MAACJ,EAAAA,GAAI,CACHD,UAAU,wCAAuCF,SAAA,EAGjDF,EAAAA,EAAAA,KAACsB,EAAAA,GAAM,CACLlB,UAAU,4EACVmB,MAAM,UACNC,SAAS,EAAKtB,SAGbmB,EAAKI,IAAIC,iBAEZ1B,EAAAA,EAAAA,KAAA,OAAKI,UAAU,4BAA2BF,UACxCF,EAAAA,EAAAA,KAAA,OAAKI,UAAU,GAAGa,MAAO,CAACU,cAAc,OAAOzB,UAC7CF,EAAAA,EAAAA,KAAA,OAAKI,UAAU,+BAA8BF,SAC1CmB,EAAKO,SAASR,OAAS,EACtBC,EAAKO,SAAStB,KAAI,CAACuB,EAASrB,KAC1BC,EAAAA,EAAAA,MAACqB,EAAAA,GAAM,CAELC,UAAU,EACVP,SAAS,EACTpB,UAAS,mBAAAlB,OAAqB2C,EAAQG,SAAW,iBAAmB,IAAK9B,SAAA,EAGzEO,EAAAA,EAAAA,MAACwB,EAAAA,GAAY,CAAC7B,UAAU,qEAAoEF,SAAA,CAC3F2B,EAAQG,UACfvB,EAAAA,EAAAA,MAAA,OAAKL,UAAS,gBAAkBF,SAAA,EAChCO,EAAAA,EAAAA,MAAA,SAAOL,UAAU,YAAWF,SAAA,CACzB2B,EAAQG,SAAW,gBAAgB,GACnCH,EAAQK,KAAOL,EAAQK,KAAKC,aAAaC,QAAQC,aAAe,OAEnErC,EAAAA,EAAAA,KAAA,MAAII,UAAU,kBAEb,MACOJ,EAAAA,EAAAA,KAAA,OAAKI,UAAU,eAAcF,SAC1B2B,EAAQO,QAAQC,aAAaC,OAAO,GAAGZ,cAAgBG,EAAQO,QAAQC,aAAaE,MAAM,MAE3FvC,EAAAA,EAAAA,KAAA,SAAOI,UAAU,YAAWF,SACzB2B,EAAQW,KAAKd,iBAElBjB,EAAAA,EAAAA,MAAA,SAAOL,UAAU,YAAWF,SAAA,CACzBuC,IAAOZ,EAAQa,WAAWH,MAAM,EAAE,GAAI,SAASI,OAAO,UAAU,KAAG,IACnEF,IAAOZ,EAAQe,SAASL,MAAM,EAAE,GAAI,SAASI,OAAO,iBAGzDlC,EAAAA,EAAAA,MAACoC,EAAAA,GAAU,CAACzC,UAAU,mDAAkDF,SAAA,EACtEO,EAAAA,EAAAA,MAACN,EAAAA,GAAI,CAACC,UAAU,2BAA0BF,SAAA,EACxCO,EAAAA,EAAAA,MAACJ,EAAAA,GAAI,CAACD,UAAU,kDAAiDF,SAAA,CAAC,UAE1D2B,EAAQiB,QAAQR,OAAO,GAAGZ,cAAgBG,EAAQiB,QAAQP,MAAM,GAAI,QAG5EvC,EAAAA,EAAAA,KAACK,EAAAA,GAAI,CAACD,UAAU,iDAAgDF,UAChEO,EAAAA,EAAAA,MAAA,OAAKL,UAAU,oBAAmBF,SAAA,CACjC,IACA2B,EAAQkB,QAAQzC,KAAI,CAAC0C,EAAOxC,KAC3BC,EAAAA,EAAAA,MAAA,QAAAP,SAAA,CACG8C,EAAMC,WAAWvB,cACjBlB,EAAQqB,EAAQkB,QAAQ3B,OAAS,GAChC,OAHOZ,KAKT,UAGJC,EAAAA,EAAAA,MAACJ,EAAAA,GAAI,CAACD,UAAU,gDAA+CF,SAAA,CAE9D2B,EAAQqB,UAAUC,WAAWb,OAAO,GAAGZ,cAAgBG,EAAQqB,UAAUC,WAAWZ,MAAM,GAC5F,WAGDvC,EAAAA,EAAAA,KAAA,MAAII,UAAU,WACdJ,EAAAA,EAAAA,KAAA,OAAKI,UAAU,eAAcF,UAC3BO,EAAAA,EAAAA,MAAA,OAAKL,UAAU,QAAOF,SAAA,CAES,QAA3B2B,EAAQuB,QAAQC,SAAoBrD,EAAAA,EAAAA,KAAA,UAAQI,UAAU,qCAAqCkD,MAAOzB,EAAQ0B,KAAMC,QAAUC,GAAKzE,EAAeyE,EAAEC,OAAOJ,OAAOpD,SAAC,kBAGpI,YAA3B2B,EAAQuB,QAAQC,SAAwBrD,EAAAA,EAAAA,KAAA,UAAQI,UAAU,qCAAqCkD,MAAOzB,EAAQ0B,KAAMC,QAAUC,GAAKzE,EAAeyE,EAAEC,OAAOJ,OAAOpD,SAAC,oBAEzI,SAA3B2B,EAAQuB,QAAQC,SAAqBrD,EAAAA,EAAAA,KAAA,UAAQ2D,UAAU,EAAMvD,UAAU,uCAAsCF,SAAC,wBAOnHF,EAAAA,EAAAA,KAAA,OAAAE,UACEF,EAAAA,EAAAA,KAAA,gBArECQ,MA4ETR,EAAAA,EAAAA,KAAC8B,EAAAA,GAAM,CAAC1B,UAAU,2CAA2C2B,UAAU,EAAOP,SAAS,EAAKtB,UAC1FF,EAAAA,EAAAA,KAAC6C,EAAAA,GAAU,CAAA3C,SAAC,2CA7FjBM,QAyGXR,EAAAA,EAAAA,KAAC8B,EAAAA,GAAM,CAAC1B,UAAU,2CAA2C2B,UAAU,EAAOP,SAAS,EAAKtB,UAC5EF,EAAAA,EAAAA,KAAC6C,EAAAA,GAAU,CAAA3C,SAAC,uDA7HvCM,MA4IbR,EAAAA,EAAAA,KAAC8B,EAAAA,GAAM,CAAC8B,WAAW,EAAO7B,UAAU,EAAOP,SAAS,EAAMpB,UAAU,gBAAeF,UACjFF,EAAAA,EAAAA,KAACiC,EAAAA,GAAY,CAAC7B,UAAU,wCAAuCF,UAC7DF,EAAAA,EAAAA,KAAA,OACE6D,IAAI,wDACJC,MAAO,IACPC,IAAI,4BAUpB,C","sources":["views/teacher/Teacherview.js"],"sourcesContent":["import React from 'react'\n\nimport { useState } from 'react'\nimport {\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CRow,\n  CToast,\n  CToastHeader,\n  CToastBody,\n  CAlert,  \n} from '@coreui/react'\nimport axios from 'axios'\nimport { useEffect } from 'react'\nimport useAPI from 'src/global_function/useApi'\nimport { useNavigate } from 'react-router-dom'\nimport moment from 'moment';\n\n\nexport default function Teacherview() {\n\n  // usestate to opne and close the model  \n  const navigation = useNavigate()\n\n  const [StoredTokens, CallAPI] = useAPI()\n  const [TimeTables, setTimeTables] = useState(null)\n  const load_teacher_timetable = async () => {\n    const headers = {\n      'Content-Type': 'application/json',\n      'ngrok-skip-browser-warning': true,\n    }\n    const axiosInstance = axios.create()\n    const response_obj = await CallAPI(\n      StoredTokens,\n      axiosInstance,\n      '/manage/get_timetable_for_teacher',\n      'get',\n      headers,\n      null,\n      null,\n    )\n    if (response_obj.error === false) {\n      const response = response_obj.response      \n      setTimeTables(response.data.data)\n    }\n    else{\n      alert(response_obj.errorMessage.message)\n    }\n  }\n\n\n  const create_Session = async(lecture_slug)=>{\n    navigation(`/teacher/session?slug=${lecture_slug}`)\n  }\n\n  useEffect(() => {\n    load_teacher_timetable()\n  }, [])\n\n  return (\n    <>\n      <CRow className=\"mb-3\">\n      <CCol>\n        {TimeTables ? (\n          TimeTables.map((timetable, index) => (\n            <CRow key={index} className=\"text-center mb-5 justify-content-center\">\n              <CCol className=\"col-lg-12 col-md-12 col-sm-12 col-xs-12\">\n                <CCard className=\"\">\n                  <CCardHeader className=\"d-flex justify-content-center justify-content-sm-between flex-wrap\">\n                    <span className='mx-2'>Semester - {timetable.division.semester.no}</span>\n                    <span  className='mx-2'>Division - {timetable.division.division_name}</span>\n                  </CCardHeader>\n                  <CCardBody>\n                    <>\n                      <CRow className=\"text-center justify-content-center\">\n                        <CCol className=\"col-lg-12 col-md-12 col-sm-12 col-xs-12\">\n                          <div className=\"\">\n                            <div>\n                              <CRow className=\"flex-column\" style={{ padding: '0' }}>\n                                {timetable && timetable.schedules.length > 0? (\n                                  timetable.schedules.map((item, index) => (\n                                    <>\n                                      <CCol\n                                        className=\"d-flex align-items-center flex-column\"\n                                        key={index}\n                                      >\n                                        <CAlert\n                                          className=\"m-0 rounded-0 w-100 p-2 d-flex justify-content-between align-items-center\"\n                                          color=\"primary\"\n                                          visible={true}\n                                          \n                                        >\n                                          {item.day.toUpperCase()}\n                                        </CAlert>\n                                        <div className=\"w-100  rounded-0 border-0\">\n                                          <div className=\"\" style={{paddingBottom:\"0px\"}}>\n                                            <div className=\"justify-content-center w-100\">\n                                              {item.lectures.length > 0 ? (\n                                                item.lectures.map((lecture, index) => (\n                                                  <CToast\n                                                    key={index}\n                                                    autohide={false}\n                                                    visible={true}\n                                                    className={`mb-3 mt-3 w-100 ${lecture.is_proxy ? \"border-red-700\" : \"\"}`}\n                                                    \n                                                  >\n                                                    <CToastHeader className=\"d-flex flex-wrap justify-content-sm-between justify-content-center\">\n                                                    {lecture.is_proxy ? (\n                                              <div className={`w-100 fw-bold`}>\n                                              <small className='mx-2 my-2'>\n                                                {lecture.is_proxy ? \"Proxied from \":\"\"}\n                                                {lecture.link ? lecture.link.from_lecture.subject.subject_name : \"\"}\n                                              </small>\n                                              <hr className='w-100 my-2'></hr>\n                                              </div>\n                                            ):(null)}\n                                                      <div className=\"fw-bold mx-2\">\n                                                        {lecture.subject.subject_name.charAt(0).toUpperCase() + lecture.subject.subject_name.slice(1)}\n                                                      </div>\n                                                        <small className='mx-2 my-2'>\n                                                          {lecture.type.toUpperCase()}\n                                                        </small>\n                                                      <small className='mx-2 my-2'>\n                                                        {moment(lecture.start_time.slice(0,5), 'HH:mm').format('h:mm A')} |{' '}\n                                                        {moment(lecture.end_time.slice(0,5), 'HH:mm').format('h:mm A')}\n                                                      </small>\n                                                    </CToastHeader>\n                                                    <CToastBody className=\"d-flex flex-row flex-wrap justify-content-center\">\n                                                      <CRow className='w-100 align-items-center'>\n                                                        <CCol className='text-sm-start col-12 col-sm-4 col-lg-4 col-md-4'>\n                                                          \n                                                        Prof - {lecture.teacher.charAt(0).toUpperCase() + lecture.teacher.slice(1)}{' '}\n                                                         \n                                                        </CCol>\n                                                        <CCol className=' text-sm-end col-12 col-sm-4 col-lg-4 col-md-4'>\n                                                        <div className='w-100 text-center'>\n                                                        {' '}\n                                                        {lecture.batches.map((batch, index) => (\n                                                          <span key={index}>\n                                                            {batch.batch_name.toUpperCase()}\n                                                            {index < lecture.batches.length - 1 &&\n                                                              ', '}\n                                                          </span>\n                                                        ))}{' '}\n                                                      </div>\n                                                        </CCol>\n                                                        <CCol className='text-sm-end col-12 col-sm-4 col-lg-4 col-md-4'>\n                                                        \n                                                        {lecture.classroom.class_name.charAt(0).toUpperCase() + lecture.classroom.class_name.slice(1)}\n                                                      {' '}\n                                                        </CCol>\n                                                      </CRow>\n                                                      <hr className='w-100'></hr>\n                                                      <div className='d-flex w-100'>\n                                                        <div className='w-100'>\n                                                          {\n                                                            lecture.session.active === \"pre\" && <button className='btn btn-outline-primary w-100 mt-3' value={lecture.slug} onClick={(e)=> create_Session(e.target.value)}>Start Session</button>\n                                                          }\n                                                          {\n                                                            lecture.session.active === \"ongoing\" && <button className='btn btn-outline-primary w-100 mt-3' value={lecture.slug} onClick={(e)=> create_Session(e.target.value)}>Ongoing Session</button>\n                                                          }\n                                                          {lecture.session.active === \"post\" && <button disabled={true} className='btn btn-outline-secondary w-100 mt-3'>Session Ended</button>\n\n                                                          }\n                                                        </div>\n                                                      </div>\n                                                      \n                                                      \n                                                      <div>\n                                                        <hr></hr>\n                                                      </div>\n                                                      \n                                                    </CToastBody>\n                                                  </CToast>\n                                                ))\n                                              ) : (\n                                                <CToast className=\"w-100 d-flex justify-content-center mt-3\" autohide={false} visible={true}>\n                                                  <CToastBody>You have no lectures today!!</CToastBody>\n                                                </CToast>\n                                                    \n                                                  \n                                              )}\n                                            </div>\n                                          </div>\n                                        </div>\n                                      </CCol>\n                                    </>\n                                  ))\n                                ) : (\n                                  <CToast className=\"w-100 d-flex justify-content-center mt-3\" autohide={false} visible={true}>\n                                                  <CToastBody>You have no lectures today!!</CToastBody>\n                                                </CToast>\n                                )}\n                              </CRow>\n                            </div>\n                          </div>\n                        </CCol>\n                      </CRow>\n                    </>\n                  </CCardBody>\n                </CCard>\n              </CCol>\n            </CRow>\n          ))\n        ) : (\n          <CToast animation={false} autohide={false} visible={true} className=\"mx-auto w-100\">\n            <CToastHeader className=\"bg-dark d-flex justify-content-center\">\n              <img\n                src=\"/static/media/smartroll_logo.a3c3e21d0b4a56919e74.png\"\n                width={100}\n                alt=\"SmartRoll Logo\"\n              />\n            </CToastHeader>\n          </CToast>\n        )}\n        </CCol>\n      \n      </CRow>\n    </>\n  )\n}\n"],"names":["Teacherview","navigation","useNavigate","StoredTokens","CallAPI","useAPI","TimeTables","setTimeTables","useState","create_Session","async","concat","lecture_slug","useEffect","axiosInstance","axios","create","response_obj","error","response","data","alert","errorMessage","message","load_teacher_timetable","_jsx","_Fragment","children","CRow","className","CCol","map","timetable","index","_jsxs","CCard","CCardHeader","division","semester","no","division_name","CCardBody","style","padding","schedules","length","item","CAlert","color","visible","day","toUpperCase","paddingBottom","lectures","lecture","CToast","autohide","is_proxy","CToastHeader","link","from_lecture","subject","subject_name","charAt","slice","type","moment","start_time","format","end_time","CToastBody","teacher","batches","batch","batch_name","classroom","class_name","session","active","value","slug","onClick","e","target","disabled","animation","src","width","alt"],"sourceRoot":""}