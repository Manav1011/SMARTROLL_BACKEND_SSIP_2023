{"version":3,"file":"static/js/1915.6c1ac8d1.chunk.js","mappings":"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","sources":["views/breadcrum/Breadcrumbnav.js","views/dashboard/Dashboard.js","views/forms/form-control/FormControl.js","views/forms/input-group/InputGroup.js","views/forms/validation/Validation.js","views/widgets/WidgetsDropdown.js"],"sourcesContent":["import React from 'react';\nimport { useState,useContext } from 'react'\nimport { Store } from 'src/views/forms/validation/store';\nimport {    \n    CCard,\n    CCardBody,    \n    CCol,    \n    CRow,    \n} from '@coreui/react'\n\nimport \"../../scss/panel.css\"\nconst Breadcrumbnav = (props) => {\n    const { state, dispatch: ctxDispatch } = useContext(Store);\n    const { objectCount } = state  \n    console.log(objectCount)\n    const {currentStep , chageSteps }= props\n    let breadcrumbs = {\n        batch: [\"batch\"],\n        semester: [\"batch\",\"semester\"],\n        subject: [\"batch\",\"semester\",\"subject\"],\n    }\n    return (\n        <>\n        <CRow className='mb-2'>\n                <CCol xl>\n                    <CCard>\n                        <CCardBody>\n                        <nav aria-label=\"breadcrumb\">\n                            {objectCount.branch}\n                        </nav>\n                        </CCardBody>\n                    </CCard>\n                </CCol>\n        </CRow>\n            <CRow className='mb-2'>\n                <CCol xl>\n                    <CCard>\n                        <CCardBody>\n                            <nav aria-label=\"breadcrumb\">\n                                <ol className=\"breadcrumb\" style={{margin:'0'}}>\n                                    <li className=\"breadcrumb-item active\" aria-current=\"page\">\n                                    <svg style={{marginTop:'-3'}} xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" className=\"bi bi-house\" viewBox=\"0 0 16 16\">\n                                        <path d=\"M8.707 1.5a1 1 0 0 0-1.414 0L.646 8.146a.5.5 0 0 0 .708.708L2 8.207V13.5A1.5 1.5 0 0 0 3.5 15h9a1.5 1.5 0 0 0 1.5-1.5V8.207l.646.647a.5.5 0 0 0 .708-.708L13 5.793V2.5a.5.5 0 0 0-.5-.5h-1a.5.5 0 0 0-.5.5v1.293L8.707 1.5ZM13 7.207V13.5a.5.5 0 0 1-.5.5h-9a.5.5 0 0 1-.5-.5V7.207l5-5 5 5Z\"/>\n                                    </svg>\n                                    </li>\n                                    {\n                                        breadcrumbs[currentStep].map((items,keys)=>(\n                                            \n                                             <li className=\"breadcrumb-item active\" aria-current=\"page\" key={keys}><a onClick={() => {chageSteps(items)}} className={items === currentStep?\"disabled\":\"\"}>{items}</a></li>\n                                        ))\n                                    }\n                                </ol>                                                      \n                            </nav>\n\n                            \n\n                            \n                        </CCardBody>\n                    </CCard>\n                </CCol>\n            </CRow>\n        </>\n    );\n}\n\nexport default Breadcrumbnav;\n","import React from 'react'\nimport { useState } from 'react'\nimport {\n  CButton,\n  CCard,\n  CCardFooter,\n  CCol,\n  CRow,\n} from '@coreui/react'\n\nimport axios from 'axios'\nimport WidgetsDropdown from '../widgets/WidgetsDropdown'\nimport FormControl from '../forms/form-control/FormControl'\nimport Select from '../forms/input-group/InputGroup'\nimport Validation from '../forms/validation/Validation'\nimport { useContext , useEffect } from 'react'\nimport { Store } from 'src/views/forms/validation/store';\nimport base_url from 'src/base_url'\nimport { APIMiddleware } from 'src/global_function/GlobalFunctions'\nimport Breadcrumbnav from '../breadcrum/Breadcrumbnav';\nconst Dashboard = () => {\n  const [steps, setsteps] = useState('batch')\n  const [Betchslug, setBetchslug] = useState(\"\");\n  const [semSlug, setsemSlug] = useState(\"\");\n  const [subSlug, setsubSlug] = useState(\"\");\n  const [batchCount, setbatchCount] = useState(0);\n  const [semCount, setsemCount] = useState(0);\n  const [subCount, setsubCount] = useState(0);  \n  const { state, dispatch: ctxDispatch } = useContext(Store);\n  const { accessToken , refreshToken , profileDetails, objectCount } = state  \n\n  useEffect(() => {               \n      getObjectCounts()    \n  }, []);\n  \n  const getObjectCounts = async () =>{\n    const header = {\n      \"Content-Type\":\"application/json\",        \n      'ngrok-skip-browser-warning':true\n    }\n    const axiosInstance = axios.create()\n    let endpoint = `/manage/get_object_counts`;let method='get';let headers = header;\n    let response_obj = await APIMiddleware(axiosInstance,endpoint,method,headers)\n    if(response_obj.error == false){\n      let response = response_obj.response\n      console.log(response)\n      ctxDispatch({ type: 'GET_OBJECTS', payload: response.data });\n    }else{  \n      console.log(response_obj.error)\n    }\n  }\n  \n  const chageSteps = (currentStep) =>{\n      setsteps(currentStep)\n  }\n  const progressExample = [\n    { title: 'Batches', value: objectCount.batches, nextStep:'batch'},\n    { title: 'Semester', value: objectCount.semesters, nextStep:'semester' },\n    { title: 'Subjects', value: objectCount.subjects, nextStep:'subject' },\n  ]\n\n  return (\n    <>\n      <Breadcrumbnav currentStep={steps} chageSteps={chageSteps}></Breadcrumbnav>\n      <WidgetsDropdown />\n      <CCard className=\"mb-4\">\n        <CCardFooter>\n          <CRow xs={{ cols: 1 }} md={{ cols: 3 }} className=\"text-center\">\n            {progressExample.map((item, index) => (\n              <CCol className=\"mb-sm-2 mb-0\" key={index}>\n                <CButton style={{ backgroundColor: 'transparent', border: 'none' }}>\n                  <div className=\"text-medium-emphasis\">{item.title}</div>\n                  <strong style={{ color: 'black' }}>\n                    {item.value} {item.percent}\n                  </strong>\n                </CButton>\n              </CCol>\n            ))}\n          </CRow>\n        </CCardFooter>\n      </CCard>\n      {(() => {\n        \n        switch (steps) {\n          case 'batch':\n            return <Validation chageSteps={chageSteps}  setSlug={setBetchslug} setBatchCout={setbatchCount}></Validation>\n          case 'semester':\n            return <FormControl chageSteps={chageSteps}  batchSlug={Betchslug} setsemSlug={setsemSlug}></FormControl>\n          case 'subject':\n            return <Select chageSteps={chageSteps} semSlug={semSlug} setsubSlug={setsubSlug}></Select>\n          default:\n            console.log(steps)\n        }\n      })()}\n    </>\n  )\n}\n\nexport default Dashboard","import React from 'react'\nimport { useState, useEffect } from 'react'\nimport { useContext } from 'react'\nimport PropTypes from 'prop-types'\nimport axios from 'axios'\nimport { Store } from '../validation/store'\nimport base_url from 'src/base_url'\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CForm,\n  CFormInput,\n  CFormFeedback,\n  CFormLabel,\n  CRow,\n  CTable,\n  CTableBody,\n  CTableHead,\n  CTableHeaderCell,\n  CTableRow,\n  CFormSelect,\n  CTableDataCell\n} from '@coreui/react'\nimport expireToken from 'src/global_function/unauthorizedToken'\nimport { APIMiddleware } from 'src/global_function/GlobalFunctions'\nimport { useNavigate } from 'react-router-dom'\n\nconst CustomStyles = (Semesters, setSemesters, batchSlug) => {\n  const [validated, setValidated] = useState(false)\n\n  const [Snumber, setSnumber] = useState(\"\");\n  const [Sstatus, setSstatus] = useState(\"\");\n  const [Ssdate, setSsdate] = useState(\"\");\n  const [Sedate, setSedate] = useState(\"\");\n  const { state, dispatch: ctxDispatch } = useContext(Store);\n  const { accessToken,refreshToken, semesters , objectCount } = state\n  const [semCount, setsemCount] = useState(objectCount);\n  const navigate = useNavigate()\n\n\n\n\n  const add_sem = async (body) => {\n    const header = {\n      \"Content-Type\":\"application/json\",      \n      'ngrok-skip-browser-warning':true\n    }\n    const axiosInstance = axios.create()\n    let endpoint = `/manage/add_semester`;let method='post';let headers = header;\n    let response_obj = await APIMiddleware(axiosInstance,endpoint,method,headers,body,null)\n    if(response_obj.error == false){\n      let response = response_obj.response\n      let changeCount = {...objectCount}\n      changeCount.semesters += 1\n      console.log(changeCount);\n      ctxDispatch({ type: 'GET_OBJECTS', payload: changeCount });\n      if(response.data.data.status)\n      {\n        setSemesters(prevArray => [...prevArray, response.data.data])\n      }\n    }else{  \n      console.log(response_obj.error)\n    }    \n  }\n\n  const handleSubmit = (event) => {\n    const form = event.currentTarget\n    if (form.checkValidity() === false) {\n      event.preventDefault()\n      event.stopPropagation()\n    }\n    event.preventDefault()\n    setValidated(true)\n    const body = {\n      batch_slug: batchSlug,\n      semester_number: Snumber,\n      start_date: Ssdate,\n      end_date: Sedate\n    }\n    add_sem(body);\n  }\n  return (\n    <CForm\n      className=\"row g-3 needs-validation\"\n      noValidate\n      validated={validated}\n      onSubmit={handleSubmit}\n    >\n      <CCol md={12}>\n        <CFormLabel htmlFor=\"validationCustom01\">Semester Number</CFormLabel>\n        <CFormInput type=\"number\" id=\"validationCustom01\" onChange={e => setSnumber(e.target.value)} required />\n        <CFormFeedback valid>Looks good!</CFormFeedback>\n      </CCol>\n      <CCol md={6}>\n        <CFormLabel htmlFor=\"validationCustom02\">Term Start Date</CFormLabel>\n        <CFormInput type=\"date\" id=\"validationCustom02\" onChange={e => setSsdate(e.target.value)} required />\n        <CFormFeedback valid>Looks good!</CFormFeedback>\n      </CCol>\n      <CCol md={6}>\n        <CFormLabel htmlFor=\"validationCustom02\">Term End Date</CFormLabel>\n        <CFormInput type=\"date\" id=\"validationCustom02\" onChange={e => setSedate(e.target.value)} required />\n        <CFormFeedback valid>Looks good!</CFormFeedback>\n      </CCol>\n      <CCol xs={12}>\n        <button className='btn btn-outline-dark form-control' type=\"submit\">\n          Submit form\n        </button>\n      </CCol>\n    </CForm>\n  )\n}\n\nconst FormControl = (props) => {\n  const { batchSlug ,chageSteps , setsemSlug } = props\n  const [Semesters, setSemesters] = useState([]);\n  const { state, dispatch: ctxDispatch } = useContext(Store);\n  const { accessToken,refreshToken, semesters } = state\n  const navigate = useNavigate()\n  const load_sem = async () => {    \n    const header = {\n      \"Content-Type\":\"application/json\",        \n      'ngrok-skip-browser-warning':true\n    }\n    const axiosInstance = axios.create()\n    let endpoint = `/manage/get_semesters`;let method='get';let headers = header;\n    let response_obj = await APIMiddleware(axiosInstance,endpoint,method,headers,null,{batch_slug: batchSlug })\n    if(response_obj.error == false){\n      let response = response_obj.response      \n        setSemesters(response.data.data)\n        console.log(response.data.data);\n        console.log(Semesters);\n    }else{  \n      console.log(response_obj.error)\n    }\n  }\n\n  useEffect(() => {\n    load_sem()\n  }, []);\n\n\n  return (\n    <>\n      <CRow>\n        <CCol xs={12}>\n          <CCard className=\"mb-3\">\n            <CCardHeader>\n              <strong>Semesters</strong>\n            </CCardHeader>\n            <CCardBody>{CustomStyles(Semesters, setSemesters, batchSlug)}</CCardBody>\n          </CCard>\n        </CCol>\n      </CRow>\n      <CRow>\n        <CCol xs>\n          <CCard className=\"mb-4\">\n            <CCardHeader>\n              <strong>Semester History</strong>\n            </CCardHeader>\n            <CCardBody>\n              <CTable align=\"middle\" className=\"mb-0 border\" hover responsive>\n                <CTableHead color=\"light\">\n                  <CTableRow onClick={() => {chageSteps('subject');}}>\n                    <CTableHeaderCell>Semester</CTableHeaderCell>\n                    <CTableHeaderCell>Term Start Date</CTableHeaderCell>\n                    <CTableHeaderCell>Term End Date</CTableHeaderCell>\n                  </CTableRow>\n                </CTableHead>\n                <CTableBody>\n                  {Semesters.map((item, index) => (\n                    item.status ? (\n                      <CTableRow key={index} onClick={() => {chageSteps('subject'); setsemSlug(item.slug);}}>\n                        <CTableDataCell>\n                          <div>{item.no}</div>\n                        </CTableDataCell>\n                        <CTableDataCell>\n                          <div>{item.start_date}</div>\n                        </CTableDataCell>\n                        <CTableDataCell>\n                          <div>{item.end_date}</div>\n                        </CTableDataCell>\n                      </CTableRow>\n                    ) : null\n                  ))}\n                </CTableBody>\n\n              </CTable>\n            </CCardBody>\n          </CCard>\n        </CCol>\n      </CRow>\n    </>\n  )\n}\n\nFormControl.propTypes = {\n  chageSteps:PropTypes.func.isRequired,\n  setsemSlug:PropTypes.func.isRequired,\n  batchSlug: PropTypes.string\n}\nexport default FormControl\n","import React from 'react'\nimport { useState , useContext,useEffect } from 'react'\nimport PropTypes from 'prop-types'\nimport { Store } from '../validation/store'\nimport axios from 'axios'\nimport base_url from 'src/base_url'\nimport expireToken from 'src/global_function/unauthorizedToken'\nimport { APIMiddleware } from 'src/global_function/GlobalFunctions'\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CForm,\n  CFormInput,\n  CFormFeedback,\n  CFormLabel,\n  CRow,\n  CTable,\n  CTableBody,\n  CTableHead,\n  CTableHeaderCell,\n  CTableRow,\n  CTableDataCell,\n} from '@coreui/react'\nimport { useNavigate } from 'react-router-dom'\nconst CustomStyles = (semSlug,setsubjects) => {\n  const [validated, setValidated] = useState(false)\n  const [SName, setSName] = useState(\"\");\n  const [Scode, setScode] = useState(\"\");\n  const [Scredit, setScredit] = useState(\"\");\n  const { state, dispatch: ctxDispatch } = useContext(Store);\n  const { accessToken,refreshToken, objectCount } = state\n  const navigate = useNavigate()\n  const add_subject = async (body) => {\n    const header = {\n      \"Content-Type\":\"application/json\",      \n      'ngrok-skip-browser-warning':true\n    }\n    const axiosInstance = axios.create()\n    let endpoint = `/manage/add_subjects`;let method='post';let headers = header;\n    let response_obj = await APIMiddleware(axiosInstance,endpoint,method,headers,body,null)\n    if(response_obj.error == false){\n        let response = response_obj.response\n        let changeSubjectCount = {...objectCount}\n        changeSubjectCount.subjects += 1\n        console.log(changeSubjectCount);\n        ctxDispatch({ type: 'GET_OBJECTS', payload: changeSubjectCount })\n        setsubjects(prevArray => [...prevArray, response.data.subject])\n      }else{  \n        console.log(response_obj.error)\n      }    \n  }\n  \n  const handleSubmit = (event) => {\n    const form = event.currentTarget\n    if (form.checkValidity() === false) {\n      event.preventDefault()\n      event.stopPropagation()\n    }\n    console.log(SName)\n    console.log(Scode)\n    console.log(Scredit);\n    setValidated(true)\n    const body = {\n      semester_slug:semSlug,\n      subject_name:SName,\n      subject_code:Scode,\n      subject_credit:Scredit\n    }\n    event.preventDefault()\n    add_subject(body)\n  }\n  return (\n    <CForm\n      className=\"row g-3 needs-validation\"\n      noValidate\n      validated={validated}\n      onSubmit={handleSubmit}\n    >\n      <CCol md={12}>\n        <CFormLabel htmlFor=\"validationCustom01\">Subject Name</CFormLabel>\n        <CFormInput type=\"text\" id=\"validationCustom01\" onChange={e => setSName(e.target.value)} required />\n        <CFormFeedback valid>Looks good!</CFormFeedback>\n      </CCol>\n      <CCol md={6}>\n        <CFormLabel htmlFor=\"validationCustom01\">Subject Code</CFormLabel>\n        <CFormInput type=\"text\" id=\"validationCustom02\" onChange={e => setScode(e.target.value)} required />\n        <CFormFeedback valid>Looks good!</CFormFeedback>\n      </CCol>\n      <CCol md={6}>\n        <CFormLabel htmlFor=\"validationCustom02\">Subject Credit</CFormLabel>\n        <CFormInput type=\"text\" id=\"validationCustom02\" onChange={e => setScredit(e.target.value)} required />\n        <CFormFeedback valid>Looks good!</CFormFeedback>\n      </CCol>\n      <CCol xs={12}>\n        <button className='btn btn-outline-dark form-control' type=\"submit\">\n          Submit form\n        </button>\n      </CCol>\n    </CForm>\n  )\n}\n\nconst Select = (props) => {\n\n  const { state, dispatch: ctxDispatch } = useContext(Store);\n  const { accessToken,refreshToken, semesters } = state\n  const navigate = useNavigate()\n  const {semSlug , chageSteps} = props\n  console.log(semSlug);\n  const [subjects, setsubjects] = useState([]);\n  \n  const load_subjects = async () => {\n    const header = {\n      \"Content-Type\":\"application/json\",        \n      'ngrok-skip-browser-warning':true\n    }\n    const axiosInstance = axios.create()\n    let endpoint = `/manage/get_subjects`;let method='get';let headers = header;\n    let response_obj = await APIMiddleware(axiosInstance,endpoint,method,headers,null,{ semester_slug: semSlug })\n    if(response_obj.error == false){\n      let response = response_obj.response\n      setsubjects(response.data.data)\n    }else{  \n      console.log(response_obj.error)\n    }\n  }\n\n  useEffect(() => {\n      load_subjects()\n  }, []);\n  return (\n    <>\n      <CRow>\n        <CCol xs={12}>\n          <CCard className=\"mb-3\">\n            <CCardHeader>\n              <strong>Subjects</strong>\n            </CCardHeader>\n            <CCardBody>{CustomStyles(semSlug,setsubjects)}</CCardBody>\n          </CCard>\n        </CCol>\n      </CRow>\n      <CRow>\n        <CCol xs>\n          <CCard className=\"mb-4\">\n            <CCardHeader>\n              <strong>Subjects History</strong>\n            </CCardHeader>\n            <CCardBody>\n              <CTable align=\"middle\" className=\"mb-0 border\" hover responsive>\n                <CTableHead color=\"light\">\n                  <CTableRow>\n                    <CTableHeaderCell>Subject Name</CTableHeaderCell>\n                    <CTableHeaderCell>Subject Code</CTableHeaderCell>\n                    <CTableHeaderCell>Subject Credit</CTableHeaderCell>\n                  </CTableRow>\n                </CTableHead>\n                <CTableBody>\n                  {subjects.map((item, index) => (\n                    <CTableRow v-for=\"item in tableItems\" key={index}>\n                      <CTableDataCell>\n                        <div>{item.subject_name}</div>\n                      </CTableDataCell>\n                      <CTableDataCell>\n                        <div>{item.code}</div>\n                      </CTableDataCell>\n                      <CTableDataCell>\n                        <div>{item.credit}</div>\n                      </CTableDataCell>\n                    </CTableRow>\n                  ))}\n                </CTableBody>\n              </CTable>\n            </CCardBody>\n          </CCard>\n        </CCol>\n      </CRow>\n    </>\n  )\n}\nSelect.prototype = {\n  chageSteps:PropTypes.func.isRequired,\n  semSlug: PropTypes.string\n}\nexport default Select\n","import React, { useState  } from 'react'\nimport { useEffect } from 'react'\nimport PropTypes from 'prop-types'\nimport axios from 'axios'\nimport { useContext } from 'react'\nimport { Navigate, useNavigate } from 'react-router-dom'\nimport { APIMiddleware } from 'src/global_function/GlobalFunctions'\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CForm,\n  CFormInput,\n  CFormFeedback,\n  CFormLabel,\n  CRow,\n  CTable,\n  CTableBody,\n  CTableDataCell,\n  CTableHead,\n  CTableHeaderCell,\n  CTableRow,\n} from '@coreui/react'\nimport { Store } from '../validation/store'\nimport base_url from 'src/base_url'\nimport expireToken from 'src/global_function/unauthorizedToken'\n\nconst CustomStyles = (Batches,setBatches,setBatchCout) => {\n  const { state, dispatch: ctxDispatch } = useContext(Store);\n  const { accessToken, refreshToken, batches, currentBatch , objectCount } = state\n  const [validated, setValidated] = useState(false)\n  const currentYear = new Date().getFullYear() \n  const [Start, setStart] = useState(currentYear);\n  const EndYear = (parseInt(Start, 10) + 1).toString();\n  const navigate = useNavigate()\n  const addBatches = async(body) => {\n    const header = {\n      \"Content-Type\":\"application/json\",      \n      'ngrok-skip-browser-warning':true\n    }\n    const axiosInstance = axios.create()\n    let endpoint = `/manage/add_batch`;let method='post';let headers = header;\n    let response_obj = await APIMiddleware(axiosInstance,endpoint,method,headers,body,null)\n    if(response_obj.error == false){\n        let response = response_obj.response\n        let batchCount = {...objectCount}\n        batchCount.batches += 1\n        console.log(batchCount);\n        ctxDispatch({ type: 'GET_OBJECTS', payload: batchCount });\n        setBatches(prevArray => [...prevArray, response.data.data]);\n        setBatchCout(preValue => preValue + 1);\n      }else{  \n        console.log(response_obj.error)\n      }    \n  }\n\n  const handleSubmit = (event) => {\n    const form = event.currentTarget\n    event.preventDefault()\n    if (form.checkValidity() === false) {\n      event.preventDefault()\n      event.stopPropagation()\n    }\n    setValidated(true)\n    const body = {\n      batch_name: Start + \"-\" + EndYear\n    }\n    addBatches(body)\n  }\n  return (\n    <CForm\n      className=\"row g-3 needs-validation\"\n      noValidate\n      validated={validated}\n      onSubmit={handleSubmit}\n    >\n      <CCol md={6}>\n        <CFormLabel htmlFor=\"validationCustom01\">Start Year</CFormLabel>\n        <CFormInput type=\"number\" min={currentYear} max=\"2099\" step=\"1\" value={Start}  id=\"validationCustom01\" onChange={e => setStart(e.target.value)} required maxLength={4} />\n        <CFormFeedback valid>Looks good!</CFormFeedback>\n      </CCol>\n      <CCol md={6}>\n        <CFormLabel htmlFor=\"validationCustom02\">End Year</CFormLabel>\n        <CFormInput type=\"number\" value={EndYear}  readOnly step=\"1\" id=\"validationCustom02\"   required maxLength={4}/>\n        <CFormFeedback valid>Looks good!</CFormFeedback>\n      </CCol>\n      <CCol xs={12}>\n        <button className='btn btn-outline-dark form-control' type=\"submit\" >\n          Submit form\n        </button>\n      </CCol>\n    </CForm>\n  )\n}\n\nconst Validation = (props) => {\n  const {chageSteps} = props\n  const {setSlug} = props\n  const {setBatchCout} = props\n  const { state, dispatch: ctxDispatch } = useContext(Store);\n  const { accessToken, refreshToken, batches, currentBatch} = state\n  const navigate = useNavigate()\n  const [Batches, setBatches] = useState(batches);\n  \n  // function for the load batches\n  \n  const loadBatches = async() => {\n    const header = {\n      \"Content-Type\":\"application/json\",\n      \"Authorization\": `Bearer ${accessToken}`,\n      'ngrok-skip-browser-warning':true\n    }\n    \n    axios.get(`${base_url}/manage/get_batches`,{headers:header})\n    .then((response)=>{\n      ctxDispatch({ type: 'GET_BATCHES', payload: response.data.data });\n      //console.log(state.batches);\n      \n       response.data.data.map((item)=>{\n          if(item.active){\n            console.log(item);\n            ctxDispatch({ type: 'CURRENT_BATCH_SLUG', payload: item });    \n          }\n      })\n      \n      setBatches(response.data.data)\n    })\n    .catch((error)=>{\n\n        if(error.response.status === 401){\n\n     \n          expireToken(refreshToken,(error,result)=>{\n            ctxDispatch({ type: 'ACCESS_TOKEN', payload: result.access });\n            ctxDispatch({ type: 'REFRESH_TOKEN', payload: result.refresh });\n          })\n        }\n    })\n  }\n\n  // useEffect(() => {\n  //   if(accessToken){\n  //     loadBatches()\n  //   }\n  // }, []);\n\n  useEffect(() => {\n    setBatches(batches)\n  }, [batches]);\n  \n  \n  return (\n    <>\n      <CRow>\n        <CCol xs={12}>\n          <CCard className=\"mb-3\">\n            <CCardHeader>\n              <strong>Batches</strong>\n            </CCardHeader>\n            <CCardBody>{CustomStyles(Batches,setBatches,setBatchCout)}</CCardBody>\n          </CCard>\n        </CCol>\n      </CRow>\n      <CRow>\n        <CCol xs>\n          <CCard className=\"mb-4\">\n            <CCardHeader>\n              <strong>Batches History</strong>\n            </CCardHeader>\n            <CCardBody>\n              <CTable align=\"middle\" className=\"mb-0 border text-center\" hover responsive>\n                <CTableHead color=\"light\">\n                  <CTableRow>\n                    <CTableHeaderCell>Batches</CTableHeaderCell>\n                    <CTableHeaderCell>Activation Status</CTableHeaderCell>\n                  </CTableRow>\n                </CTableHead>\n                <CTableBody>\n                  {Batches.map((item, index) => (\n                    <CTableRow v-for=\"item in tableItems\" key={index}>\n                      <CTableDataCell>\n                        <div  onClick={() => {chageSteps('semester'); setSlug(item.slug);}}>{item.batch_name}</div>   \n                      </CTableDataCell>\n                      <CTableDataCell>\n                        <div  onClick={() => {chageSteps('semester'); setSlug(item.slug);}}>\n                          {item.active ? (<div><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" className=\"bi bi-check-circle-fill\" viewBox=\"0 0 16 16\">\n                            <path d=\"M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zm-3.97-3.03a.75.75 0 0 0-1.08.022L7.477 9.417 5.384 7.323a.75.75 0 0 0-1.06 1.06L6.97 11.03a.75.75 0 0 0 1.079-.02l3.992-4.99a.75.75 0 0 0-.01-1.05z\" />\n                          </svg>{}\n                          </div>):<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" className=\"bi bi-x-circle-fill\" viewBox=\"0 0 16 16\">\n                      <path d=\"M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zM5.354 4.646a.5.5 0 1 0-.708.708L7.293 8l-2.647 2.646a.5.5 0 0 0 .708.708L8 8.707l2.646 2.647a.5.5 0 0 0 .708-.708L8.707 8l2.647-2.646a.5.5 0 0 0-.708-.708L8 7.293 5.354 4.646z\"/>\n                          </svg>}\n                        </div>   \n                      </CTableDataCell> \n                    </CTableRow>\n                  ))}\n                </CTableBody>\n              </CTable>\n            </CCardBody>\n          </CCard>\n        </CCol>\n      </CRow>\n      \n    </>\n  )\n}\n\nValidation.propTypes = {\n  chageSteps: PropTypes.func.isRequired,\n  setSlug: PropTypes.func.isRequired,\n  setBatchCout:PropTypes.func.isRequired\n}\n\nexport default Validation\n","import React from 'react'\nimport {\n  CRow,\n  // CCol,\n  // CDropdown,\n  // CDropdownMenu,\n  // CDropdownItem,\n  // CDropdownToggle,\n  // CWidgetStatsA,\n} from '@coreui/react'\n// import { getStyle } from '@coreui/utils'\n// import { CChartBar, CChartLine } from '@coreui/react-chartjs'\n// import CIcon from '@coreui/icons-react'\n// import { cilArrowBottom, cilArrowTop, cilOptions } from '@coreui/icons'\n\nconst WidgetsDropdown = () => {\n  return (\n    <CRow>\n      {/* <CCol sm={6} lg={3}>\n        <CWidgetStatsA\n          className=\"mb-4\"\n          color=\"primary\"\n          value={\n            <>\n              26K{' '}\n              <span className=\"fs-6 fw-normal\">\n                (-12.4% <CIcon icon={cilArrowBottom} />)\n              </span>\n            </>\n          }\n          title=\"Users\"\n          action={\n            <CDropdown alignment=\"end\">\n              <CDropdownToggle color=\"transparent\" caret={false} className=\"p-0\">\n                <CIcon icon={cilOptions} className=\"text-high-emphasis-inverse\" />\n              </CDropdownToggle>\n              <CDropdownMenu>\n                <CDropdownItem>Action</CDropdownItem>\n                <CDropdownItem>Another action</CDropdownItem>\n                <CDropdownItem>Something else here...</CDropdownItem>\n                <CDropdownItem disabled>Disabled action</CDropdownItem>\n              </CDropdownMenu>\n            </CDropdown>\n          }\n          chart={\n            <CChartLine\n              className=\"mt-3 mx-3\"\n              style={{ height: '70px' }}\n              data={{\n                labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\n                datasets: [\n                  {\n                    label: 'My First dataset',\n                    backgroundColor: 'transparent',\n                    borderColor: 'rgba(255,255,255,.55)',\n                    pointBackgroundColor: getStyle('--cui-primary'),\n                    data: [65, 59, 84, 84, 51, 55, 40],\n                  },\n                ],\n              }}\n              options={{\n                plugins: {\n                  legend: {\n                    display: false,\n                  },\n                },\n                maintainAspectRatio: false,\n                scales: {\n                  x: {\n                    grid: {\n                      display: false,\n                      drawBorder: false,\n                    },\n                    ticks: {\n                      display: false,\n                    },\n                  },\n                  y: {\n                    min: 30,\n                    max: 89,\n                    display: false,\n                    grid: {\n                      display: false,\n                    },\n                    ticks: {\n                      display: false,\n                    },\n                  },\n                },\n                elements: {\n                  line: {\n                    borderWidth: 1,\n                    tension: 0.4,\n                  },\n                  point: {\n                    radius: 4,\n                    hitRadius: 10,\n                    hoverRadius: 4,\n                  },\n                },\n              }}\n            />\n          }\n        />\n      </CCol>\n      <CCol sm={6} lg={3}>\n        <CWidgetStatsA\n          className=\"mb-4\"\n          color=\"info\"\n          value={\n            <>\n              $6.200{' '}\n              <span className=\"fs-6 fw-normal\">\n                (40.9% <CIcon icon={cilArrowTop} />)\n              </span>\n            </>\n          }\n          title=\"Income\"\n          action={\n            <CDropdown alignment=\"end\">\n              <CDropdownToggle color=\"transparent\" caret={false} className=\"p-0\">\n                <CIcon icon={cilOptions} className=\"text-high-emphasis-inverse\" />\n              </CDropdownToggle>\n              <CDropdownMenu>\n                <CDropdownItem>Action</CDropdownItem>\n                <CDropdownItem>Another action</CDropdownItem>\n                <CDropdownItem>Something else here...</CDropdownItem>\n                <CDropdownItem disabled>Disabled action</CDropdownItem>\n              </CDropdownMenu>\n            </CDropdown>\n          }\n          chart={\n            <CChartLine\n              className=\"mt-3 mx-3\"\n              style={{ height: '70px' }}\n              data={{\n                labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\n                datasets: [\n                  {\n                    label: 'My First dataset',\n                    backgroundColor: 'transparent',\n                    borderColor: 'rgba(255,255,255,.55)',\n                    pointBackgroundColor: getStyle('--cui-info'),\n                    data: [1, 18, 9, 17, 34, 22, 11],\n                  },\n                ],\n              }}\n              options={{\n                plugins: {\n                  legend: {\n                    display: false,\n                  },\n                },\n                maintainAspectRatio: false,\n                scales: {\n                  x: {\n                    grid: {\n                      display: false,\n                      drawBorder: false,\n                    },\n                    ticks: {\n                      display: false,\n                    },\n                  },\n                  y: {\n                    min: -9,\n                    max: 39,\n                    display: false,\n                    grid: {\n                      display: false,\n                    },\n                    ticks: {\n                      display: false,\n                    },\n                  },\n                },\n                elements: {\n                  line: {\n                    borderWidth: 1,\n                  },\n                  point: {\n                    radius: 4,\n                    hitRadius: 10,\n                    hoverRadius: 4,\n                  },\n                },\n              }}\n            />\n          }\n        />\n      </CCol>\n      <CCol sm={6} lg={3}>\n        <CWidgetStatsA\n          className=\"mb-4\"\n          color=\"warning\"\n          value={\n            <>\n              2.49{' '}\n              <span className=\"fs-6 fw-normal\">\n                (84.7% <CIcon icon={cilArrowTop} />)\n              </span>\n            </>\n          }\n          title=\"Conversion Rate\"\n          action={\n            <CDropdown alignment=\"end\">\n              <CDropdownToggle color=\"transparent\" caret={false} className=\"p-0\">\n                <CIcon icon={cilOptions} className=\"text-high-emphasis-inverse\" />\n              </CDropdownToggle>\n              <CDropdownMenu>\n                <CDropdownItem>Action</CDropdownItem>\n                <CDropdownItem>Another action</CDropdownItem>\n                <CDropdownItem>Something else here...</CDropdownItem>\n                <CDropdownItem disabled>Disabled action</CDropdownItem>\n              </CDropdownMenu>\n            </CDropdown>\n          }\n          chart={\n            <CChartLine\n              className=\"mt-3\"\n              style={{ height: '70px' }}\n              data={{\n                labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\n                datasets: [\n                  {\n                    label: 'My First dataset',\n                    backgroundColor: 'rgba(255,255,255,.2)',\n                    borderColor: 'rgba(255,255,255,.55)',\n                    data: [78, 81, 80, 45, 34, 12, 40],\n                    fill: true,\n                  },\n                ],\n              }}\n              options={{\n                plugins: {\n                  legend: {\n                    display: false,\n                  },\n                },\n                maintainAspectRatio: false,\n                scales: {\n                  x: {\n                    display: false,\n                  },\n                  y: {\n                    display: false,\n                  },\n                },\n                elements: {\n                  line: {\n                    borderWidth: 2,\n                    tension: 0.4,\n                  },\n                  point: {\n                    radius: 0,\n                    hitRadius: 10,\n                    hoverRadius: 4,\n                  },\n                },\n              }}\n            />\n          }\n        />\n      </CCol>\n      <CCol sm={6} lg={3}>\n        <CWidgetStatsA\n          className=\"mb-4\"\n          color=\"danger\"\n          value={\n            <>\n              44K{' '}\n              <span className=\"fs-6 fw-normal\">\n                (-23.6% <CIcon icon={cilArrowBottom} />)\n              </span>\n            </>\n          }\n          title=\"Sessions\"\n          action={\n            <CDropdown alignment=\"end\">\n              <CDropdownToggle color=\"transparent\" caret={false} className=\"p-0\">\n                <CIcon icon={cilOptions} className=\"text-high-emphasis-inverse\" />\n              </CDropdownToggle>\n              <CDropdownMenu>\n                <CDropdownItem>Action</CDropdownItem>\n                <CDropdownItem>Another action</CDropdownItem>\n                <CDropdownItem>Something else here...</CDropdownItem>\n                <CDropdownItem disabled>Disabled action</CDropdownItem>\n              </CDropdownMenu>\n            </CDropdown>\n          }\n          chart={\n            <CChartBar\n              className=\"mt-3 mx-3\"\n              style={{ height: '70px' }}\n              data={{\n                labels: [\n                  'January',\n                  'February',\n                  'March',\n                  'April',\n                  'May',\n                  'June',\n                  'July',\n                  'August',\n                  'September',\n                  'October',\n                  'November',\n                  'December',\n                  'January',\n                  'February',\n                  'March',\n                  'April',\n                ],\n                datasets: [\n                  {\n                    label: 'My First dataset',\n                    backgroundColor: 'rgba(255,255,255,.2)',\n                    borderColor: 'rgba(255,255,255,.55)',\n                    data: [78, 81, 80, 45, 34, 12, 40, 85, 65, 23, 12, 98, 34, 84, 67, 82],\n                    barPercentage: 0.6,\n                  },\n                ],\n              }}\n              options={{\n                maintainAspectRatio: false,\n                plugins: {\n                  legend: {\n                    display: false,\n                  },\n                },\n                scales: {\n                  x: {\n                    grid: {\n                      display: false,\n                      drawTicks: false,\n                    },\n                    ticks: {\n                      display: false,\n                    },\n                  },\n                  y: {\n                    grid: {\n                      display: false,\n                      drawBorder: false,\n                      drawTicks: false,\n                    },\n                    ticks: {\n                      display: false,\n                    },\n                  },\n                },\n              }}\n            />\n          }\n        />\n      </CCol> */}\n    </CRow>\n  )\n}\n\nexport default WidgetsDropdown\n"],"names":["props","state","dispatch","ctxDispatch","useContext","Store","objectCount","console","log","currentStep","chageSteps","_jsxs","_Fragment","children","_jsx","CRow","className","CCol","xl","CCard","CCardBody","branch","style","margin","marginTop","xmlns","width","height","fill","viewBox","d","batch","semester","subject","map","items","keys","onClick","Dashboard","steps","setsteps","useState","Betchslug","setBetchslug","semSlug","setsemSlug","subSlug","setsubSlug","batchCount","setbatchCount","semCount","setsemCount","subCount","setsubCount","accessToken","refreshToken","profileDetails","useEffect","getObjectCounts","async","axiosInstance","axios","create","headers","response_obj","APIMiddleware","error","response","type","payload","data","progressExample","title","value","batches","nextStep","semesters","subjects","Breadcrumbnav","WidgetsDropdown","CCardFooter","xs","cols","md","item","index","CButton","backgroundColor","border","color","percent","Validation","setSlug","setBatchCout","FormControl","batchSlug","Select","CustomStyles","Semesters","setSemesters","validated","setValidated","Snumber","setSnumber","Sstatus","setSstatus","Ssdate","setSsdate","Sedate","setSedate","useNavigate","CForm","noValidate","onSubmit","event","currentTarget","checkValidity","preventDefault","stopPropagation","body","changeCount","status","prevArray","add_sem","batch_slug","semester_number","start_date","end_date","CFormLabel","htmlFor","CFormInput","id","onChange","e","target","required","CFormFeedback","valid","load_sem","CCardHeader","CTable","align","hover","responsive","CTableHead","CTableRow","CTableHeaderCell","CTableBody","slug","CTableDataCell","no","setsubjects","SName","setSName","Scode","setScode","Scredit","setScredit","semester_slug","subject_name","subject_code","subject_credit","changeSubjectCount","add_subject","load_subjects","code","credit","prototype","PropTypes","isRequired","Batches","setBatches","currentBatch","currentYear","Date","getFullYear","Start","setStart","EndYear","parseInt","toString","form","preValue","addBatches","batch_name","min","max","step","maxLength","readOnly","active"],"sourceRoot":""}