{"version":3,"file":"static/js/5962.b4dca0a1.chunk.js","mappings":"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","sources":["views/teacher/ManageSubjects.js","views/teacher/Teacher.js"],"sourcesContent":["import React, { useEffect, useState, useContext} from 'react'\nimport { Store } from '../forms/validation/store'\nimport axios from 'axios'\nimport base_url from 'src/base_url'\nimport expireToken from 'src/global_function/unauthorizedToken'\nimport { APIMiddleware } from 'src/global_function/GlobalFunctions'\nimport { showAlert } from 'src/global_function/GlobalFunctions'\nimport {\n    COffcanvas,\n    COffcanvasHeader,\n    COffcanvasTitle,    \n    COffcanvasBody,       \n    CCard,\n    CCardBody,\n    CCardHeader,\n    CCol,    \n    CRow,\n    CTable,\n    CTableBody,\n    CTableHead,\n    CTableHeaderCell,\n    CTableRow,\n    CFormCheck,\n    CTableDataCell,\n    CToast,\n    CToastHeader,\n    CToastBody\n  } from '@coreui/react'\nimport { useNavigate } from 'react-router-dom'\nfunction ManageSubjects({visible,setVisible,SelectedTeacher}) {           \n    const { state, dispatch: ctxDispatch } = useContext(Store);\n    const { accessToken,refreshToken,currentBatch} = state                \n    const [subjectsToRender,setSubjectsToRender] = useState([])    \n    const navigate = useNavigate()\n    const load_subjects_of_current_batch = async () =>{        \n        const header = {\n          \"Content-Type\":\"application/json\",        \n          'ngrok-skip-browser-warning':true\n        }\n        const axiosInstance = axios.create()\n        let endpoint = `/manage/get_subjects_of_current_batch`;let method='get';let headers = header;\n        let response_obj = await APIMiddleware(axiosInstance,endpoint,method,headers,null,{batch_slug:currentBatch.slug,teacher_id:SelectedTeacher.id})\n        if(response_obj.error == false){\n          let response = response_obj.response\n          setSubjectsToRender(response.data.data)\n        }else{  \n            console.log(response_obj.error)\n        }        \n      }\n      let checkedSubjects = subjectsToRender\n      const subjectSelectionChanged = (value,obj) => {\n        checkedSubjects.map((item) => {\n            if(item == obj){\n                item.selected = value                \n            }            \n        })\n      }    \n\n      const add_subject_to_teacher_api = async(body)=>{\n        const header = {\n          \"Content-Type\":\"application/json\",      \n          'ngrok-skip-browser-warning':true\n        }\n        const axiosInstance = axios.create()\n        let endpoint = `/manage/add_subjects_to_teacher`;let method='post';let headers = header;\n        let response_obj = await APIMiddleware(axiosInstance,endpoint,method,headers,body,null)\n        if(response_obj.error == false){\n          let response = response_obj.response\n          setVisible(false)          \n        }else{  \n          console.log(response_obj.error)\n        }\n        showAlert(\"success\",\"Subject Added successfully...!\")\n      }\n\n      const add_subjects_to_teacher = async () =>{          \n        setSubjectsToRender(checkedSubjects)\n        // Now we can call the API\n        let selectedSubjectSlugs = subjectsToRender.filter(item => item.selected === true).map(item => item.slug);        \n        let requestBody = {\n            teacher_id:SelectedTeacher.id,\n            selected_subjects:selectedSubjectSlugs\n        }\n        await add_subject_to_teacher_api(requestBody)\n      }      \n      useEffect( () => {        \n        if(visible){                                                   \n            load_subjects_of_current_batch()            \n        }\n      },[visible])      \n  return (\n    <>\n    <COffcanvas className='card w-100' style={{background:'#3c4b64'}} placement=\"end\" visible={visible} onHide={() => setVisible(false)} data-coreui-backdrop=\"static\">\n    <COffcanvasHeader className='card-header text-light' style={{background:'#303c54'}}>\n      <COffcanvasTitle>{SelectedTeacher.profile.name}</COffcanvasTitle>\n      <button className='btn btn-outline-light' onClick={() => setVisible(false)} >\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" className=\"bi bi-x-lg\" viewBox=\"0 0 16 16\">\n        <path d=\"M2.146 2.854a.5.5 0 1 1 .708-.708L8 7.293l5.146-5.147a.5.5 0 0 1 .708.708L8.707 8l5.147 5.146a.5.5 0 0 1-.708.708L8 8.707l-5.146 5.147a.5.5 0 0 1-.708-.708L7.293 8 2.146 2.854Z\"/>\n        </svg>\n      </button>      \n    </COffcanvasHeader>\n    <COffcanvasHeader className='card-header text-light' style={{background:'#303c54'}}>\n      <COffcanvasTitle>Branch - {SelectedTeacher.branch.branch_name} | Batch - {currentBatch.batch_name}</COffcanvasTitle>      \n    </COffcanvasHeader>\n    <COffcanvasBody>    \n    <CRow>\n    <CCol xs style={subjectsToRender.length > 0 ? {} : { display: 'flex', justifyContent: 'center' }}>\n  {subjectsToRender.length > 0 ? (\n    <CCard className=\"mb-4\">\n      <CCardHeader className='text-center'>\n        <strong>Subjects</strong>\n      </CCardHeader>\n      <CCardBody>\n        <CTable align=\"middle\" className=\"mb-0 border\" hover responsive>\n          <CTableHead color=\"light\">\n            <CTableRow>\n              <CTableHeaderCell>Name</CTableHeaderCell>\n              <CTableHeaderCell className='text-center'>Code</CTableHeaderCell>\n              <CTableHeaderCell className='text-center'>Action</CTableHeaderCell>\n            </CTableRow>\n          </CTableHead>\n          <CTableBody>\n            {subjectsToRender.map((item, index) => (\n              <CTableRow key={index}>\n                <CTableDataCell>\n                  <div>{item.subject_name}</div>\n                </CTableDataCell>\n                <CTableDataCell className='text-center'>\n                  <div>{item.code}</div>\n                </CTableDataCell>\n                <CTableDataCell className='text-center'>\n                  <div>\n                    {item.selected ? (\n                      <CFormCheck\n                        id={`flexCheckChecked-${index}`}\n                        defaultChecked\n                        onChange={(e) => subjectSelectionChanged(e.target.checked, item)}\n                      />\n                    ) : (\n                      <CFormCheck\n                        id={`flexCheckDefault-${index}`}\n                        onChange={(e) => subjectSelectionChanged(e.target.checked, item)}\n                      />\n                    )}\n                  </div>\n                </CTableDataCell>\n              </CTableRow>\n            ))}\n          </CTableBody>\n        </CTable>\n        <button className='btn btn-outline-dark form-control mt-4' type=\"submit\" onClick={add_subjects_to_teacher}>\n                  Set Subject\n        </button>\n      </CCardBody>\n    </CCard>\n  ) : (\n    <CToast animation={false} autohide={false} visible={true}>\n      <CToastHeader>\n        <svg\n          className=\"rounded me-2\"\n          width=\"20\"\n          height=\"20\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n          preserveAspectRatio=\"xMidYMid slice\"\n          focusable=\"false\"\n          role=\"img\"\n        >\n          <rect width=\"100%\" height=\"100%\" fill=\"#007aff\"></rect>\n        </svg>\n        <div className=\"fw-bold me-auto\">SMARTROLL ADMINISTRATION</div>\n      </CToastHeader>\n      <CToastBody>There are no subjects available...Please add some!</CToastBody>\n    </CToast>\n  )}\n</CCol>\n\n      </CRow>\n    </COffcanvasBody>\n  </COffcanvas>\n  </>\n  )\n}\n\nexport default ManageSubjects","import React from 'react';\nimport { useState , useContext , useEffect } from 'react';\nimport 'src/scss/panel.css'\nimport { Store } from '../forms/validation/store'\nimport axios from 'axios'\nimport base_url from 'src/base_url'\nimport { useSelector, useDispatch } from 'react-redux'\nimport expireToken from 'src/global_function/unauthorizedToken'\nimport ManageSubjects from './ManageSubjects';\nimport { useNavigate } from 'react-router-dom';\nimport { APIMiddleware } from 'src/global_function/GlobalFunctions';\nimport {\n    CButton,\n    CCard,\n    CCardBody,\n    CCardHeader,\n    CCol,\n    CForm,\n    CFormInput,\n    CFormFeedback,\n    CFormLabel,\n    CRow,\n    CTable,\n    CTableBody,\n    CTableHead,\n    CTableHeaderCell,\n    CTableRow,\n    CTableDataCell,\n    COffcanvas,\n    COffcanvasHeader,\n    COffcanvasTitle,\n    CCloseButton,\n    COffcanvasBody,\n    CFormCheck,\n    \n  } from '@coreui/react'\nimport { showAlert } from 'src/global_function/GlobalFunctions'\n\n\n\nconst CustomStyles = (setTeacherlist) => {\n    const [validated, setValidated] = useState(false)\n    const navigate = useNavigate()\n    const { state, dispatch: ctxDispatch } = useContext(Store);\n    const { accessToken,refreshToken , currentBatch} = state\n\n    const [Teacher_name, setTeacher_name] = useState(\"\");\n    const [Teacher_email, setTeacher_email] = useState(\"\");\n    const [Teacher_ph, setTeacher_ph] = useState(\"\");\n    const [Teacher_password, setTeacher_password] = useState(\"\");\n    console.log(currentBatch);\n    const add_Teacher = async(body)=>{\n      const header = {\n        \"Content-Type\":\"application/json\",      \n        'ngrok-skip-browser-warning':true\n      }\n      const axiosInstance = axios.create()\n      let endpoint = `/manage/add_teacher`;let method='post';let headers = header;\n      let response_obj = await APIMiddleware(axiosInstance,endpoint,method,headers,body,null)\n      if(response_obj.error == false){\n        let response = response_obj.response\n        setTeacherlist(prevArray => [...prevArray, response.data.teacher])\n      }else{  \n        console.log(response_obj.error)\n      }    \n    }\n\n    const handleSubmit = (event) => {\n      const form = event.currentTarget\n      if (form.checkValidity() === false) {\n        event.preventDefault()\n        event.stopPropagation()\n      }\n      event.preventDefault()\n      setValidated(true)\n      const body = {\n        name:Teacher_name,\n        email:Teacher_email,\n        ph_no:Teacher_ph,\n        password:Teacher_password\n      }\n      add_Teacher(body)\n      showAlert(\"success\",\"Teacher Added successfully...!\")\n    }\n    return (\n      <CForm\n        className=\"row g-3 needs-validation\"\n        noValidate\n        validated={validated}\n        onSubmit={handleSubmit}\n      >\n        <CCol md={6}>\n          <CFormLabel htmlFor=\"validationCustom01\">Teacher Name</CFormLabel>\n          <CFormInput type=\"text\" id=\"validationCustom01\"  required onChange={e => setTeacher_name(e.target.value)} />\n          <CFormFeedback valid>Looks good!</CFormFeedback>\n        </CCol>\n        <CCol md={6}>\n          <CFormLabel htmlFor=\"validationCustom01\">Teacher Moblie No</CFormLabel>\n          <CFormInput type=\"tel\" id=\"validationCustom02\" pattern=\"[0-9]{10}\"  required onChange={e => setTeacher_ph(e.target.value)}/>\n          <CFormFeedback valid>Looks good!</CFormFeedback>\n        </CCol>\n        <CCol md={6}>\n          <CFormLabel htmlFor=\"validationCustom01\">Teacher E-mail</CFormLabel>\n          <CFormInput type=\"email\" id=\"validationCustom02\"  required  onChange={e => setTeacher_email(e.target.value)}/>\n          <CFormFeedback valid>Looks good!</CFormFeedback>\n        </CCol>\n        <CCol md={6}>\n          <CFormLabel htmlFor=\"validationCustom02\">Teacher Password</CFormLabel>\n          <CFormInput type=\"password\" id=\"validationCustom02\"  required onChange={e => setTeacher_password(e.target.value)}/>\n          <CFormFeedback valid>Looks good!</CFormFeedback>\n        </CCol>\n        <CCol xs={12}>\n          <button className='btn btn-outline-dark form-control' type=\"submit\">\n            Submit form\n          </button>\n        </CCol>\n      </CForm>\n    )\n  }\n\nconst Teacher = () => {\n  const [isModalOpen, setModalOpen] = useState(false);\n  const [visible, setVisible] = useState(false)\n  const [SelectedTeacher,setSelectedTeacher] = useState(null)\n  const navigate = useNavigate()\n  const dispatch = useDispatch()\n    \n  const [Teacherlist, setTeacherlist] = useState([]);\n  \n  const { state, dispatch: ctxDispatch } = useContext(Store);\n  const { accessToken,refreshToken} = state\n  const load_teacher = async () =>{\n    const header = {\n      \"Content-Type\":\"application/json\",        \n      'ngrok-skip-browser-warning':true\n    }\n    const axiosInstance = axios.create()\n    let endpoint = `/manage/get_teachers`;let method='get';let headers = header;\n    let response_obj = await APIMiddleware(axiosInstance,endpoint,method,headers)\n    if(response_obj.error == false){\n      let response = response_obj.response\n      setTeacherlist(response.data.teachers)\n    }else{  \n      console.log(response_obj.error)\n    }\n  }\n  \n  \n  useEffect(()=>{\n      load_teacher()\n  },[])\n\n  const checkboxOptions = [\n    'Option 1',\n    'Option 2',\n    'Option 3'\n  ];\n  \n  return (\n    <>\n    \n      <CRow>\n        <CCol xs={12}>\n          <CCard className=\"mb-3\">\n            <CCardHeader>\n              <strong>Teachers</strong>\n            </CCardHeader>\n            <CCardBody>{CustomStyles(setTeacherlist)}</CCardBody>\n          </CCard>\n        </CCol>\n      </CRow>\n      <CRow>\n        <CCol xs>\n          <CCard className=\"mb-4\">\n            <CCardHeader>\n              <strong>Teacher History</strong>\n            </CCardHeader>\n            <CCardBody>\n              <CTable align=\"middle\" className=\"mb-0 border\" hover responsive>\n                <CTableHead color=\"light\">\n                  <CTableRow>\n                    <CTableHeaderCell>Name</CTableHeaderCell>\n                    <CTableHeaderCell>E-mail</CTableHeaderCell>\n                    <CTableHeaderCell>Mobile No</CTableHeaderCell>\n                  </CTableRow>\n                </CTableHead>\n                <CTableBody>\n                  {Teacherlist.map((item, index) => (\n                    <CTableRow v-for=\"item in tableItems\" onClick={() => {setSelectedTeacher(item); setVisible(true)}} key={index}>\n                      <CTableDataCell>\n                        <div>{item.profile.name}</div>\n                      </CTableDataCell>\n                      <CTableDataCell>\n                        <div>{item.profile.email}</div>\n                      </CTableDataCell>\n                      <CTableDataCell>\n                        <div>{item.profile.ph_no}</div>\n                      </CTableDataCell>\n                    </CTableRow>\n                  ))}\n                </CTableBody>\n              </CTable>\n            </CCardBody>\n          </CCard>\n        </CCol>\n      </CRow>\n      \n      {SelectedTeacher?(<ManageSubjects visible={visible} setVisible={setVisible} SelectedTeacher={SelectedTeacher}/>):null}\n        \n    </>\n  );\n}\n\nexport default Teacher;\n"],"names":["_ref","visible","setVisible","SelectedTeacher","state","dispatch","ctxDispatch","useContext","Store","accessToken","refreshToken","currentBatch","subjectsToRender","setSubjectsToRender","useState","useNavigate","checkedSubjects","subjectSelectionChanged","value","obj","map","item","selected","useEffect","async","axiosInstance","axios","create","headers","response_obj","APIMiddleware","batch_slug","slug","teacher_id","id","error","response","data","console","log","load_subjects_of_current_batch","_jsx","_Fragment","children","_jsxs","COffcanvas","className","style","background","placement","onHide","COffcanvasHeader","COffcanvasTitle","profile","name","onClick","xmlns","width","height","fill","viewBox","d","branch","branch_name","batch_name","COffcanvasBody","CRow","CCol","xs","length","display","justifyContent","CCard","CCardHeader","CCardBody","CTable","align","hover","responsive","CTableHead","color","CTableRow","CTableHeaderCell","CTableBody","index","CTableDataCell","subject_name","code","CFormCheck","concat","defaultChecked","onChange","e","target","checked","type","selectedSubjectSlugs","filter","requestBody","selected_subjects","body","showAlert","add_subject_to_teacher_api","CToast","animation","autohide","CToastHeader","preserveAspectRatio","focusable","role","CToastBody","CustomStyles","setTeacherlist","validated","setValidated","Teacher_name","setTeacher_name","Teacher_email","setTeacher_email","Teacher_ph","setTeacher_ph","Teacher_password","setTeacher_password","CForm","noValidate","onSubmit","event","currentTarget","checkValidity","preventDefault","stopPropagation","prevArray","teacher","add_Teacher","email","ph_no","password","md","CFormLabel","htmlFor","CFormInput","required","CFormFeedback","valid","pattern","Teacher","isModalOpen","setModalOpen","setSelectedTeacher","Teacherlist","useDispatch","teachers","load_teacher","ManageSubjects"],"sourceRoot":""}