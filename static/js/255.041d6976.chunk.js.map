{"version":3,"file":"static/js/255.041d6976.chunk.js","mappings":"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","sources":["views/forms/form-control/FormControl.js"],"sourcesContent":["import React from 'react'\nimport { useState, useEffect } from 'react'\nimport { useContext } from 'react'\nimport PropTypes from 'prop-types'\nimport axios from 'axios'\nimport { Store } from '../validation/store'\nimport {base_url} from 'src/base_url'\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CForm,\n  CFormInput,\n  CFormFeedback,\n  CFormLabel,\n  CRow,\n  CTable,\n  CTableBody,\n  CTableHead,\n  CTableHeaderCell,\n  CTableRow,\n  CFormSelect,\n  CTableDataCell\n} from '@coreui/react'\nimport expireToken from 'src/global_function/unauthorizedToken'\nimport { APIMiddleware } from 'src/global_function/GlobalFunctions'\nimport { useNavigate } from 'react-router-dom'\nimport { showAlert } from 'src/global_function/GlobalFunctions'\nimport useAPI from 'src/global_function/useApi'\n\nconst CustomStyles = (set_divisions, semester_slug,set_divisionCount) => {\n  const [StoredTokens,CallAPI] = useAPI()\n  const [validated, setValidated] = useState(false)\n  const [division_name, set_division_name] = useState(null)\n  const { state, dispatch: ctxDispatch } = useContext(Store);\n  const { accessToken,refreshToken, semesters , objectCount } = state\n  const [semCount, setsemCount] = useState(objectCount);\n  const navigate = useNavigate()\n  \n  const add_division = async (body) => {\n    if(division_name){\n      const header = {\n        \"Content-Type\":\"application/json\",      \n        'ngrok-skip-browser-warning':true\n      }\n      const axiosInstance = axios.create()\n      let endpoint = `/manage/add_division/`;let method='post';let headers = header;\n      let response_obj = await CallAPI(StoredTokens,axiosInstance,endpoint,method,headers,body,null)\n      if(response_obj.error == false){\n        let response = response_obj.response\n        let changeCount = {...objectCount}\n        console.log(objectCount)\n        changeCount.divisons += 1  \n        console.log(changeCount.divison)\n        ctxDispatch({ type: 'GET_OBJECTS', payload: changeCount });\n          set_divisions(prevArray => [...prevArray, response.data.data])\n          set_divisionCount(preValue => preValue + 1);\n        showAlert(\"success\",\"Semester Added successfully...!\")\n      }else{        \n        alert(response_obj.errorMessage.message)\n      }  \n    }\n     else{\n      alert(\"Please Enter The Valid Division Name\")\n     }\n  }\n\n  const handleSubmit = (event) => {\n    const form = event.currentTarget\n    if (form.checkValidity() === false) {\n      event.preventDefault()\n      event.stopPropagation()\n    }\n    event.preventDefault()\n    setValidated(true)\n    const body = {\n      division_name: division_name,\n      semester_slug: semester_slug,\n    }\n    add_division(body);\n    \n  }\n  return (\n    <CForm\n      className=\"row g-3 needs-validation\"\n      noValidate\n      validated={validated}\n      onSubmit={handleSubmit}\n    >\n      <CCol md={12}>\n        <CFormLabel htmlFor=\"validationCustom01\">Division Name</CFormLabel>\n        <CFormInput type=\"text\" id=\"validationCustom01\" onChange={e => set_division_name(e.target.value.toUpperCase())} required  maxLength={1}/>\n        <CFormFeedback valid>Looks good!</CFormFeedback>\n      </CCol>      \n      <CCol xs={12}>\n        <button className='btn btn-outline-dark form-control' type=\"submit\">\n          Submit form\n        </button>\n      </CCol>\n    </CForm>\n  )\n}\n\nconst FormControl = (props) => {\n  const { semester_slug ,chageSteps , set_division_slug , set_divisionCount } = props\n  const [divisions, set_divisions] = useState([]);\n  const { state, dispatch: ctxDispatch } = useContext(Store);\n  const { accessToken,refreshToken, semesters } = state\n  const navigate = useNavigate()\n  const load_division = async () => {    \n    const header = {\n      \"Content-Type\":\"application/json\",        \n      'ngrok-skip-browser-warning':true\n    }\n    const axiosInstance = axios.create()\n    let endpoint = `/manage/get_divisions`;let method='get';let headers = header;\n    let response_obj = await APIMiddleware(axiosInstance,endpoint,method,headers,null,{semester_slug: semester_slug })\n    if(response_obj.error == false){\n      let response = response_obj.response      \n        set_divisions(response.data.data)        \n    }else{        \n      alert(response_obj.errorMessage.message)\n    }\n  }\n\n  useEffect(() => {\n    load_division()\n  }, []);\n\n\n  return (\n    <>\n      <CRow>\n        <CCol xs={12}>\n          <CCard className=\"mb-3\">\n            <CCardHeader>\n              <strong>Divison</strong>\n            </CCardHeader>\n            <CCardBody>{CustomStyles(set_divisions, semester_slug,set_divisionCount)}</CCardBody>\n          </CCard>\n        </CCol>\n      </CRow>\n      <CRow>\n        <CCol xs>\n          <CCard className=\"mb-4\">\n            <CCardHeader>\n              <strong>Division History</strong>\n            </CCardHeader>\n            <CCardBody>\n              <CTable align=\"middle\" className=\"mb-0 border\" hover responsive>\n                <CTableHead color=\"light\">\n                  <CTableRow onClick={() => {chageSteps('batch');}} style={{textAlign:\"center\"}}>\n                    <CTableHeaderCell>Division Name</CTableHeaderCell>\n                  </CTableRow>\n                </CTableHead>\n                <CTableBody style={{textAlign:\"center\"}}>\n                  {divisions.map((item, index) => (\n                  \n                      <CTableRow key={index} onClick={() => {chageSteps('batch'); set_division_slug(item.slug);}} style={{cursor:\"pointer\"}}>\n                        <CTableDataCell>\n                          <div>{item.division_name}</div>\n                        </CTableDataCell>\n                         \n                        \n                      </CTableRow>\n                    \n                  ))}\n                </CTableBody>\n\n              </CTable>\n            </CCardBody>\n          </CCard>\n        </CCol>\n      </CRow>\n    </>\n  )\n}\n\nFormControl.propTypes = {\n  chageSteps:PropTypes.func.isRequired,\n  setsemSlug:PropTypes.func.isRequired,\n  batchSlug: PropTypes.string\n}\nexport default FormControl\n"],"names":["CustomStyles","set_divisions","semester_slug","set_divisionCount","StoredTokens","CallAPI","useAPI","validated","setValidated","useState","division_name","set_division_name","state","dispatch","ctxDispatch","useContext","Store","accessToken","refreshToken","semesters","objectCount","semCount","setsemCount","useNavigate","_jsxs","CForm","className","noValidate","onSubmit","event","currentTarget","checkValidity","preventDefault","stopPropagation","async","header","axiosInstance","axios","create","endpoint","method","headers","response_obj","body","error","response","changeCount","console","log","divisons","divison","type","payload","prevArray","data","preValue","showAlert","alert","errorMessage","message","add_division","children","CCol","md","_jsx","CFormLabel","htmlFor","CFormInput","id","onChange","e","target","value","toUpperCase","required","maxLength","CFormFeedback","valid","xs","props","chageSteps","set_division_slug","divisions","useEffect","APIMiddleware","load_division","_Fragment","CRow","CCard","CCardHeader","CCardBody","CTable","align","hover","responsive","CTableHead","color","CTableRow","onClick","style","textAlign","CTableHeaderCell","CTableBody","map","item","index","slug","cursor","CTableDataCell"],"sourceRoot":""}