{"version":3,"file":"static/js/417.f93f501d.chunk.js","mappings":"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","sources":["views/AttendanceHistory/AttendanceHistory.js"],"sourcesContent":["import React, { useEffect, useState } from 'react'\nimport {\n  CRow,\n  CCol,\n  CCardHeader,\n  CCard,\n  CCardBody,\n  CTable,\n  CTableHead,\n  CTableRow,\n  CTableHeaderCell,\n  CTableBody,\n  CTableDataCell,\n  CFormInput,\n} from '@coreui/react'\nimport useAPI from 'src/global_function/useApi'\nimport axios from 'axios'\nimport '../../css/tailwind.css'\nimport Subject from '../subject/Subject'\nimport moment from 'moment'\nimport Session_history from '../teacher/Session_history'\n\nconst LectureHistory = () => {\n  const [StoredTokens, CallAPI] = useAPI()\n  const [subjects, SetSubjects] = useState(null)\n  const [lecture, setLecture] = useState(null)\n  const [FilterLecture, setFilterLecture] = useState(null)\n  const [attendances, setAttendances] = useState(null)\n  const [SelectedTeacher,setSelectedTeacher] = useState(null)\n  const [visible, setVisible] = useState(false)\n  const [session_data, setSessionData] = useState(null)\n  const [Teachers, SetTeachers] = useState(null)\n\n  const load_teachers_of_the_branch = async () => {\n    const headers = {\n      'Content-Type': 'application/json',\n      'ngrok-skip-browser-warning': true,\n    }\n    const axiosInstance = axios.create()\n    let endpoint = `/manage/get_teacher`\n    let method = 'get'\n    let response_obj = await CallAPI(StoredTokens, axiosInstance, endpoint, method, headers)\n    if (response_obj.error == false) {\n      let response = response_obj.response\n      SetTeachers(response.data.data)\n    } else {\n        alert(response_obj.errorMessage.message)\n    }\n  }\n  const load_subjects_of_teacher = async (teacher_slug) => {\n    const headers = {\n      'Content-Type': 'application/json',\n      'ngrok-skip-browser-warning': true,\n    }\n    const axiosInstance = axios.create()\n    const response_obj = await CallAPI(\n      StoredTokens,\n      axiosInstance,\n      '/manage/get_subjects_of_teacher_by_admin',\n      'get',\n      headers,\n      null,\n      {teacher_slug:teacher_slug},\n    )\n    if (response_obj.error === false) {\n      const response = response_obj.response\n      SetSubjects(response.data.data)\n    } else {\n    SetSubjects(null)\n    setAttendances(null)\n    setLecture(null)\n      alert(response_obj.errorMessage.message)\n    }\n  }\n  const load_lectures = async (subject_slug) => {\n    const headers = {\n      'Content-Type': 'application/json',\n      'ngrok-skip-browser-warning': true,\n    }\n    const axiosInstance = axios.create()\n    const response_obj = await CallAPI(\n      StoredTokens,\n      axiosInstance,\n      '/manage/get_lecture_sessions_for_teacher_by_admin',\n      'get',\n      headers,\n      null,\n      { subject_slug: subject_slug ,teacher_slug:SelectedTeacher},\n    )\n    if (response_obj.error === false) {\n      const response = response_obj.response\n      setLecture(response.data.data)\n    } else {\n      alert(response_obj.errorMessage.message)\n    }\n  }\n\n  const search_lecture = (day) => {\n    // console.log(day);\n    const filteredData = lecture.filter((item) =>\n      item.session.some((session) => session.day === day),\n    )\n\n    if (filteredData.length > 0) {\n      setFilterLecture(filteredData)\n    } else {\n      setFilterLecture(null)\n    }\n  }\n\n  const get_session_data = async (session_id) => {\n    const headers = {\n      'Content-Type': 'application/json',\n      'ngrok-skip-browser-warning': true,\n    }\n\n    const axiosInstance = axios.create()\n    const response_obj = await CallAPI(\n      StoredTokens,\n      axiosInstance,\n      `/manage/session/get_session_data_for_export/${session_id}`,\n      'get',\n      headers,\n      null,\n      null,\n    )\n    if (response_obj.error === false) {\n      const response = response_obj.response\n      setAttendances(response.data.data.marked_attendances)\n      setSessionData(response.data.data)\n      setVisible(true)\n    } else {\n      alert(response_obj.errorMessage.message)\n    }\n  }\n  useEffect(() => {\n    load_teachers_of_the_branch()\n  }, [])\n  return (\n    <>\n      {Teachers ? (\n        <>\n        <div className=\"mb-3\">\n                <label className=\"form-label\">Select A Teacher</label>\n                <select\n                  className=\"form-select\"\n                  aria-label=\"Default select example\"\n                  required\n                  onChange={(e) => {\n                    load_subjects_of_teacher(e.target.value);setSelectedTeacher(e.target.value)\n                  }}\n                >\n                  <option value=\"\">....</option>\n                  {Teachers.length > 0 &&\n                    Teachers.map((item, index) => (\n                      <option key={index} value={item.slug}>\n                        {item.profile.name}\n                      </option>\n                    ))}\n                </select>\n              </div>\n          {subjects ? (\n            <>\n              <div className=\"mb-3\">\n                <label className=\"form-label\">Select A Subject</label>\n                <select\n                  className=\"form-select\"\n                  aria-label=\"Default select example\"\n                  required\n                  onChange={(e) => {\n                    load_lectures(e.target.value)\n                  }}\n                >\n                  <option value=\"\">....</option>\n                  {subjects &&\n                    subjects.map((item, index) => (\n                      <option key={index} value={item.slug}>\n                        {item.subject_name}\n                      </option>\n                    ))}\n                </select>\n              </div>\n\n              {FilterLecture ? (\n                <CRow>\n                  <CCol xs>\n                    <CCard className=\"mb-4\">\n                      <CCardHeader>\n                        <div className=\"d-flex flex-wrap justify-between\">\n                          <div>\n                            <strong>Subject Attendance History</strong>\n                          </div>\n                          <div>\n                            <div className=\"d-flex\">\n                              <div>\n                                <input\n                                  type=\"date\"\n                                  id=\"validationCustom01\"\n                                  required\n                                  onChange={(e) => {\n                                    search_lecture(e.target.value)\n                                  }}\n                                />\n                              </div>\n                              <div className=\"mx-2\"></div>\n                            </div>\n                          </div>\n                        </div>\n                      </CCardHeader>\n                      <CCardBody>\n                      <CTable align=\"middle\" className=\"mb-0 border text-center\" hover responsive>\n                    <CTableHead color=\"light\">\n                      <CTableRow>\n                        <CTableHeaderCell>classroom</CTableHeaderCell>\n                        <CTableHeaderCell>Lecture Type</CTableHeaderCell>\n                        <CTableHeaderCell>Date</CTableHeaderCell>\n                        <CTableHeaderCell>Time</CTableHeaderCell>\n                      </CTableRow>\n                    </CTableHead>\n                    <CTableBody>\n                      {FilterLecture.map((lecture, index) => (\n                        lecture.session.map((session,index)=>(\n                          <CTableRow v-for=\"item in tableItems\" key={index} onClick={(e) => get_session_data(session.session_id)}>\n                          <CTableDataCell style={{fontSize:'0.8rem'}}>\n                            <div>{lecture.classroom}</div>   \n                          </CTableDataCell>\n                          <CTableDataCell style={{fontSize:'0.8rem'}}>\n                            <div>{lecture.type.charAt(0).toUpperCase() + lecture.type.slice(1)}</div>   \n                          </CTableDataCell>\n                          <CTableDataCell style={{fontSize:'0.6rem'}}>\n                            <div>{session.day}</div>   \n                          </CTableDataCell>\n                          <CTableDataCell style={{fontSize:'0.5rem'}}>\n                            <span className='d-block'>{moment(lecture.start_time.slice(0, 5), 'HH:mm').format('h:mm A')} </span>\n                            <span className='d-block'>To</span> \n                            <span className='d-block'>{moment(lecture.end_time.slice(0, 5), 'HH:mm').format('h:mm A')}</span>\n                          </CTableDataCell>\n                        </CTableRow>\n                        ))\n                        \n                      ))}\n                    </CTableBody>\n                  </CTable>\n                      </CCardBody>\n                    </CCard>\n                  </CCol>\n                </CRow>\n              ) : lecture ? (\n                <CRow>\n                  <CCol xs>\n                    <CCard className=\"mb-4\">\n                      <CCardHeader>\n                        <div className=\"d-flex flex-wrap justify-between\">\n                          <div>\n                            <strong>Subject Attendance History</strong>\n                          </div>\n                          <div>\n                            <div className=\"d-flex\">\n                              <div>\n                                <input\n                                  type=\"date\"\n                                  id=\"validationCustom01\"\n                                  required\n                                  onChange={(e) => {\n                                    search_lecture(e.target.value)\n                                  }}\n                                />\n                              </div>\n                              <div className=\"mx-2\"></div>\n                            </div>\n                          </div>\n                        </div>\n                      </CCardHeader>\n                      <CCardBody>\n                        <CTable align=\"middle\" className=\"mb-0 border text-center\" hover responsive>\n                        <CTable align=\"middle\" className=\"mb-0 border text-center\" hover responsive>\n                    <CTableHead color=\"light\">\n                      <CTableRow>\n                        <CTableHeaderCell>Class</CTableHeaderCell>\n                        <CTableHeaderCell>Type</CTableHeaderCell>\n                        <CTableHeaderCell>Date</CTableHeaderCell>\n                        <CTableHeaderCell>Time</CTableHeaderCell>\n                      </CTableRow>\n                    </CTableHead>\n                    <CTableBody>\n                      \n                    { lecture.length > 0  ? (\n                      lecture.map((lecture, index) => (\n                        lecture.session.map((session,index)=>(\n                          <CTableRow v-for=\"item in tableItems\" key={index} onClick={(e) => get_session_data(session.session_id)}>\n                          <CTableDataCell style={{fontSize:'0.8rem'}}>\n                            <div>{lecture.classroom}</div>   \n                          </CTableDataCell>\n                          <CTableDataCell style={{fontSize:'0.8rem'}}>\n                            <div>{lecture.type.charAt(0).toUpperCase() + lecture.type.slice(1)}</div>   \n                          </CTableDataCell>\n                          <CTableDataCell style={{fontSize:'0.6rem'}}>\n                            <div>{session.day}</div>   \n                          </CTableDataCell>\n                          <CTableDataCell style={{fontSize:'0.5rem'}}>\n                            <span className='d-block'>{moment(lecture.start_time.slice(0, 5), 'HH:mm').format('h:mm A')} </span>\n                            <span className='d-block'>To</span> \n                            <span className='d-block'>{moment(lecture.end_time.slice(0, 5), 'HH:mm').format('h:mm A')}</span>\n                          </CTableDataCell>\n                        </CTableRow>\n                        )) \n                        \n                        \n                      ))\n                    ) \n                    :(\n                      <CTableRow v-for=\"item in tableItems\">\n                        <CTableDataCell colSpan={4}>\n                          <div className='alert alert-primary w-100 my-2'>\n                            <span className=''>No Lecture Sessions Are There for This Subject</span>\n                          </div>\n                        \n                        </CTableDataCell>\n                      </CTableRow>\n                    )\n                    }\n                    </CTableBody>\n                  </CTable>\n                        </CTable>\n                      </CCardBody>\n                    </CCard>\n                  </CCol>\n                </CRow>\n              ) : null}\n            </>\n          ) : null}\n        </>\n      ) : null}\n      {\n        attendances && <Session_history visible={visible} setVisible={setVisible} attendances={attendances} session_data={session_data}></Session_history>\n       } \n       \n      {!lecture && (\n        <>\n            <div className='d-flex justify-content-center'>\n                <img style={{maxWidth:'70%',height:'auto'}} src='/static/svgs/lecturehistory.svg'></img>\n            </div>\n        </>\n      )}\n    </>\n  )\n}\n\nexport default LectureHistory\n"],"names":["LectureHistory","StoredTokens","CallAPI","useAPI","subjects","SetSubjects","useState","lecture","setLecture","FilterLecture","setFilterLecture","attendances","setAttendances","SelectedTeacher","setSelectedTeacher","visible","setVisible","session_data","setSessionData","Teachers","SetTeachers","search_lecture","day","filteredData","filter","item","session","some","length","get_session_data","async","axiosInstance","axios","create","response_obj","concat","session_id","error","response","data","marked_attendances","alert","errorMessage","message","useEffect","load_teachers_of_the_branch","_jsxs","_Fragment","children","className","_jsx","required","onChange","e","teacher_slug","load_subjects_of_teacher","target","value","map","index","slug","profile","name","subject_slug","load_lectures","subject_name","CRow","CCol","xs","CCard","CCardHeader","type","id","CCardBody","CTable","align","hover","responsive","CTableHead","color","CTableRow","CTableHeaderCell","CTableBody","onClick","CTableDataCell","style","fontSize","classroom","charAt","toUpperCase","slice","moment","start_time","format","end_time","colSpan","Session_history","maxWidth","height","src"],"sourceRoot":""}