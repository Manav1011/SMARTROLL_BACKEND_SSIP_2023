{"version":3,"file":"static/js/59.bf036a44.chunk.js","mappings":"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","sources":["views/teacher/surveys/AddSurvey.js","views/teacher/surveys/AddSurveyButton.js","views/teacher/surveys/SurveyDisplay.js","views/teacher/surveys/ManageSurveys.js"],"sourcesContent":["import React, { useEffect, useState } from 'react'\nimport {\n  COffcanvas,\n  COffcanvasBody,\n  CCard,\n  CCardBody,\n  CFormSelect,\n  CCardHeader,\n} from '@coreui/react'\nimport axios from 'axios'\nimport useAPI from 'src/global_function/useApi'\n\nexport const AddSurvey = ({ visible, setVisible, setActiveSurveys }) => {\n  const [StoredTokens, CallAPI] = useAPI()\n  const [selectedBranch, setSelectedBranch] = useState(null)\n  const [selectedSemester, setSelectedSemester] = useState('__all__')\n  const [selectedDivision, setSelectedDivision] = useState('__all__')\n  const [selectedBatch, setSelectedBatch] = useState('__all__')\n  const [numberOfOptions, setNumberOfOptions] = useState(2)\n  const [optionsValues, setOptionValues] = useState({})\n  const [surveyTitle, setSurveyTitle] = useState('')\n\n  const [branches, setBranches] = useState([])\n  const [semesters, setSemesters] = useState([])\n  const [division, setDivision] = useState([])\n  const [batches, setBatches] = useState([])\n\n  const headers = {\n    'Content-Type': 'application/json',\n    'ngrok-skip-browser-warning': true,\n  }\n  const axiosInstance = axios.create()\n\n  const handleFormSubmit = async (e) => {\n    e.preventDefault()\n    let body = {\n      survey_title: surveyTitle,\n      type: 'mcq',\n      branch_slug: selectedBranch,\n      semester_slug: selectedSemester,\n      division_slug: selectedDivision,\n      batch_slug: selectedBatch,\n      options: Object.values(optionsValues),\n    }\n    let response_obj = await CallAPI(\n      StoredTokens,\n      axiosInstance,\n      '/manage/additional_features/generate_survey_for_a_lecture/',\n      'post',\n      headers,\n      body,\n      null,\n    )\n    if (response_obj.error == false) {\n      let survey = response_obj?.response?.data?.data\n      setActiveSurveys((prevArray) => [...prevArray, survey])\n      setVisible(false)\n    } else {\n      alert(response_obj.errorMessage.message)\n    }\n  }\n\n  useEffect(() => {\n    if (selectedBranch) {\n      handleSemester(selectedBranch)\n    } else {\n      setSelectedSemester('__all__')\n    }\n  }, [selectedBranch])\n\n  useEffect(() => {\n    if (selectedSemester !== '__all__') {\n      handleDivision(selectedSemester)\n    } else {\n      setSelectedDivision('__all__')\n    }\n  }, [selectedSemester])\n\n  useEffect(() => {\n    if (selectedDivision !== '__all__') {\n      handleBatches(selectedDivision)\n    } else {\n      setSelectedBatch('__all__')\n    }\n  }, [selectedDivision])\n\n  const handleBranch = async () => {\n    let a = await CallAPI(\n      StoredTokens,\n      axiosInstance,\n      '/manage/get_branches_of_teacher',\n      'get',\n      headers,\n      null,\n      null,\n    )\n    if (!1 === a.error) {\n      let e = a.response,\n        n = e.data.data\n      setBranches(n)\n    }\n  }\n\n  const handleSemester = async (e) => {\n    let a = await CallAPI(\n      StoredTokens,\n      axiosInstance,\n      `/manage/get_semesters_from_branch/${e}`,\n      'get',\n      headers,\n      null,\n      null,\n    )\n    if (!1 === a.error) {\n      let t = a?.response,\n        l = t?.data?.data\n      setSemesters(l)\n    }\n  }\n\n  const handleDivision = async (e) => {\n    let a = await CallAPI(\n      StoredTokens,\n      axiosInstance,\n      `/manage/get_divisons_from_semester/${e}`,\n      'get',\n      headers,\n      null,\n      null,\n    )\n    if (!1 === a.error) {\n      let n = a?.response,\n        s = n?.data?.data\n      setDivision(s)\n    }\n  }\n\n  const handleBatches = async (a) => {\n    let e = await CallAPI(\n      StoredTokens,\n      axiosInstance,\n      `/manage/get_batches_from_divison/${a}`,\n      'get',\n      headers,\n      null,\n      null,\n    )\n    if (!1 === e.error) {\n      let t = e?.response,\n        l = t?.data?.data\n      setBatches(l)\n    }\n  }\n\n  useEffect(() => {\n    handleBranch()\n  }, [])\n\n  return (\n    <COffcanvas\n      placement=\"end\"\n      visible={visible}\n      onHide={() => setVisible(false)}\n      data-coreui-backdrop=\"static\"\n      className=\"card w-50 p-4\"\n    >\n      <COffcanvasBody>\n        <CCard className=\"shadow-lg rounded-lg border border-gray-200\">\n          <CCardHeader className=\"bg-[#c2bcf4] text-xl py-2 rounded-t-lg\">Add Survey</CCardHeader>\n          <CCardBody className=\"p-6\">\n            <form className=\"space-y-4\" autoComplete=\"off\" onSubmit={handleFormSubmit}>\n              {/* Survey Title */}\n              <div className=\"mb-4\">\n                <label className=\"form-label text-lg font-semibold\">Title of Survey</label>\n                <input\n                  type=\"text\"\n                  className=\"form-control border-gray-300 shadow-sm focus:border-yellow-500 focus:ring focus:ring-yellow-500 focus:ring-opacity-50\"\n                  required\n                  onChange={(e) => {\n                    setSurveyTitle(e.target.value)\n                  }}\n                />\n              </div>\n\n              {/* Number of Options */}\n              <div className=\"mb-2\">\n                <div className=\"flex items-center gap-4\">\n                  <label className=\"text-lg font-semibold\">Manage Options</label>\n                  <button\n                    id=\"decrement-btn\"\n                    className=\"flex justify-center items-center w-6 h-6 rounded-full text-white focus:outline-none bg-gray-400 hover:bg-gray-500\"\n                    onClick={() => {\n                      numberOfOptions > 2 && setNumberOfOptions(numberOfOptions - 1)\n                    }}\n                    type=\"button\"\n                  >\n                    <svg\n                      className=\"w-3 h-3\"\n                      fill=\"none\"\n                      stroke=\"currentColor\"\n                      viewBox=\"0 0 24 24\"\n                      xmlns=\"http://www.w3.org/2000/svg\"\n                    >\n                      <path\n                        strokeLinecap=\"round\"\n                        strokeLinejoin=\"round\"\n                        strokeWidth={2}\n                        d=\"M20 12H4\"\n                      />\n                    </svg>\n                  </button>\n                  <span id=\"counter\" className=\"text-2xl font-bold mx-4\">\n                    {numberOfOptions}\n                  </span>\n                  <button\n                    id=\"increment-btn\"\n                    className=\"flex justify-center items-center w-6 h-6 rounded-full text-white focus:outline-none bg-indigo-500 hover:bg-indigo-600\"\n                    onClick={() => {\n                      setNumberOfOptions(numberOfOptions + 1)\n                    }}\n                    type=\"button\"\n                  >\n                    <svg\n                      className=\"w-3 h-3\"\n                      fill=\"none\"\n                      stroke=\"currentColor\"\n                      viewBox=\"0 0 24 24\"\n                      xmlns=\"http://www.w3.org/2000/svg\"\n                    >\n                      <path\n                        strokeLinecap=\"round\"\n                        strokeLinejoin=\"round\"\n                        strokeWidth={2}\n                        d=\"M12 6v12M6 12h12\"\n                      />\n                    </svg>\n                  </button>\n                </div>\n\n                <div className=\"mx-2\">\n                  {[...Array(numberOfOptions)].map((_, i) => (\n                    <div className=\"mb-3 focus:border-yellow-500\" key={i}>\n                      <label className=\"form-label\">Option {i + 1}</label>\n                      <input\n                        type=\"text\"\n                        className=\"form-control focus:border-yellow-500\"\n                        required\n                        onChange={(e) => {\n                          setOptionValues((prevState) => ({\n                            ...prevState,\n                            [`option_${i}`]: e.target.value,\n                          }))\n                        }}\n                      />\n                    </div>\n                  ))}\n                </div>\n              </div>\n\n              {/* Select Branch */}\n              <div className=\"mb-4\">\n                <label className=\"form-label text-lg font-semibold\">Select Branch</label>\n                <CFormSelect\n                  aria-label=\"Select Branch\"\n                  onChange={(e) => {\n                    e.target.value !== '' && setSelectedBranch(e.target.value)\n                  }}\n                >\n                  <option value=\"\">Select Branch</option>\n                  {branches.map((item, index) => (\n                    <option key={index} value={item.slug}>\n                      {item.branch_name}\n                    </option>\n                  ))}\n                </CFormSelect>\n              </div>\n\n              {/* Select Semester */}\n              {selectedBranch && (\n                <div className=\"mb-4\">\n                  <label className=\"form-label text-lg font-semibold\">Select Semester</label>\n                  <CFormSelect\n                    onChange={(e) => {\n                      setSelectedSemester(e.target.value)\n                    }}\n                  >\n                    <option value=\"__all__\">Select All</option>\n                    {semesters.map((item, index) => (\n                      <option key={index} value={item.slug}>\n                        {item.no}\n                      </option>\n                    ))}\n                  </CFormSelect>\n                </div>\n              )}\n\n              {selectedSemester !== '__all__' && (\n                <div className=\"mb-4\">\n                  <label className=\"form-label text-lg font-semibold\">Select Division</label>\n                  <CFormSelect\n                    onChange={(e) => {\n                      setSelectedDivision(e.target.value)\n                    }}\n                  >\n                    <option value=\"__all__\">Select All</option>\n                    {division.map((item, index) => (\n                      <option key={index} value={item.slug}>\n                        {item.division_name}\n                      </option>\n                    ))}\n                  </CFormSelect>\n                </div>\n              )}\n\n              {/* Select Batch */}\n              {selectedDivision !== '__all__' && (\n                <div className=\"mb-4\">\n                  <label className=\"form-label text-lg font-semibold\">Select Batch</label>\n                  <CFormSelect\n                    onChange={(e) => {\n                      setSelectedBatch(e.target.value)\n                    }}\n                  >\n                    <option value=\"__all__\">Select All</option>\n                    {batches.map((item, index) => (\n                      <option key={index} value={item.slug}>\n                        {item.batch_name}\n                      </option>\n                    ))}\n                  </CFormSelect>\n                </div>\n              )}\n\n              {/* Submit Button */}\n              <button\n                type=\"submit\"\n                className=\"btn btn-dark text-black rounded-md px-4 py-2 form-control\"\n              >\n                Submit\n              </button>\n              <button\n                type=\"button\"\n                className=\"btn btn-danger text-black rounded-md px-4 py-2 form-control\"\n                onClick={() => {\n                  setVisible(false)\n                }}\n              >\n                Cancel\n              </button>\n            </form>\n          </CCardBody>\n        </CCard>\n      </COffcanvasBody>\n    </COffcanvas>\n  )\n}\n\nexport default AddSurvey\n","import React from 'react'\n\nfunction AddSurveyButton({setVisible}) {\n  return (\n    <div className=\"fixed bottom-0 right-0 w-16 h-16 mr-12 mb-8 cursor-pointer\" id=\"box_btn\" onClick={() => {setVisible(true)}}>\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          width={60}\n          height={60}\n          fill=\"currentColor\"\n          className=\"bi bi-plus-circle-fill\"\n          viewBox=\"0 0 16 16\"\n        >\n          <path d=\"M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0M8.5 4.5a.5.5 0 0 0-1 0v3h-3a.5.5 0 0 0 0 1h3v3a.5.5 0 0 0 1 0v-3h3a.5.5 0 0 0 0-1h-3z\" />\n        </svg>\n      </div>\n  )\n}\n\nexport default AddSurveyButton","import React from 'react'\nimport { CToastBody } from '@coreui/react'\n\nfunction SurveyDisplay({item,active,endSurvey}) {\n  return (\n    <CToastBody\n    className=\"flex-row px-3 flex-wrap justify-content-center bg-slate-200 border border-black shadow-md\"\n  >\n    <div className=\"w-100 fw-bold text-center text-sm-start\">\n      <div>\n        <small className=\"mx-2 my-2 text-xl block\">{item.title}</small>\n        <small className=\"mx-2 my-2 text-xs flex items-center gap-2 text-gray-700\">\n          <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            width={16}\n            height={16}\n            fill=\"currentColor\"\n            className=\"bi bi-check2-circle\"\n            viewBox=\"0 0 16 16\"\n          >\n            <path d=\"M2.5 8a5.5 5.5 0 0 1 8.25-4.764.5.5 0 0 0 .5-.866A6.5 6.5 1 0 0 0 14.5 8a.5.5 0 0 0-1 0 5.5 5.5 1 1 0-11 0\" />\n            <path d=\"M15.354 3.354a.5.5 0 0 0-.708-.708L8 9.293 5.354 6.646a.5.5 0 1 0-.708.708l3 3a.5.5 0 0 0 .708 0z\" />\n          </svg>\n          Select One\n        </small>\n      </div>\n      <hr className=\"w-100 my-2\" />\n    </div>\n    <div className=\"w-100\">\n      {item.options.map((option, index) => (\n        <div key={index} className=\"my-2\">\n          <label\n            htmlFor={`option-${item.id}-${index}`}\n            className=\"text-blue-700 font-bold text-sm p-2\"\n          >\n            {option.option}\n          </label>\n          <span className=\"ml-2 text-gray-500/60 font-bold\">\n            ({option.student_count} votes)\n          </span>\n        </div>\n      ))}\n    </div>\n    {active && (\n      <>\n      <hr className=\"w-100 my-2\" />\n      <div className=\"flex-initial py-3 w-full\">\n      <button\n        className=\"w-full justify-center flex items-center px-5 py-2.5 font-medium tracking-wide text-white capitalize bg-slate-800 rounded-md focus:outline-none focus:bg-gray-900 transition duration-300 transform active:scale-95 ease-in-out hover:bg-red-500\"\n        type=\"submit\"\n        onClick={() => {endSurvey(item.slug)}}\n      >\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          viewBox=\"0 0 48 48\"\n          width=\"26px\"\n          height=\"26px\"\n        >\n          <path\n            fill=\"#f44336\"\n            d=\"M44,24c0,11.045-8.955,20-20,20S4,35.045,4,24S12.955,4,24,4S44,12.955,44,24z\"\n          />\n          <path\n            fill=\"#fff\"\n            d=\"M29.656,15.516l2.828,2.828l-14.14,14.14l-2.828-2.828L29.656,15.516z\"\n          />\n          <path\n            fill=\"#fff\"\n            d=\"M32.484,29.656l-2.828,2.828l-14.14-14.14l2.828-2.828L32.484,29.656z\"\n          />\n        </svg>\n        <span className=\"pl-2\">End Survey</span>\n      </button>\n    </div>\n      </>)}\n    \n  </CToastBody>\n  )\n}\n\nexport default SurveyDisplay","import React, { useEffect, useState } from 'react'\nimport { CAlert, CToastBody } from '@coreui/react'\nimport AddSurvey from './AddSurvey'\nimport AddSurveyButton from './AddSurveyButton'\nimport axios from 'axios'\nimport useAPI from 'src/global_function/useApi'\nimport SurveyDisplay from './SurveyDisplay'\n\nexport const ManageSurveys = () => {\n  const [visible, setVisible] = useState(false)\n  const [ActiveSurveys, setActiveSurveys] = useState([])\n  const [InactiveSurveys, setInactiveSurveys] = useState([])\n  const [viewingSurveys, setViewingSurveys] = useState('active')\n  const [StoredTokens, CallAPI] = useAPI()\n  const headers = {\n    'Content-Type': 'application/json',\n    'ngrok-skip-browser-warning': true,\n  }\n  const axiosInstance = axios.create()\n\n  useEffect(() => {\n    CallAPI(\n      StoredTokens,\n      axiosInstance,\n      '/manage/additional_features/get_surveys_of_the_teacher',\n      'get',\n      headers,\n      null,\n      null,\n    ).then((res) => {\n      if (res.error) {\n        alert(res.errorMessage.message)\n      } else {\n        let surveys = res?.response?.data?.data\n        setActiveSurveys(surveys.filter((survey) => survey.active == true))\n        setInactiveSurveys(surveys.filter((survey) => survey.active == false))\n      }\n    })\n  }, [])\n\n  const endSurvey = async (survey_slug) => {\n    let body = {survey_slug:survey_slug}\n    console.log(survey_slug);\n    CallAPI(\n      StoredTokens,\n      axiosInstance,\n      '/manage/additional_features/end_survey/',\n      'post',\n      headers,\n      body,\n      null,\n    ).then((res) => {\n      if (res.error) {\n        alert(res.errorMessage.message)\n      } else {        \n        setActiveSurveys(ActiveSurveys.filter((survey) => {\n          setInactiveSurveys(prevArray => [...prevArray,survey])\n          return survey.slug != survey_slug\n        }))        \n      }\n    })\n  }\n\n  return (\n    <div className=\"mt-2\">\n      <div className=\"mb-3\">\n        <select\n          className=\"form-select\"\n          aria-label=\"Default select example\"\n          required\n          onChange={(e) => {\n            viewingSurveys == 'active' ? setViewingSurveys('inactive') : setViewingSurveys('active')\n          }}\n        >\n          <option value=\"active\">Active Surveys</option>\n          <option value=\"inactive\">Inactive Surveys</option>\n        </select>\n      </div>\n      <div>\n        {viewingSurveys === 'active' ? (\n          <>\n          <div className='flex flex-col gap-4 overflow-y-scroll'>\n            {ActiveSurveys.length > 0 ? (\n              ActiveSurveys.map((item, index) => (\n                <SurveyDisplay item={item} key={index} active={true} endSurvey={endSurvey}/>\n              ))\n            ) : (\n              <div className=\"alert alert-warning w-full my-2 text-center\">\n                <span>No Active Surveys</span>\n              </div>\n            )}\n          </div>\n          </>\n        ) : (\n          <>            \n            <div className='flex flex-col gap-4 overflow-y-scroll'>\n            {InactiveSurveys.length > 0 ? (\n              InactiveSurveys.map((item, index) => (\n                <SurveyDisplay item={item} key={index} active={false}/>\n              ))\n            ) : (\n              <div className=\"alert alert-warning w-75 my-2 text-center\">\n                <span>No Inactive Surveys</span>\n              </div>\n            )}\n            </div>\n          </>\n        )}\n      </div>\n      <AddSurveyButton setVisible={setVisible} />\n      <AddSurvey visible={visible} setVisible={setVisible} setActiveSurveys={setActiveSurveys} />\n    </div>\n  )\n}\n\nexport default ManageSurveys\n"],"names":["_ref","visible","setVisible","setActiveSurveys","StoredTokens","CallAPI","useAPI","selectedBranch","setSelectedBranch","useState","selectedSemester","setSelectedSemester","selectedDivision","setSelectedDivision","selectedBatch","setSelectedBatch","numberOfOptions","setNumberOfOptions","optionsValues","setOptionValues","surveyTitle","setSurveyTitle","branches","setBranches","semesters","setSemesters","division","setDivision","batches","setBatches","headers","axiosInstance","axios","create","useEffect","handleSemester","handleDivision","handleBatches","async","a","concat","e","error","_t$data","t","response","l","data","_n$data","n","s","_t$data2","handleBranch","_jsx","COffcanvas","placement","onHide","className","children","COffcanvasBody","_jsxs","CCard","CCardHeader","CCardBody","autoComplete","onSubmit","preventDefault","body","survey_title","type","branch_slug","semester_slug","division_slug","batch_slug","options","Object","values","response_obj","_response_obj$respons","_response_obj$respons2","survey","prevArray","alert","errorMessage","message","required","onChange","target","value","id","onClick","fill","stroke","viewBox","xmlns","strokeLinecap","strokeLinejoin","strokeWidth","d","Array","map","_","i","prevState","CFormSelect","item","index","slug","branch_name","no","division_name","batch_name","width","height","active","endSurvey","CToastBody","title","option","htmlFor","student_count","_Fragment","ManageSurveys","ActiveSurveys","InactiveSurveys","setInactiveSurveys","viewingSurveys","setViewingSurveys","then","res","_res$response","_res$response$data","surveys","filter","survey_slug","console","log","length","SurveyDisplay","AddSurveyButton","AddSurvey"],"sourceRoot":""}