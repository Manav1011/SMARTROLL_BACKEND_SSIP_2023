{"version":3,"file":"static/js/8386.bf8e59cd.chunk.js","mappings":"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","sources":["views/forms/validation/Validation.js"],"sourcesContent":["import React, { useState  } from 'react'\nimport { useEffect } from 'react'\nimport PropTypes from 'prop-types'\nimport axios from 'axios'\nimport { useContext } from 'react'\nimport { Navigate, useNavigate } from 'react-router-dom'\nimport { APIMiddleware } from 'src/global_function/GlobalFunctions'\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CForm,\n  CFormInput,\n  CFormFeedback,\n  CFormLabel,\n  CRow,\n  CTable,\n  CTableBody,\n  CTableDataCell,\n  CTableHead,\n  CTableHeaderCell,\n  CTableRow,\n} from '@coreui/react'\nimport { Store } from '../validation/store'\nimport base_url from 'src/base_url'\nimport expireToken from 'src/global_function/unauthorizedToken'\n\nconst CustomStyles = (Batches,setBatches,setBatchCout) => {\n  const { state, dispatch: ctxDispatch } = useContext(Store);\n  const { accessToken, refreshToken, batches, currentBatch , objectCount } = state\n  const [validated, setValidated] = useState(false)\n  const currentYear = new Date().getFullYear() \n  const [Start, setStart] = useState(currentYear);\n  const EndYear = (parseInt(Start, 10) + 1).toString();\n  const navigate = useNavigate()\n  const addBatches = async(body) => {\n    const header = {\n      \"Content-Type\":\"application/json\",      \n      'ngrok-skip-browser-warning':true\n    }\n    const axiosInstance = axios.create()\n    let endpoint = `/manage/add_batch`;let method='post';let headers = header;\n    let response_obj = await APIMiddleware(axiosInstance,endpoint,method,headers,body,null)\n    if(response_obj.error == false){\n        let response = response_obj.response\n        let batchCount = {...objectCount}\n        batchCount.batches += 1\n        console.log(batchCount);\n        ctxDispatch({ type: 'GET_OBJECTS', payload: batchCount });\n        setBatches(prevArray => [...prevArray, response.data.data]);\n        setBatchCout(preValue => preValue + 1);\n      }else{  \n        console.log(response_obj.error)\n      }    \n  }\n\n  const handleSubmit = (event) => {\n    const form = event.currentTarget\n    event.preventDefault()\n    if (form.checkValidity() === false) {\n      event.preventDefault()\n      event.stopPropagation()\n    }\n    setValidated(true)\n    const body = {\n      batch_name: Start + \"-\" + EndYear\n    }\n    addBatches(body)\n  }\n  return (\n    <CForm\n      className=\"row g-3 needs-validation\"\n      noValidate\n      validated={validated}\n      onSubmit={handleSubmit}\n    >\n      <CCol md={6}>\n        <CFormLabel htmlFor=\"validationCustom01\">Start Year</CFormLabel>\n        <CFormInput type=\"number\" min={currentYear} max=\"2099\" step=\"1\" value={Start}  id=\"validationCustom01\" onChange={e => setStart(e.target.value)} required maxLength={4} />\n        <CFormFeedback valid>Looks good!</CFormFeedback>\n      </CCol>\n      <CCol md={6}>\n        <CFormLabel htmlFor=\"validationCustom02\">End Year</CFormLabel>\n        <CFormInput type=\"number\" value={EndYear}  readOnly step=\"1\" id=\"validationCustom02\"   required maxLength={4}/>\n        <CFormFeedback valid>Looks good!</CFormFeedback>\n      </CCol>\n      <CCol xs={12}>\n        <button className='btn btn-outline-dark form-control' type=\"submit\" >\n          Submit form\n        </button>\n      </CCol>\n    </CForm>\n  )\n}\n\nconst Validation = (props) => {\n  const {chageSteps} = props\n  const {setSlug} = props\n  const {setBatchCout} = props\n  const { state, dispatch: ctxDispatch } = useContext(Store);\n  const { accessToken, refreshToken, batches, currentBatch} = state\n  const navigate = useNavigate()\n  const [Batches, setBatches] = useState(batches);\n  \n  // function for the load batches\n  \n  const loadBatches = async() => {\n    const header = {\n      \"Content-Type\":\"application/json\",\n      \"Authorization\": `Bearer ${accessToken}`,\n      'ngrok-skip-browser-warning':true\n    }\n    \n    axios.get(`${base_url}/manage/get_batches`,{headers:header})\n    .then((response)=>{\n      ctxDispatch({ type: 'GET_BATCHES', payload: response.data.data });\n      //console.log(state.batches);\n      \n       response.data.data.map((item)=>{\n          if(item.active){\n            console.log(item);\n            ctxDispatch({ type: 'CURRENT_BATCH_SLUG', payload: item });    \n          }\n      })\n      \n      setBatches(response.data.data)\n    })\n    .catch((error)=>{\n\n        if(error.response.status === 401){\n\n     \n          expireToken(refreshToken,(error,result)=>{\n            ctxDispatch({ type: 'ACCESS_TOKEN', payload: result.access });\n            ctxDispatch({ type: 'REFRESH_TOKEN', payload: result.refresh });\n          })\n        }\n    })\n  }\n\n  // useEffect(() => {\n  //   if(accessToken){\n  //     loadBatches()\n  //   }\n  // }, []);\n\n  useEffect(() => {\n    setBatches(batches)\n  }, [batches]);\n  \n  \n  return (\n    <>\n      <CRow>\n        <CCol xs={12}>\n          <CCard className=\"mb-3\">\n            <CCardHeader>\n              <strong>Batches</strong>\n            </CCardHeader>\n            <CCardBody>{CustomStyles(Batches,setBatches,setBatchCout)}</CCardBody>\n          </CCard>\n        </CCol>\n      </CRow>\n      <CRow>\n        <CCol xs>\n          <CCard className=\"mb-4\">\n            <CCardHeader>\n              <strong>Batches History</strong>\n            </CCardHeader>\n            <CCardBody>\n              <CTable align=\"middle\" className=\"mb-0 border text-center\" hover responsive>\n                <CTableHead color=\"light\">\n                  <CTableRow>\n                    <CTableHeaderCell>Batches</CTableHeaderCell>\n                    <CTableHeaderCell>Activation Status</CTableHeaderCell>\n                  </CTableRow>\n                </CTableHead>\n                <CTableBody>\n                  {Batches.map((item, index) => (\n                    <CTableRow v-for=\"item in tableItems\" key={index}>\n                      <CTableDataCell>\n                        <div  onClick={() => {chageSteps('semester'); setSlug(item.slug);}}>{item.batch_name}</div>   \n                      </CTableDataCell>\n                      <CTableDataCell>\n                        <div  onClick={() => {chageSteps('semester'); setSlug(item.slug);}}>\n                          {item.active ? (<div><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" className=\"bi bi-check-circle-fill\" viewBox=\"0 0 16 16\">\n                            <path d=\"M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zm-3.97-3.03a.75.75 0 0 0-1.08.022L7.477 9.417 5.384 7.323a.75.75 0 0 0-1.06 1.06L6.97 11.03a.75.75 0 0 0 1.079-.02l3.992-4.99a.75.75 0 0 0-.01-1.05z\" />\n                          </svg>{}\n                          </div>):<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" className=\"bi bi-x-circle-fill\" viewBox=\"0 0 16 16\">\n                      <path d=\"M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zM5.354 4.646a.5.5 0 1 0-.708.708L7.293 8l-2.647 2.646a.5.5 0 0 0 .708.708L8 8.707l2.646 2.647a.5.5 0 0 0 .708-.708L8.707 8l2.647-2.646a.5.5 0 0 0-.708-.708L8 7.293 5.354 4.646z\"/>\n                          </svg>}\n                        </div>   \n                      </CTableDataCell> \n                    </CTableRow>\n                  ))}\n                </CTableBody>\n              </CTable>\n            </CCardBody>\n          </CCard>\n        </CCol>\n      </CRow>\n      \n    </>\n  )\n}\n\nValidation.propTypes = {\n  chageSteps: PropTypes.func.isRequired,\n  setSlug: PropTypes.func.isRequired,\n  setBatchCout:PropTypes.func.isRequired\n}\n\nexport default Validation\n"],"names":["CustomStyles","Batches","setBatches","setBatchCout","state","dispatch","ctxDispatch","useContext","Store","accessToken","refreshToken","batches","currentBatch","objectCount","validated","setValidated","useState","currentYear","Date","getFullYear","Start","setStart","EndYear","parseInt","toString","useNavigate","_jsxs","CForm","className","noValidate","onSubmit","event","form","currentTarget","preventDefault","checkValidity","stopPropagation","async","axiosInstance","axios","create","headers","response_obj","APIMiddleware","body","error","response","batchCount","console","log","type","payload","prevArray","data","preValue","addBatches","batch_name","children","CCol","md","_jsx","CFormLabel","htmlFor","CFormInput","min","max","step","value","id","onChange","e","target","required","maxLength","CFormFeedback","valid","readOnly","xs","props","chageSteps","setSlug","useEffect","_Fragment","CRow","CCard","CCardHeader","CCardBody","CTable","align","hover","responsive","CTableHead","color","CTableRow","CTableHeaderCell","CTableBody","map","item","index","CTableDataCell","onClick","slug","active","xmlns","width","height","fill","viewBox","d"],"sourceRoot":""}