{"version":3,"file":"static/js/286.333dff95.chunk.js","mappings":"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","sources":["views/student_controller/Addstudent.js"],"sourcesContent":["import { CCard, CCardBody, CCardHeader, CCol, CConditionalPortal, CRow, CFormLabel, CFormSelect, CFormInput } from '@coreui/react'\nimport axios from 'axios'\nimport React, { useEffect, useState } from 'react'\nimport useAPI from 'src/global_function/useApi'\n\nconst Addstudent = () => {\n\n    \n    const [Semesters, setSemesters] = useState(null)\n    const [fileupload, set_fileupload] = useState(false)\n    const [division, set_division] = useState(null)\n    const [excel_file , set_excel_file] = useState(null)\n    const [sheet_name , set_sheet_name] = useState(null)\n    const [division_name,set_division_name] = useState(null)\n    const [term,set_term] = useState([])\n\n    // custom hook to handel the request\n\n    const [StoredTokens, CallAPI] = useAPI()\n\n    // functions to handel the requests\n\n    const load_semester = async (termSlug) => {\n        if(termSlug){\n            const header = {\n                'Content-Type': 'application/json',\n                'ngrok-skip-browser-warning': true,\n            }\n            const axiosInstance = axios.create()\n            let endpoint = `/manage/get_semesters`\n            let method = 'get'\n            let headers = header\n            let response_obj = await CallAPI(StoredTokens, axiosInstance, endpoint, method, headers,null,{term_slug:termSlug})\n            if (response_obj.error == false) {\n                let response = response_obj.response\n                setSemesters(response.data.data)\n            } else {      \n                alert(response_obj.errorMessage.message)      \n            }\n        }else{\n            alert('Please select a valid term')\n        }\n       \n    }\n    const load_division = async (semester_slug) => {\n        if (semester_slug != ' ') {\n            const headers = {\n                'Content-Type': 'application/json',\n                'ngrok-skip-browser-warning': true,\n            }\n            const axiosInstance = axios.create()\n            let endpoint = `/manage/get_divisions`\n            let method = 'get'\n            let response_obj = await CallAPI(\n                StoredTokens,\n                axiosInstance,\n                endpoint,\n                method,\n                headers,\n                null,\n                { semester_slug: semester_slug },\n            )\n            if (response_obj.error === false) {\n                const response = response_obj.response\n                set_division(response.data.data)\n\n            } else {\n                alert(response_obj.errorMessage.message)\n            }\n        } else {\n            alert('please select semester')\n        }\n    }\n\n\n    const handelFormSubmit = async()=>{\n        const formdata = new FormData()\n        formdata.append('students.xlsc',excel_file,excel_file.name)\n        formdata.append(\"sheet_name\", sheet_name);\n        formdata.append(\"division_slug\", division_name);\n        const headers = {\n            \"Content-Type\":\"multipart/form-data\",\n            'ngrok-skip-browser-warning': true,\n        }\n        const axiosInstance = axios.create()\n        const response_obj = await CallAPI(StoredTokens,axiosInstance,\"/manage/upload_students_data/\",\"post\",headers,formdata,null)\n        if(response_obj.error === false)\n        {\n            const response = response_obj.response\n            if(response.data.data.register_count > 0){\n                alert(`${response.data.data.register_count} student added successfully`)\n            }\n            else{\n                alert(`error count : ${response.data.data.error_count}`)\n            }\n        }\n        else{\n            alert(response_obj.errorMessage.message)\n        }\n    }\n\n    const load_term = async()=>{\n        \n        const header = {\n          \"Content-Typle\" :\"application/json\",\n          'ngrok-skip-browser-warning':true\n        }\n        \n        const axiosInstance = axios.create()\n        let endpoint = `/manage/get_terms`;let method='get';let headers = header;\n        let response_obj = await CallAPI(StoredTokens,axiosInstance,endpoint,method,headers)\n        if(response_obj.error === false)\n        {\n          const response = response_obj.response\n          set_term(response.data.data)\n        }\n        else{\n          alert(response_obj.errorMessage.message)\n        }\n      } \n    // handel the useAEffect state \n\n    useEffect(() => {\n        load_term()\n    }, [])\n\n    return (\n        <>\n            <CRow className=\"mb-3\">\n                <CCol>\n                {term && (\n                        <>\n                            <CCard className={`mb-3`}>\n                                <CCardHeader>Term</CCardHeader>\n                                <CCardBody>\n                                    <CFormSelect\n                                        aria-label=\"Default select example\"\n                                        onChange={(e) => {\n                                            load_semester(e.target.value)\n                                            \n                                        }}\n                                    >\n                                        <option value=\"\">Select Term</option>\n                                        {term.map((item, index) => (\n                                            <option key={index} value={item.slug}>\n                                                term: {item.start_year} : {item.end_year}\n                                            </option>\n                                        ))}\n                                    </CFormSelect>\n                                </CCardBody>\n                            </CCard>\n                        </>\n                    )}\n                    {Semesters && (\n                        <>\n                            <CCard className={`mb-3`}>\n                                <CCardHeader>Semester</CCardHeader>\n                                <CCardBody>\n                                    <CFormSelect\n                                        aria-label=\"Default select example\"\n                                        onChange={(e) => {\n                                            load_division(e.target.value)\n                                        }}\n                                    >\n                                        <option value=\"\">Select Semester</option>\n                                        {Semesters.map((item, index) => (\n                                            <option key={index} value={item.slug}>\n                                                Semester - {item.no}\n                                            </option>\n                                        ))}\n                                    </CFormSelect>\n                                </CCardBody>\n                            </CCard>\n                        </>\n                    )}\n                    {division && (\n                        <>\n                            <CCard>\n                                <CCardHeader>Division</CCardHeader>\n                                <CCardBody>\n                                    <CFormSelect\n                                        aria-label=\"Default select example\"\n                                        onChange={(e)=>{set_fileupload(true); set_division_name(e.target.value)}}\n                                    >\n                                        <option value=\"\">Select division</option>\n                                        {division.map((item, index) => (\n                                            <option key={index} value={item.slug}>\n                                                Division - {item.division_name}\n                                            </option>\n                                        ))}\n                                    </CFormSelect>\n                                </CCardBody>\n                            </CCard>\n                        </>\n                    )}\n\n                    {fileupload && (\n                        <>\n                            <CCard className='mt-3'>\n                                <CCardHeader>upload File</CCardHeader>\n                                <CCardBody>\n                                    <CCol xs={12}>\n                                    <CFormLabel htmlFor=\"validationCustom01\">Enter Sheet name</CFormLabel>       \n                                    <CFormInput type=\"text\" id=\"validationCustom01\" required  onChange={(e)=>{set_sheet_name(e.target.value)}}/>\n                                    </CCol>\n                                    <CCol xs={12} className='mt-2'>\n                                    <CFormLabel htmlFor=\"validationCustom01\">upload excel file</CFormLabel>       \n                                    <CFormInput type=\"file\" id=\"validationCustom01\" required onChange={(e)=> set_excel_file(e.target.files[0])}/>\n                                    </CCol>\n                                    <CCol xs={12} className='mt-3'>\n                                        <button className='btn btn-outline-dark form-control' type=\"button\" onClick={()=>{handelFormSubmit()}}>\n                                            Submit form\n                                        </button>\n                                    </CCol>\n                                </CCardBody>\n                            </CCard>\n                        </>\n                    )}\n                </CCol>\n            </CRow>\n        </>\n    )\n}\n\nexport default Addstudent\n"],"names":["Addstudent","Semesters","setSemesters","useState","fileupload","set_fileupload","division","set_division","excel_file","set_excel_file","sheet_name","set_sheet_name","division_name","set_division_name","term","set_term","StoredTokens","CallAPI","useAPI","useEffect","async","axiosInstance","axios","create","headers","response_obj","error","response","data","alert","errorMessage","message","load_term","_jsx","_Fragment","children","CRow","className","_jsxs","CCol","CCard","CCardHeader","CCardBody","CFormSelect","onChange","e","termSlug","header","endpoint","method","term_slug","load_semester","target","value","map","item","index","slug","start_year","end_year","semester_slug","load_division","no","xs","CFormLabel","htmlFor","CFormInput","type","id","required","files","onClick","formdata","FormData","append","name","register_count","concat","error_count","handelFormSubmit"],"sourceRoot":""}