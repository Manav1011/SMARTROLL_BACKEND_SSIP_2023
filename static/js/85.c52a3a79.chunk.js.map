{"version":3,"file":"static/js/85.c52a3a79.chunk.js","mappings":"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","sources":["views/forms/input-group/InputGroup.js"],"sourcesContent":["import React from 'react'\nimport { useState , useContext,useEffect } from 'react'\nimport PropTypes from 'prop-types'\nimport { Store } from '../validation/store'\nimport axios from 'axios'\nimport {base_url} from 'src/base_url'\nimport expireToken from 'src/global_function/unauthorizedToken'\nimport { APIMiddleware } from 'src/global_function/GlobalFunctions'\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CForm,\n  CFormInput,\n  CFormFeedback,\n  CFormLabel,\n  CRow,\n  CTable,\n  CTableBody,\n  CTableHead,\n  CTableHeaderCell,\n  CTableRow,\n  CTableDataCell,\n} from '@coreui/react'\nimport { useNavigate } from 'react-router-dom'\nimport { showAlert } from 'src/global_function/GlobalFunctions'\nimport { batch } from 'react-redux'\nimport useAPI from 'src/global_function/useApi'\nconst CustomStyles = (division_slug,set_batches) => {\n  const [validated, setValidated] = useState(false)\n  const [batch_name, set_batch_name] = useState(\"\");\n  \n  const { state, dispatch: ctxDispatch } = useContext(Store);\n  const { accessToken,refreshToken, objectCount } = state\n  const navigate = useNavigate()\n\n  //custom hook to call the API\n\n  const [StoredTokens,CallAPI] = useAPI()\n\n\n  const add_batch = async (body) => {\n    const header = {\n      \"Content-Type\":\"application/json\",      \n      'ngrok-skip-browser-warning':true\n    }\n    const axiosInstance = axios.create()\n    let endpoint = `/manage/add_batch/`;let method='post';let headers = header;\n    let response_obj = await CallAPI(StoredTokens,axiosInstance,endpoint,method,headers,body,null)\n    if(response_obj.error == false){\n        let response = response_obj.response        \n        let changeSubjectCount = {...objectCount}\n        changeSubjectCount.Batches += 1        \n        ctxDispatch({ type: 'GET_OBJECTS', payload: changeSubjectCount })\n        set_batches(prevArray => [...prevArray, response.data.data])\n        showAlert(\"success\",\"Batch Added successfully...!\")\n      }else{     \n        alert(response_obj.errorMessage.message)     \n      }    \n  }\n  \n  const handleSubmit = (event) => {\n    const form = event.currentTarget\n    if (form.checkValidity() === false) {\n      event.preventDefault()\n      event.stopPropagation()\n    }\n    setValidated(true)\n    const body = {\n      division_slug:division_slug,\n      batch_name:batch_name,\n    }\n    event.preventDefault()\n    add_batch(body)\n    \n  }\n  return (\n    <CForm\n      className=\"row g-3 needs-validation\"\n      noValidate\n      validated={validated}\n      onSubmit={handleSubmit}\n    >\n      <CCol md={12}>\n        <CFormLabel htmlFor=\"validationCustom01\">Batch Name</CFormLabel>\n        <CFormInput type=\"text\" id=\"validationCustom01\" onChange={e => set_batch_name(e.target.value)} required />\n        <CFormFeedback valid>Looks good!</CFormFeedback>\n      </CCol>\n      <CCol xs={12}>\n        <button className='btn btn-outline-dark form-control' type=\"submit\">\n          Submit form\n        </button>\n      </CCol>\n    </CForm>\n  )\n}\n\nconst Select = (props) => {\n\n  const [StoredTokens, CallAPI] = useAPI()\n  const { state, dispatch: ctxDispatch } = useContext(Store);\n  const { accessToken,refreshToken, semesters } = state\n  const navigate = useNavigate()\n  const {division_slug , chageSteps} = props\n  const [batches, set_batches] = useState([]);\n  \n  const load_batches = async () => {\n    const header = {\n      \"Content-Type\":\"application/json\",        \n      'ngrok-skip-browser-warning':true\n    }\n    const axiosInstance = axios.create()\n    let endpoint = `/manage/get_batches`;let method='get';let headers = header;\n    let response_obj = await APIMiddleware(axiosInstance,endpoint,method,headers,null,{ division_slug: division_slug })\n    if(response_obj.error == false){\n      let response = response_obj.response\n      set_batches(response.data.data)\n    }else{      \n      alert(response_obj.errorMessage.message)  \n    }\n  }\n\n  useEffect(() => {\n      load_batches()\n  }, []);\n  return (\n    <>\n      <CRow>\n        <CCol xs={12}>\n          <CCard className=\"mb-3\">\n            <CCardHeader>\n              <strong>Batches</strong>\n            </CCardHeader>\n            <CCardBody>{CustomStyles(division_slug,set_batches)}</CCardBody>\n          </CCard>\n        </CCol>\n      </CRow>\n      <CRow>\n        <CCol xs>\n          <CCard className=\"mb-4\">\n            <CCardHeader>\n              <strong>Batch History</strong>\n            </CCardHeader>\n            <CCardBody>\n              <CTable align=\"middle\" className=\"mb-0 border\" hover responsive>\n                <CTableHead color=\"light\">\n                  <CTableRow className='text-center'>\n                    <CTableHeaderCell>Batch Name</CTableHeaderCell>\n                  </CTableRow>\n                </CTableHead>\n                <CTableBody>\n                  {batches.map((item, index) => (\n                    <CTableRow v-for=\"item in tableItems\" key={index}>\n                      <CTableDataCell>\n                        <div className='text-center'>{item.division.division_name} | {item.batch_name}</div>\n                      </CTableDataCell>\n                    </CTableRow>\n                  ))}\n                </CTableBody>\n              </CTable>\n            </CCardBody>\n          </CCard>\n        </CCol>\n      </CRow>\n    </>\n  )\n}\nSelect.prototype = {\n  chageSteps:PropTypes.func.isRequired,\n  semSlug: PropTypes.string\n}\nexport default Select\n"],"names":["CustomStyles","division_slug","set_batches","validated","setValidated","useState","batch_name","set_batch_name","state","dispatch","ctxDispatch","useContext","Store","accessToken","refreshToken","objectCount","StoredTokens","CallAPI","useNavigate","useAPI","_jsxs","CForm","className","noValidate","onSubmit","event","currentTarget","checkValidity","preventDefault","stopPropagation","body","async","axiosInstance","axios","create","headers","response_obj","error","response","changeSubjectCount","Batches","type","payload","prevArray","data","showAlert","alert","errorMessage","message","add_batch","children","CCol","md","_jsx","CFormLabel","htmlFor","CFormInput","id","onChange","e","target","value","required","CFormFeedback","valid","xs","Select","props","semesters","chageSteps","batches","useEffect","APIMiddleware","load_batches","_Fragment","CRow","CCard","CCardHeader","CCardBody","CTable","align","hover","responsive","CTableHead","color","CTableRow","CTableHeaderCell","CTableBody","map","item","index","CTableDataCell","division","division_name","prototype","PropTypes","isRequired","semSlug"],"sourceRoot":""}