{"version":3,"file":"static/js/338.e2ff9b54.chunk.js","mappings":"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","sources":["views/breadcrum/Breadcrumbnav.js","views/forms/validation/Terms.js","views/dashboard/Dashboard.js","views/forms/form-control/FormControl.js","views/forms/input-group/InputGroup.js","views/forms/validation/Validation.js"],"sourcesContent":["import React from 'react';\nimport { useState,useContext } from 'react'\nimport { Store } from 'src/views/forms/validation/store';\nimport {    \n    CCard,\n    CCardBody,    \n    CCol,    \n    CRow,    \n} from '@coreui/react'\n\nimport \"../../scss/panel.css\"\nconst Breadcrumbnav = (props) => {\n    const { state, dispatch: ctxDispatch } = useContext(Store);\n    const { objectCount , profileDetails } = state  \n    // console.log(objectCount)\n    const {currentStep , chageSteps }= props\n    let breadcrumbs = {\n        term:[\"term\"],\n        semester: [\"term\",\"semester\"],\n        division: [\"term\",\"semester\",\"division\"],\n        batch: [\"term\",\"semester\",\"division\",\"batch\"],\n    }\n    return (\n        <>    \n            <CRow className='mb-2'>\n                <CCol xl>\n                    <CCard>\n                        <CCardBody style={{display:'flex',justifyContent:'space-between',flexDirection:'column'}}>\n                            <nav aria-label=\"breadcrumb\">\n                                <ol className=\"mb-3 breadcrumb d-flex align-items-center text-sm sm:text-lg\" style={{margin:'0'}}>\n                                    <li className=\"breadcrumb-item active\" aria-current=\"page\">\n                                    <svg style={{marginTop:'-3'}} xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" className=\"bi bi-house\" viewBox=\"0 0 16 16\">\n                                        <path d=\"M8.707 1.5a1 1 0 0 0-1.414 0L.646 8.146a.5.5 0 0 0 .708.708L2 8.207V13.5A1.5 1.5 0 0 0 3.5 15h9a1.5 1.5 0 0 0 1.5-1.5V8.207l.646.647a.5.5 0 0 0 .708-.708L13 5.793V2.5a.5.5 0 0 0-.5-.5h-1a.5.5 0 0 0-.5.5v1.293L8.707 1.5ZM13 7.207V13.5a.5.5 0 0 1-.5.5h-9a.5.5 0 0 1-.5-.5V7.207l5-5 5 5Z\"/>\n                                    </svg>\n                                    </li>\n                                    {\n                                        breadcrumbs[currentStep].map((items,keys)=>(\n                                            \n                                             <li className=\"breadcrumb-item active\" aria-current=\"page\" key={keys}><a onClick={() => {chageSteps(items)}} className={items === currentStep?\"disabled\":\"\"}>{items}</a></li>\n                                        ))\n                                    }\n                                </ol>                                                      \n                            </nav>\n\n                            <span className='text-sm sm:text-lg'>Branch - {profileDetails.obj.branch.branch_name}</span>\n\n                            \n                        </CCardBody>\n                    </CCard>\n                </CCol>\n            </CRow>\n        </>\n    );\n}\n\nexport default Breadcrumbnav;\n","import React, { useState  ,Component } from 'react'\nimport { useEffect } from 'react'\nimport PropTypes from 'prop-types'\nimport axios from 'axios'\nimport { useContext } from 'react'\nimport { Navigate, useNavigate } from 'react-router-dom'\nimport { APIMiddleware } from 'src/global_function/GlobalFunctions'\nimport useAPI from 'src/global_function/useApi'\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CForm,\n  CFormInput,\n  CFormFeedback,\n  CFormLabel,\n  CRow,\n  CTable,\n  CTableBody,\n  CTableDataCell,\n  CTableHead,\n  CTableHeaderCell,\n  CTableRow,\n} from '@coreui/react'\nimport { Store } from '../validation/store'\nimport {base_url} from 'src/base_url'\nimport expireToken from 'src/global_function/unauthorizedToken'\nimport { showAlert } from 'src/global_function/GlobalFunctions'\n\nconst CustomStyles = (set_term,setBatchCout) => {\n  \n    const { state, dispatch: ctxDispatch } = useContext(Store);\n    const { accessToken, refreshToken, batches, currentBatch, objectCount} = state\n    const [validated, setValidated] = useState(false)\n    const currentYear = new Date().getFullYear() \n    const [semester_no, set_semester_no] = useState(\"\")\n    const [Start, setStart] = useState(currentYear);\n    const EndYear = (parseInt(Start, 10) + 1).toString();\n    const navigate = useNavigate()\n    \n  \n    // custom hook for api calling \n  \n    const [StoredTokens,CallAPI] = useAPI()\n  \n  \n    \n    const addBatches = async(body) => {\n      const header = {\n        \"Content-Type\":\"application/json\",      \n        'ngrok-skip-browser-warning':true\n      }\n      const axiosInstance = axios.create()\n      let endpoint = `/manage/add_term/`;let method='post';let headers = header;\n      let response_obj = await CallAPI(StoredTokens,axiosInstance,endpoint,method,headers,body,null)\n      if(response_obj.error == false){\n          let response = response_obj.response\n          let batchCount = {...objectCount}\n          batchCount.terms += 1          \n          ctxDispatch({ type: 'GET_OBJECTS', payload: batchCount });\n          set_term(prevArray => [...prevArray, response.data.data]);\n          setBatchCout(preValue => preValue + 1);\n          showAlert(\"success\",\"Bactch Added successfully...!\")\n        }else{  \n          alert(response_obj.errorMessage.message)\n        }\n    }\n  \n    const handleSubmit = (event) => {\n      const form = event.currentTarget\n      event.preventDefault()\n      if (form.checkValidity() === false) {\n        event.preventDefault()\n        event.stopPropagation()\n      }\n      setValidated(true)\n      const body = {\n        \"start_year\": Start,\n        \"end_year\":EndYear\n      }\n      addBatches(body)\n      \n      \n    }\n    return (\n      <>\n      <CForm\n        className=\"row g-3 needs-validation\"\n        noValidate\n        validated={validated}\n        onSubmit={handleSubmit}\n      >\n        <CCol md={6}>\n          <CFormLabel htmlFor=\"validationCustom01\">Start Year</CFormLabel>\n          <CFormInput type=\"number\" min={currentYear} max=\"2099\" step=\"1\" value={Start}  id=\"validationCustom01\" onChange={e => setStart(e.target.value)} required maxLength={4} />\n          <CFormFeedback valid>Looks good!</CFormFeedback>\n        </CCol>\n        <CCol md={6}>\n          <CFormLabel htmlFor=\"validationCustom02\">End Year</CFormLabel>\n          <CFormInput type=\"number\" value={EndYear}  readOnly step=\"1\" id=\"validationCustom02\"   required maxLength={4}/>\n          <CFormFeedback valid>Looks good!</CFormFeedback>\n        </CCol>\n        <CCol xs={12}>\n          <button className='btn btn-outline-dark form-control' type=\"submit\" >\n            Submit form\n          </button>\n        </CCol>\n      </CForm>\n      </>\n    )\n  }\n\n\n\n\n\n\n\nconst Terms = (props) => {\n\n    const {chageSteps} = props\n  const {set_term_slug} = props\n  const {setBatchCout} = props\n  const { state, dispatch: ctxDispatch } = useContext(Store);\n  const { accessToken, refreshToken, batches, currentBatch} = state\n  const navigate = useNavigate()\n  const [semester, set_semester] = useState([]);\n  const [StoredTokens,CallAPI] = useAPI()\n\n\n    const [term,set_term] = useState([])\n\n  // function for the load batches\n  \nconst load_term = async() => {\n    const header = {\n      \"Content-Type\":\"application/json\",        \n      'ngrok-skip-browser-warning':true\n    }\n    const axiosInstance = axios.create()\n    let endpoint = `/manage/get_terms`;let method='get';let headers = header;\n    let response_obj = await CallAPI(StoredTokens,axiosInstance,endpoint,method,headers)    \n    if(response_obj.error == false){\n      let response = response_obj.response\n      \n      set_term(response.data.data)\n    }else{  \n      alert(response_obj.errorMessage.message)\n    }    \n  }\n\n  useEffect(() => {\n    load_term()\n\n  }, []);\n\n\n  return (\n    <>\n          <CRow>\n        <CCol xs={12}>\n          <CCard className=\"mb-3\">\n            <CCardHeader>\n              <strong>Semesters</strong>\n            </CCardHeader>\n            <CCardBody>{CustomStyles(set_term,setBatchCout)}</CCardBody>\n          </CCard>\n        </CCol>\n      </CRow>\n      <CRow>\n        <CCol xs>\n          <CCard className=\"mb-4\">\n            <CCardHeader>\n              <strong>Term History</strong>\n            </CCardHeader>\n            <CCardBody>\n                {term.length > 0 ? (<CTable align=\"middle\" className=\"mb-0 border text-center\" hover responsive>\n                <CTableHead color=\"light\">\n                  <CTableRow>\n                    \n                    <CTableHeaderCell>Start Year</CTableHeaderCell>\n                    <CTableHeaderCell>End Year</CTableHeaderCell>\n                  </CTableRow>\n                </CTableHead>\n                <CTableBody>\n                  {term.map((item, index) => (\n                    <CTableRow v-for=\"item in tableItems\" key={index} onClick={() => {chageSteps('semester'); set_term_slug(item.slug);}}>\n                      <CTableDataCell>\n                        <div>{item.start_year}</div>   \n                      </CTableDataCell>\n                      <CTableDataCell>\n                        <div>{item.end_year}</div>   \n                      </CTableDataCell>\n                      \n                    </CTableRow>\n                  ))}\n                </CTableBody>\n              </CTable>) : (<p>no terms</p>)}\n              \n            </CCardBody>\n          </CCard>\n        </CCol>\n      </CRow>\n    </>\n  )\n}\n\nTerms.propTypes = {\n    chageSteps: PropTypes.func.isRequired,\n    set_semester_slug: PropTypes.func.isRequired,\n    setBatchCout:PropTypes.func.isRequired\n  }\n\nexport default Terms","import React , {Component} from 'react'\nimport { useState } from 'react'\nimport {\n  CButton,\n  CCard,\n  CCardFooter,\n  CCol,\n  CRow,\n} from '@coreui/react'\n\nimport axios from 'axios'\n\nimport FormControl from '../forms/form-control/FormControl'\nimport Select from '../forms/input-group/InputGroup'\nimport Validation from '../forms/validation/Validation'\nimport { useContext , useEffect } from 'react'\nimport { Store } from 'src/views/forms/validation/store';\nimport {base_url} from 'src/base_url'\nimport { APIMiddleware } from 'src/global_function/GlobalFunctions'\nimport Breadcrumbnav from '../breadcrum/Breadcrumbnav';\nimport useAPI from 'src/global_function/useApi'\nimport Terms from '../forms/validation/Terms'\nconst Dashboard = () => {\n  const [steps, setsteps] = useState('term')\n  const [semester_slug, set_semester_slug] = useState(\"\");\n  const [semSlug, setsemSlug] = useState(\"\");\n  const [subSlug, setsubSlug] = useState(\"\");\n  const [batchCount, setbatchCount] = useState(0);\n  const [semCount, setsemCount] = useState(0);\n  const [subCount, setsubCount] = useState(0);  \n  const { state, dispatch: ctxDispatch } = useContext(Store);\n  const { accessToken , refreshToken , profileDetails, objectCount } = state  \n  const [division_slug, set_division_slug] = useState(\"\")\n  const [StoredTokens,CallAPI] = useAPI()\n  const [term_slug,set_term_slug] = useState(\"\")\n\n  useEffect(() => {               \n    if(profileDetails.obj.profile.role === \"admin\"){\n      getObjectCounts()\n    }\n  }, []);\n\n  const getObjectCounts = async () =>{\n    const header = {\n      \"Content-Type\":\"application/json\",        \n      'ngrok-skip-browser-warning':true\n    }\n    const axiosInstance = axios.create()\n    let endpoint = `/manage/get_object_counts`;let method='get';let headers = header;\n    let response_obj = await CallAPI(StoredTokens,axiosInstance,endpoint,method,headers)\n    if(response_obj.error == false){\n      let response = response_obj.response\n      ctxDispatch({ type: 'GET_OBJECTS', payload: response.data });\n    }else{  \n      alert(response_obj.errorMessage.message)\n    }\n  }\n  \n  const chageSteps = (currentStep) =>{\n      setsteps(currentStep)\n  }\n  const progressExample = [\n    { title: 'Terms', value: objectCount.terms, nextStep:'semester' },\n    { title: 'Semester', value: objectCount.semesters, nextStep:'semester' },\n    { title: 'divison', value: objectCount.divisons, nextStep:'subject' },\n    { title: 'Batches', value: objectCount.batches, nextStep:'batch'},\n  ]\n\n  return (\n    <>\n      <Breadcrumbnav currentStep={steps} chageSteps={chageSteps}></Breadcrumbnav>\n      \n      <CCard className=\"mb-4\">\n        <CCardFooter>\n          <CRow xs={{ cols: 1 }} md={{ cols: 4 }} className=\"text-center\">\n            {progressExample.map((item, index) => (\n              <CCol className=\"mb-sm-2 mb-0\" key={index}>\n                <CButton style={{ backgroundColor: 'transparent', border: 'none' }}>\n                  <div className=\"text-medium-emphasis\">{item.title}</div>\n                  <strong style={{ color: 'black' }}>\n                    {item.value} {item.percent}\n                  </strong>\n                </CButton>\n              </CCol>\n            ))}\n          </CRow>\n        </CCardFooter>\n      </CCard>      \n      {(() => {\n        \n        switch (steps) {\n\n          case 'term':\n            return <Terms chageSteps={chageSteps} set_term_slug={set_term_slug} setBatchCout={setbatchCount}></Terms>\n\n          case 'semester':\n            return <Validation chageSteps={chageSteps} term_slug={term_slug}  set_semester_slug={set_semester_slug} setBatchCout={setbatchCount}></Validation>\n            \n          case 'division':\n            return <FormControl chageSteps={chageSteps}  semester_slug={semester_slug} set_division_slug={set_division_slug}></FormControl>\n          case 'batch':\n            return <Select chageSteps={chageSteps} division_slug={division_slug} setsubSlug={setsubSlug}></Select>\n          default:\n            {/* console.log(steps) */}\n        }\n      })()}\n    </>\n  )\n}\n\nexport default Dashboard","import React from 'react'\nimport { useState, useEffect } from 'react'\nimport { useContext } from 'react'\nimport PropTypes from 'prop-types'\nimport axios from 'axios'\nimport { Store } from '../validation/store'\nimport {base_url} from 'src/base_url'\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CForm,\n  CFormInput,\n  CFormFeedback,\n  CFormLabel,\n  CRow,\n  CTable,\n  CTableBody,\n  CTableHead,\n  CTableHeaderCell,\n  CTableRow,\n  CFormSelect,\n  CTableDataCell\n} from '@coreui/react'\nimport expireToken from 'src/global_function/unauthorizedToken'\nimport { APIMiddleware } from 'src/global_function/GlobalFunctions'\nimport { useNavigate } from 'react-router-dom'\nimport { showAlert } from 'src/global_function/GlobalFunctions'\nimport useAPI from 'src/global_function/useApi'\n\nconst CustomStyles = (set_divisions, semester_slug) => {\n  const [StoredTokens,CallAPI] = useAPI()\n  const [validated, setValidated] = useState(false)\n  const [division_name, set_division_name] = useState(\"\")\n  const { state, dispatch: ctxDispatch } = useContext(Store);\n  const { accessToken,refreshToken, semesters , objectCount } = state\n  const [semCount, setsemCount] = useState(objectCount);\n  const navigate = useNavigate()\n\n\n\n\n  const add_division = async (body) => {\n    const header = {\n      \"Content-Type\":\"application/json\",      \n      'ngrok-skip-browser-warning':true\n    }\n    const axiosInstance = axios.create()\n    let endpoint = `/manage/add_division/`;let method='post';let headers = header;\n    let response_obj = await CallAPI(StoredTokens,axiosInstance,endpoint,method,headers,body,null)\n    if(response_obj.error == false){\n      let response = response_obj.response\n      let changeCount = {...objectCount}\n      changeCount.divison += 1  \n        set_divisions(prevArray => [...prevArray, response.data.data])\n      showAlert(\"success\",\"Semester Added successfully...!\")\n    }else{        \n      alert(response_obj.errorMessage.message)\n    }    \n  }\n\n  const handleSubmit = (event) => {\n    const form = event.currentTarget\n    if (form.checkValidity() === false) {\n      event.preventDefault()\n      event.stopPropagation()\n    }\n    event.preventDefault()\n    setValidated(true)\n    const body = {\n      division_name: division_name,\n      semester_slug: semester_slug,\n    }\n    add_division(body);\n    \n  }\n  return (\n    <CForm\n      className=\"row g-3 needs-validation\"\n      noValidate\n      validated={validated}\n      onSubmit={handleSubmit}\n    >\n      <CCol md={12}>\n        <CFormLabel htmlFor=\"validationCustom01\">Division Name</CFormLabel>\n        <CFormInput type=\"text\" id=\"validationCustom01\" onChange={e => set_division_name(e.target.value)} required />\n        <CFormFeedback valid>Looks good!</CFormFeedback>\n      </CCol>      \n      <CCol xs={12}>\n        <button className='btn btn-outline-dark form-control' type=\"submit\">\n          Submit form\n        </button>\n      </CCol>\n    </CForm>\n  )\n}\n\nconst FormControl = (props) => {\n  const { semester_slug ,chageSteps , set_division_slug } = props\n  const [divisions, set_divisions] = useState([]);\n  const { state, dispatch: ctxDispatch } = useContext(Store);\n  const { accessToken,refreshToken, semesters } = state\n  const navigate = useNavigate()\n  const load_division = async () => {    \n    const header = {\n      \"Content-Type\":\"application/json\",        \n      'ngrok-skip-browser-warning':true\n    }\n    const axiosInstance = axios.create()\n    let endpoint = `/manage/get_divisions`;let method='get';let headers = header;\n    let response_obj = await APIMiddleware(axiosInstance,endpoint,method,headers,null,{semester_slug: semester_slug })\n    if(response_obj.error == false){\n      let response = response_obj.response      \n        set_divisions(response.data.data)        \n    }else{        \n      alert(response_obj.errorMessage.message)\n    }\n  }\n\n  useEffect(() => {\n    load_division()\n  }, []);\n\n\n  return (\n    <>\n      <CRow>\n        <CCol xs={12}>\n          <CCard className=\"mb-3\">\n            <CCardHeader>\n              <strong>Divison</strong>\n            </CCardHeader>\n            <CCardBody>{CustomStyles(set_divisions, semester_slug)}</CCardBody>\n          </CCard>\n        </CCol>\n      </CRow>\n      <CRow>\n        <CCol xs>\n          <CCard className=\"mb-4\">\n            <CCardHeader>\n              <strong>Division History</strong>\n            </CCardHeader>\n            <CCardBody>\n              <CTable align=\"middle\" className=\"mb-0 border\" hover responsive>\n                <CTableHead color=\"light\">\n                  <CTableRow onClick={() => {chageSteps('batch');}} style={{textAlign:\"center\"}}>\n                    <CTableHeaderCell>Division Name</CTableHeaderCell>\n                  </CTableRow>\n                </CTableHead>\n                <CTableBody style={{textAlign:\"center\"}}>\n                  {divisions.map((item, index) => (\n                  \n                      <CTableRow key={index} onClick={() => {chageSteps('batch'); set_division_slug(item.slug);}}>\n                        <CTableDataCell>\n                          <div>{item.division_name}</div>\n                        </CTableDataCell>\n                         \n                        \n                      </CTableRow>\n                    \n                  ))}\n                </CTableBody>\n\n              </CTable>\n            </CCardBody>\n          </CCard>\n        </CCol>\n      </CRow>\n    </>\n  )\n}\n\nFormControl.propTypes = {\n  chageSteps:PropTypes.func.isRequired,\n  setsemSlug:PropTypes.func.isRequired,\n  batchSlug: PropTypes.string\n}\nexport default FormControl\n","import React from 'react'\nimport { useState , useContext,useEffect } from 'react'\nimport PropTypes from 'prop-types'\nimport { Store } from '../validation/store'\nimport axios from 'axios'\nimport {base_url} from 'src/base_url'\nimport expireToken from 'src/global_function/unauthorizedToken'\nimport { APIMiddleware } from 'src/global_function/GlobalFunctions'\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CForm,\n  CFormInput,\n  CFormFeedback,\n  CFormLabel,\n  CRow,\n  CTable,\n  CTableBody,\n  CTableHead,\n  CTableHeaderCell,\n  CTableRow,\n  CTableDataCell,\n} from '@coreui/react'\nimport { useNavigate } from 'react-router-dom'\nimport { showAlert } from 'src/global_function/GlobalFunctions'\nimport { batch } from 'react-redux'\nimport useAPI from 'src/global_function/useApi'\nconst CustomStyles = (division_slug,set_batches) => {\n  const [validated, setValidated] = useState(false)\n  const [batch_name, set_batch_name] = useState(\"\");\n  \n  const { state, dispatch: ctxDispatch } = useContext(Store);\n  const { accessToken,refreshToken, objectCount } = state\n  const navigate = useNavigate()\n\n  //custom hook to call the API\n\n  const [StoredTokens,CallAPI] = useAPI()\n\n\n  const add_batch = async (body) => {\n    const header = {\n      \"Content-Type\":\"application/json\",      \n      'ngrok-skip-browser-warning':true\n    }\n    const axiosInstance = axios.create()\n    let endpoint = `/manage/add_batch/`;let method='post';let headers = header;\n    let response_obj = await CallAPI(StoredTokens,axiosInstance,endpoint,method,headers,body,null)\n    if(response_obj.error == false){\n        let response = response_obj.response        \n        let changeSubjectCount = {...objectCount}\n        changeSubjectCount.Batches += 1        \n        ctxDispatch({ type: 'GET_OBJECTS', payload: changeSubjectCount })\n        set_batches(prevArray => [...prevArray, response.data.data])\n        showAlert(\"success\",\"Batch Added successfully...!\")\n      }else{     \n        alert(response_obj.errorMessage.message)     \n      }    \n  }\n  \n  const handleSubmit = (event) => {\n    const form = event.currentTarget\n    if (form.checkValidity() === false) {\n      event.preventDefault()\n      event.stopPropagation()\n    }\n    setValidated(true)\n    const body = {\n      division_slug:division_slug,\n      batch_name:batch_name,\n    }\n    event.preventDefault()\n    add_batch(body)\n    \n  }\n  return (\n    <CForm\n      className=\"row g-3 needs-validation\"\n      noValidate\n      validated={validated}\n      onSubmit={handleSubmit}\n    >\n      <CCol md={12}>\n        <CFormLabel htmlFor=\"validationCustom01\">Batch Name</CFormLabel>\n        <CFormInput type=\"text\" id=\"validationCustom01\" onChange={e => set_batch_name(e.target.value)} required />\n        <CFormFeedback valid>Looks good!</CFormFeedback>\n      </CCol>\n      <CCol xs={12}>\n        <button className='btn btn-outline-dark form-control' type=\"submit\">\n          Submit form\n        </button>\n      </CCol>\n    </CForm>\n  )\n}\n\nconst Select = (props) => {\n\n  const [StoredTokens, CallAPI] = useAPI()\n  const { state, dispatch: ctxDispatch } = useContext(Store);\n  const { accessToken,refreshToken, semesters } = state\n  const navigate = useNavigate()\n  const {division_slug , chageSteps} = props\n  const [batches, set_batches] = useState([]);\n  \n  const load_batches = async () => {\n    const header = {\n      \"Content-Type\":\"application/json\",        \n      'ngrok-skip-browser-warning':true\n    }\n    const axiosInstance = axios.create()\n    let endpoint = `/manage/get_batches`;let method='get';let headers = header;\n    let response_obj = await APIMiddleware(axiosInstance,endpoint,method,headers,null,{ division_slug: division_slug })\n    if(response_obj.error == false){\n      let response = response_obj.response\n      set_batches(response.data.data)\n    }else{      \n      alert(response_obj.errorMessage.message)  \n    }\n  }\n\n  useEffect(() => {\n      load_batches()\n  }, []);\n  return (\n    <>\n      <CRow>\n        <CCol xs={12}>\n          <CCard className=\"mb-3\">\n            <CCardHeader>\n              <strong>Batches</strong>\n            </CCardHeader>\n            <CCardBody>{CustomStyles(division_slug,set_batches)}</CCardBody>\n          </CCard>\n        </CCol>\n      </CRow>\n      <CRow>\n        <CCol xs>\n          <CCard className=\"mb-4\">\n            <CCardHeader>\n              <strong>Batch History</strong>\n            </CCardHeader>\n            <CCardBody>\n              <CTable align=\"middle\" className=\"mb-0 border\" hover responsive>\n                <CTableHead color=\"light\">\n                  <CTableRow className='text-center'>\n                    <CTableHeaderCell>Batch Name</CTableHeaderCell>\n                  </CTableRow>\n                </CTableHead>\n                <CTableBody>\n                  {batches.map((item, index) => (\n                    <CTableRow v-for=\"item in tableItems\" key={index}>\n                      <CTableDataCell>\n                        <div className='text-center'>{item.division.division_name} | {item.batch_name}</div>\n                      </CTableDataCell>\n                    </CTableRow>\n                  ))}\n                </CTableBody>\n              </CTable>\n            </CCardBody>\n          </CCard>\n        </CCol>\n      </CRow>\n    </>\n  )\n}\nSelect.prototype = {\n  chageSteps:PropTypes.func.isRequired,\n  semSlug: PropTypes.string\n}\nexport default Select\n","import React, { useState  ,Component } from 'react'\nimport { useEffect } from 'react'\nimport PropTypes from 'prop-types'\nimport axios from 'axios'\nimport { useContext } from 'react'\nimport { Navigate, useNavigate } from 'react-router-dom'\nimport { APIMiddleware } from 'src/global_function/GlobalFunctions'\nimport useAPI from 'src/global_function/useApi'\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CForm,\n  CFormInput,\n  CFormFeedback,\n  CFormLabel,\n  CRow,\n  CTable,\n  CTableBody,\n  CTableDataCell,\n  CTableHead,\n  CTableHeaderCell,\n  CTableRow,\n} from '@coreui/react'\nimport { Store } from '../validation/store'\nimport {base_url} from 'src/base_url'\nimport expireToken from 'src/global_function/unauthorizedToken'\nimport { showAlert } from 'src/global_function/GlobalFunctions'\n\nconst CustomStyles = (set_semester,setBatchCout,term_slug) => {\n  \n  const { state, dispatch: ctxDispatch } = useContext(Store);\n  const { accessToken, refreshToken, batches, currentBatch, objectCount} = state\n  const [validated, setValidated] = useState(false)\n  const currentYear = new Date().getFullYear() \n  const [semester_no, set_semester_no] = useState(\"\")\n  const [Start, setStart] = useState(currentYear);\n  const EndYear = (parseInt(Start, 10) + 1).toString();\n  const navigate = useNavigate()\n  \n\n  // custom hook for api calling \n\n  const [StoredTokens,CallAPI] = useAPI()\n\n\n  \n  const addBatches = async(body) => {\n    const header = {\n      \"Content-Type\":\"application/json\",      \n      'ngrok-skip-browser-warning':true\n    }\n    const axiosInstance = axios.create()\n    let endpoint = `/manage/add_semester/`;let method='post';let headers = header;\n    let response_obj = await CallAPI(StoredTokens,axiosInstance,endpoint,method,headers,body,null)\n    if(response_obj.error == false){\n        let response = response_obj.response\n        let batchCount = {...objectCount}\n        batchCount.semesters += 1        \n        ctxDispatch({ type: 'GET_OBJECTS', payload: batchCount });\n        set_semester(prevArray => [...prevArray, response.data.data]);\n        setBatchCout(preValue => preValue + 1);\n      }else{       \n        alert(response_obj.errorMessage.message)   \n      }\n  }\n\n  const handleSubmit = (event) => {\n    const form = event.currentTarget\n    event.preventDefault()\n    if (form.checkValidity() === false) {\n      event.preventDefault()\n      event.stopPropagation()\n    }\n    setValidated(true)\n    const body = {\n      \"term_slug\":term_slug,\n      \"no\": semester_no,\n      \n    }\n    addBatches(body)\n    showAlert(\"success\",\"Bactch Added successfully...!\")\n    \n  }\n  return (\n    <>\n    <CForm\n      className=\"row g-3 needs-validation\"\n      noValidate\n      validated={validated}\n      onSubmit={handleSubmit}\n    >\n      <CCol md={12}>\n        <CFormLabel htmlFor=\"validationCustom01\">Semester Number</CFormLabel>\n        <CFormInput type=\"number\" min={1} max={8} step=\"1\"   id=\"validationCustom01\" onChange={e => set_semester_no(e.target.value)} required maxLength={1} />\n        <CFormFeedback valid>Looks good!</CFormFeedback>\n      </CCol>\n      <CCol xs={12}>\n        <button className='btn btn-outline-dark form-control' type=\"submit\" >\n          Submit form\n        </button>\n      </CCol>\n    </CForm>\n    </>\n  )\n}\n\nconst Validation = (props) => {\n  const {chageSteps} = props\n  const {set_semester_slug} = props\n  const {setBatchCout} = props\n  const {term_slug} = props\n  const { state, dispatch: ctxDispatch } = useContext(Store);\n  const { accessToken, refreshToken, batches, currentBatch} = state\n  const navigate = useNavigate()\n  const [semester, set_semester] = useState([]);\n  const [StoredTokens,CallAPI] = useAPI()\n  // function for the load batches\n  \nconst loadBatches = async() => {\n    const header = {\n      \"Content-Type\":\"application/json\",        \n      'ngrok-skip-browser-warning':true\n    }\n    const axiosInstance = axios.create()\n    let endpoint = `/manage/get_semesters`;let method='get';let headers = header;\n    let response_obj = await CallAPI(StoredTokens,axiosInstance,endpoint,method,headers,null,{\"term_slug\":term_slug})    \n    if(response_obj.error == false){\n      let response = response_obj.response\n      \n      set_semester(response.data.data)\n    }else{        \n      alert(response_obj.errorMessage.message)\n    }    \n  }\n\n  useEffect(() => {\n    if(accessToken){\n      loadBatches()\n    }\n  }, []);\n\n  // useEffect(() => {\n  //   setBatches(batches)\n    \n  // }, [batches]);\n  \n  \n  return (\n    <>\n      <CRow>\n        <CCol xs={12}>\n          <CCard className=\"mb-3\">\n            <CCardHeader>\n              <strong>Semesters</strong>\n            </CCardHeader>\n            <CCardBody>{CustomStyles(set_semester,setBatchCout,term_slug)}</CCardBody>\n          </CCard>\n        </CCol>\n      </CRow>\n      <CRow>\n        <CCol xs>\n          <CCard className=\"mb-4\">\n            <CCardHeader>\n              <strong>Semester History</strong>\n            </CCardHeader>\n            <CCardBody>\n              <CTable align=\"middle\" className=\"mb-0 border text-center\" hover responsive>\n                <CTableHead color=\"light\">\n                  <CTableRow>\n                    <CTableHeaderCell>Semester No</CTableHeaderCell>\n                    <CTableHeaderCell>Activation Status</CTableHeaderCell>\n                  </CTableRow>\n                </CTableHead>\n                <CTableBody>\n                  {semester.map((item, index) => (\n                    <CTableRow v-for=\"item in tableItems\" key={index} onClick={() => {chageSteps('division'); set_semester_slug(item.slug);}}>\n                      <CTableDataCell>\n                        <div>{item.no}</div>   \n                      </CTableDataCell>\n                      \n                      <CTableDataCell>\n                        <div className='d-flex justify-content-center'>\n                          {item.status ? (<div><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" className=\"bi bi-check-circle-fill\" viewBox=\"0 0 16 16\">\n                            <path d=\"M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zm-3.97-3.03a.75.75 0 0 0-1.08.022L7.477 9.417 5.384 7.323a.75.75 0 0 0-1.06 1.06L6.97 11.03a.75.75 0 0 0 1.079-.02l3.992-4.99a.75.75 0 0 0-.01-1.05z\" />\n                          </svg>{}\n                          </div>):<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" className=\"bi bi-x-circle-fill\" viewBox=\"0 0 16 16\">\n                      <path d=\"M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zM5.354 4.646a.5.5 0 1 0-.708.708L7.293 8l-2.647 2.646a.5.5 0 0 0 .708.708L8 8.707l2.646 2.647a.5.5 0 0 0 .708-.708L8.707 8l2.647-2.646a.5.5 0 0 0-.708-.708L8 7.293 5.354 4.646z\"/>\n                          </svg>}\n                        </div>   \n                      </CTableDataCell> \n                    </CTableRow>\n                  ))}\n                </CTableBody>\n              </CTable>\n            </CCardBody>\n          </CCard>\n        </CCol>\n      </CRow>\n      \n    </>\n  )\n}\n\nValidation.propTypes = {\n  chageSteps: PropTypes.func.isRequired,\n  set_semester_slug: PropTypes.func.isRequired,\n  setBatchCout:PropTypes.func.isRequired\n}\n\nexport default Validation\n"],"names":["props","state","dispatch","ctxDispatch","useContext","Store","objectCount","profileDetails","currentStep","chageSteps","_jsx","_Fragment","children","CRow","className","CCol","xl","CCard","_jsxs","CCardBody","style","display","justifyContent","flexDirection","margin","marginTop","xmlns","width","height","fill","viewBox","d","term","semester","division","batch","map","items","keys","onClick","obj","branch","branch_name","CustomStyles","set_term","setBatchCout","accessToken","refreshToken","batches","currentBatch","validated","setValidated","useState","currentYear","Date","getFullYear","semester_no","set_semester_no","Start","setStart","EndYear","parseInt","toString","StoredTokens","CallAPI","useNavigate","useAPI","CForm","noValidate","onSubmit","event","form","currentTarget","preventDefault","checkValidity","stopPropagation","async","axiosInstance","axios","create","headers","response_obj","body","error","response","batchCount","terms","type","payload","prevArray","data","preValue","showAlert","alert","errorMessage","message","addBatches","md","CFormLabel","htmlFor","CFormInput","min","max","step","value","id","onChange","e","target","required","maxLength","CFormFeedback","valid","readOnly","xs","set_term_slug","set_semester","useEffect","load_term","CCardHeader","length","CTable","align","hover","responsive","CTableHead","color","CTableRow","CTableHeaderCell","CTableBody","item","index","slug","CTableDataCell","start_year","end_year","Dashboard","steps","setsteps","semester_slug","set_semester_slug","semSlug","setsemSlug","subSlug","setsubSlug","setbatchCount","semCount","setsemCount","subCount","setsubCount","division_slug","set_division_slug","term_slug","profile","role","getObjectCounts","progressExample","title","nextStep","semesters","divisons","Breadcrumbnav","CCardFooter","cols","CButton","backgroundColor","border","percent","Terms","Validation","FormControl","Select","set_divisions","division_name","set_division_name","divison","add_division","divisions","APIMiddleware","load_division","textAlign","set_batches","batch_name","set_batch_name","changeSubjectCount","Batches","add_batch","load_batches","prototype","PropTypes","isRequired","loadBatches","no","status"],"sourceRoot":""}