{"version":3,"file":"static/js/841.80dbfab2.chunk.js","mappings":"mRAkBe,SAASA,IAGtB,MAAMC,GAAaC,EAAAA,EAAAA,OACZC,EAAcC,IAAWC,EAAAA,EAAAA,MACzBC,EAAYC,IAAiBC,EAAAA,EAAAA,UAAS,OACtCC,EAAaC,IAAqBF,EAAAA,EAAAA,UAAS,MA8D5CG,EAAiBC,UACrBX,EAAW,yBAADY,OAA0BC,GAAe,EAQrD,OALAC,EAAAA,EAAAA,YAAU,KAjEqBH,WAC7B,MAIMI,EAAgBC,EAAAA,EAAMC,SACtBC,QAAqBf,EACzBD,EACAa,EACA,oCACA,MATc,CACd,eAAgB,mBAChB,8BAA8B,GAS9B,KACA,MAEF,IAA2B,IAAvBG,EAAaC,MAAiB,CAChC,MACMC,EADWF,EAAaG,SACRD,KAAKA,KAAKE,KAAI,CAACC,EAAOC,KACxC,MAAMC,EAAc,CAClBC,YAAaH,EAAOG,YACpBC,YAAaJ,EAAOK,MAEhBpB,EAAe,GAgBvB,OAfGe,EAAOM,UAAUP,KAAI,CAACQ,EAAUN,KAC/BM,EAASC,UAAUT,KAAI,CAACU,EAAUC,KAC1BD,EAASE,UAAUC,SAASC,SAASC,OAAS,GAC9CL,EAASE,UAAUC,SAASC,SAASd,KAAI,CAACgB,EAASd,KAEjDhB,EAAa+B,KAAK,IAAID,EAASE,cAAeR,EAASQ,cAAcV,SAASA,EAASW,GAAGN,SAAUH,EAASE,UAAUC,SAASO,KAAK,GAK3I,GACF,IAIE,IAAIjB,EAAYW,SAAS5B,EAAa,IAKhDF,EAAcc,EAChB,MAEEuB,MAAMzB,EAAa0B,aAAaC,QAClC,EAoBEC,EAAwB,GACzB,KAGDC,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,UACMF,EAAAA,EAAAA,KAACG,EAAAA,GAAI,CAACC,UAAU,OAAMF,UACxBF,EAAAA,EAAAA,KAACK,EAAAA,GAAI,CAAAH,SAED5C,GAAcA,EAAWiB,KAAI,CAACC,EAAQC,KAElC6B,EAAAA,EAAAA,MAAA,OAAAJ,SAAA,EACIF,EAAAA,EAAAA,KAACO,EAAAA,GAAM,CACLH,UAAU,iFACVI,MAAM,UACNC,SAAS,EAAKP,SAGb1B,EAAOG,cAGNH,EAAOa,SAASC,OAAS,EACvBd,EAAOa,SAASd,KAAI,CAACgB,EAAQd,KAEzBuB,EAAAA,EAAAA,KAAA,OAAiBI,UAAU,sCAAqCF,UAChEF,EAAAA,EAAAA,KAACG,EAAAA,GAAI,CAACC,UAAU,oBAAoBM,MAAO,CAAEC,QAAS,KAAMT,UAC1DF,EAAAA,EAAAA,KAACK,EAAAA,GAAI,CAACD,UAAU,8CAA6CF,UAC3DF,EAAAA,EAAAA,KAAA,OAAKI,UAAU,2BAA0BF,UACvCF,EAAAA,EAAAA,KAAA,OAAKI,UAAU,GAAGM,MAAO,CAAEE,cAAe,OAAQV,UAChDF,EAAAA,EAAAA,KAAA,OAAKI,UAAU,+BAA8BF,UAC3CI,EAAAA,EAAAA,MAACO,EAAAA,GAAM,CAELC,UAAU,EACVL,SAAS,EACTL,UAAS,mBAAAvC,OAAqB0B,EAAQwB,SAAW,iBAAmB,IAAKb,SAAA,EAEzEI,EAAAA,EAAAA,MAACU,EAAAA,GAAY,CAACZ,UAAU,0EAAyEF,SAAA,EAE7FI,EAAAA,EAAAA,MAAA,OAAKF,UAAS,4BAA8BF,SAAA,EAC1CF,EAAAA,EAAAA,KAAA,OAAAE,UACEI,EAAAA,EAAAA,MAAA,SAAOF,UAAU,YAAWF,SAAA,CAAC,aAEhBX,EAAQR,SAAS,iBAAeQ,EAAQE,mBAIrDF,EAAQwB,UAAYf,EAAAA,EAAAA,KAAA,OAAAE,UAClBI,EAAAA,EAAAA,MAAA,SAAOF,UAAU,YAAWF,SAAA,CACzBX,EAAQwB,SAAW,gBAAkB,GACrCxB,EAAQ0B,KAAO1B,EAAQ0B,KAAKC,aAAaC,QAAQC,aAAe,QAE1D,MAIbpB,EAAAA,EAAAA,KAAA,MAAII,UAAU,mBAIlBJ,EAAAA,EAAAA,KAAA,OAAKI,UAAU,eAAcF,SAC1BX,EAAQ4B,QAAQC,aAAaC,OAAO,GAAGC,cAAgB/B,EAAQ4B,QAAQC,aAAaG,MAAM,MAE7FvB,EAAAA,EAAAA,KAAA,SAAOI,UAAU,YAAWF,SACzBX,EAAQiC,KAAKF,iBAEhBhB,EAAAA,EAAAA,MAAA,SAAOF,UAAU,YAAWF,SAAA,CACzBuB,IAAOlC,EAAQmC,WAAWH,MAAM,EAAG,GAAI,SAASI,OAAO,UAAU,KAAG,IACpEF,IAAOlC,EAAQqC,SAASL,MAAM,EAAG,GAAI,SAASI,OAAO,iBAG1DrB,EAAAA,EAAAA,MAACuB,EAAAA,GAAU,CAACzB,UAAU,mDAAkDF,SAAA,EACtEI,EAAAA,EAAAA,MAACH,EAAAA,GAAI,CAACC,UAAU,2BAA0BF,SAAA,EACxCI,EAAAA,EAAAA,MAACD,EAAAA,GAAI,CAACD,UAAU,8DAA6DF,SAAA,CAAC,UACpEX,EAAQuC,QAAQT,OAAO,GAAGC,cAAgB/B,EAAQuC,QAAQP,MAAM,OAE1EvB,EAAAA,EAAAA,KAACK,EAAAA,GAAI,CAACD,UAAU,iDAAgDF,UAC9DI,EAAAA,EAAAA,MAAA,OAAKF,UAAU,oBAAmBF,SAAA,CAC/B,IACAX,EAAQwC,QAAQxD,KAAI,CAACyD,EAAOvD,KAC3B6B,EAAAA,EAAAA,MAAA,QAAAJ,SAAA,CACG8B,EAAMC,WAAWX,cACjB7C,EAAQc,EAAQwC,QAAQzC,OAAS,GAChC,OAHOb,KAKT,UAGR6B,EAAAA,EAAAA,MAACD,EAAAA,GAAI,CAACD,UAAU,4DAA2DF,SAAA,CACxEX,EAAQ2C,UAAUC,WAAWd,OAAO,GAAGC,cAAgB/B,EAAQ2C,UAAUC,WAAWZ,MAAM,GAC1F,WAILvB,EAAAA,EAAAA,KAAA,OAAKI,UAAU,eAAcF,UAC3BI,EAAAA,EAAAA,MAAA,OAAKF,UAAU,QAAOF,SAAA,CACQ,QAA3BX,EAAQ6C,QAAQC,SAAoBrC,EAAAA,EAAAA,KAAA,UAAQI,UAAU,qCAAqCkC,MAAO/C,EAAQV,KAAM0D,QAAUC,GAAM7E,EAAe6E,EAAEC,OAAOH,OAAOpC,SAAC,kBACrI,YAA3BX,EAAQ6C,QAAQC,SAAwBrC,EAAAA,EAAAA,KAAA,UAAQI,UAAU,qCAAqCkC,MAAO/C,EAAQV,KAAM0D,QAAUC,GAAM7E,EAAe6E,EAAEC,OAAOH,OAAOpC,SAAC,oBACzI,SAA3BX,EAAQ6C,QAAQC,SAAqBrC,EAAAA,EAAAA,KAAA,UAAQ0C,UAAU,EAAMtC,UAAU,uCAAsCF,SAAC,wBAGnHF,EAAAA,EAAAA,KAAA,eArEGvB,UALoDA,MAF3DA,MAwFXuB,EAAAA,EAAAA,KAAA,OAAKI,UAAU,sCAAqCF,UACzDF,EAAAA,EAAAA,KAAA,OAAKI,UAAU,6CAA4CF,UACjEF,EAAAA,EAAAA,KAAA,QAAMI,UAAU,GAAEF,SAAC,wDAvGXzB,UAuH1B,C","sources":["views/teacher/Teacherview.js"],"sourcesContent":["import React from 'react'\n\nimport { useState } from 'react'\nimport {\n  CCol,\n  CRow,\n  CToast,\n  CToastHeader,\n  CToastBody,\n  CAlert,\n} from '@coreui/react'\nimport axios from 'axios'\nimport { useEffect } from 'react'\nimport useAPI from 'src/global_function/useApi'\nimport { useNavigate } from 'react-router-dom'\nimport moment from 'moment';\n\n\nexport default function Teacherview() {\n\n  // usestate to opne and close the model  \n  const navigation = useNavigate()  \n  const [StoredTokens, CallAPI] = useAPI()\n  const [TimeTables, setTimeTables] = useState(null)\n  const [lecture_list,set_lecture_list]  = useState(null)\n  const load_teacher_timetable = async () => {\n    const headers = {\n      'Content-Type': 'application/json',\n      'ngrok-skip-browser-warning': true,\n    }\n    const axiosInstance = axios.create()\n    const response_obj = await CallAPI(\n      StoredTokens,\n      axiosInstance,\n      '/manage/get_timetable_for_teacher',\n      'get',\n      headers,\n      null,\n      null,\n    )\n    if (response_obj.error === false) {\n      const response = response_obj.response\n      const data = response.data.data.map((branch,index)=>{\n          const lecture_obj = {\n            branch_name: branch.branch_name,\n            branch_slug: branch.slug\n          }\n          const lecture_list = []\n           branch.semesters.map((semester, index) => {\n            semester.divisions.map((division, idnex) => {\n                if (division.timetable.schedule.lectures.length > 0) {\n                    division.timetable.schedule.lectures.map((lecture, index) => {\n                       \n                      lecture_list.push({...lecture, division_name: division.division_name,semester:semester.no,schedule: division.timetable.schedule.day});\n\n                    });\n                } else {\n                    \n                }\n            });\n            \n        });\n        \n        return ({...lecture_obj,lectures:lecture_list})\n        \n\n      })\n      // console.log(data)\n      setTimeTables(data)\n    }\n    else {\n      alert(response_obj.errorMessage.message)\n    }\n  }\n\n  // const get_location_permission = ()=>{\n  //   if(!premission_state){\n  //     if(navigator.geolocation){\n  //       navigator.geolocation.getCurrentPosition((position)=>{\n  //         set_permission_state(true)\n  //       })\n  //     }\n  //   }\n    \n  // }\n\n  const create_Session = async (lecture_slug) => {\n    navigation(`/teacher/session?slug=${lecture_slug}`)\n  }\n\n  useEffect(() => {\n    // get_location_permission()\n      load_teacher_timetable()\n  }, [])\n\n  return (\n    <>\n          <CRow className=\"mb-3\">\n        <CCol>\n          {\n            TimeTables && TimeTables.map((branch, index) => {\n              return (\n                <div key={index}>\n                    <CAlert\n                      className=\"m-0 rounded-0 w-100 p-2 d-flex justify-content-between align-items-center mb-2\"\n                      color=\"primary\"\n                      visible={true}\n                    >\n                      \n                      {branch.branch_name}\n                    </CAlert>\n                    {\n                        branch.lectures.length > 0 ?  (\n                          branch.lectures.map((lecture,index)=>{\n                            return (\n                              <div key={index} className='d-flex justify-content-center w-100'>\n                              <CRow className=\"flex-column w-100\" style={{ padding: '0' }}>\n                                <CCol className=\"d-flex align-items-center flex-column w-100\" key={index}>\n                                  <div className=\"w-100 rounded-0 border-0\">\n                                    <div className=\"\" style={{ paddingBottom: \"0px\" }}>\n                                      <div className=\"justify-content-center w-100\">\n                                        <CToast\n                                          key={index}\n                                          autohide={false}\n                                          visible={true}\n                                          className={`mb-3 mt-3 w-100 ${lecture.is_proxy ? \"border-red-700\" : \"\"}`}\n                                        >\n                                          <CToastHeader className=\"d-flex flex-wrap justify-content-sm-between justify-content-center mx-2\">\n                                            \n                                              <div className={`w-100 fw-bold text-center`}>\n                                                <div>\n                                                  <small className='mx-2 my-2'>\n\n                                                    Semester: {lecture.semester} | Division : {lecture.division_name}\n                                                  </small>\n                                                </div>\n                                                {\n                                                  lecture.is_proxy ? (<div>\n                                                    <small className='mx-2 my-2'>\n                                                      {lecture.is_proxy ? \"Proxied from \" : \"\"}\n                                                      {lecture.link ? lecture.link.from_lecture.subject.subject_name : \"\"}\n                                                    </small>\n                                                  </div>) : (null)\n                                                }\n                                                \n\n                                                <hr className='w-100 my-2'></hr>\n\n                                              </div>\n                                            \n                                            <div className=\"fw-bold mx-2\">\n                                              {lecture.subject.subject_name.charAt(0).toUpperCase() + lecture.subject.subject_name.slice(1)}\n                                            </div>\n                                            <small className='mx-2 my-2'>\n                                              {lecture.type.toUpperCase()}\n                                            </small>\n                                            <small className='mx-2 my-2'>\n                                              {moment(lecture.start_time.slice(0, 5), 'HH:mm').format('h:mm A')} |{' '}\n                                              {moment(lecture.end_time.slice(0, 5), 'HH:mm').format('h:mm A')}\n                                            </small>\n                                          </CToastHeader>\n                                          <CToastBody className=\"d-flex flex-row flex-wrap justify-content-center\">\n                                            <CRow className='w-100 align-items-center'>\n                                              <CCol className='text-sm-start text-center col-12 col-sm-4 col-lg-4 col-md-4'>\n                                                Prof - {lecture.teacher.charAt(0).toUpperCase() + lecture.teacher.slice(1)}\n                                              </CCol>\n                                              <CCol className=' text-sm-end col-12 col-sm-4 col-lg-4 col-md-4'>\n                                                <div className='w-100 text-center'>\n                                                  {' '}\n                                                  {lecture.batches.map((batch, index) => (\n                                                    <span key={index}>\n                                                      {batch.batch_name.toUpperCase()}\n                                                      {index < lecture.batches.length - 1 &&\n                                                        ', '}\n                                                    </span>\n                                                  ))}{' '}\n                                                </div>\n                                              </CCol>\n                                              <CCol className='text-sm-end text-center col-12 col-sm-4 col-lg-4 col-md-4'>\n                                                {lecture.classroom.class_name.charAt(0).toUpperCase() + lecture.classroom.class_name.slice(1)}\n                                                {' '}\n                                              </CCol>\n                                            </CRow>\n\n                                            <div className='d-flex w-100'>\n                                              <div className='w-100'>\n                                                {lecture.session.active === \"pre\" && <button className='btn btn-outline-primary w-100 mt-3' value={lecture.slug} onClick={(e) => create_Session(e.target.value)}>Start Session</button>}\n                                                {lecture.session.active === \"ongoing\" && <button className='btn btn-outline-primary w-100 mt-3' value={lecture.slug} onClick={(e) => create_Session(e.target.value)}>Ongoing Session</button>}\n                                                {lecture.session.active === \"post\" && <button disabled={true} className='btn btn-outline-secondary w-100 mt-3'>Session Ended</button>}\n                                              </div>\n                                            </div>\n                                            <div>\n                                            </div>\n                                          </CToastBody>\n                                        </CToast>\n                                      </div>\n                                    </div>\n                                  </div>\n                                </CCol>\n                              </CRow>\n                            </div>\n                            )\n                          })\n                        ) : (<div className='d-flex w-100 justify-content-center'>\n                        <div className='alert alert-warning w-75 my-2 text-center '>\n                  <span className=''>No lecture sessions are there for this branch</span>\n                </div>\n                    </div>)\n                    }\n                </div>\n              )\n              \n            })\n          }\n\n        </CCol>\n\n      </CRow>\n  \n    </>\n  )\n}\n"],"names":["Teacherview","navigation","useNavigate","StoredTokens","CallAPI","useAPI","TimeTables","setTimeTables","useState","lecture_list","set_lecture_list","create_Session","async","concat","lecture_slug","useEffect","axiosInstance","axios","create","response_obj","error","data","response","map","branch","index","lecture_obj","branch_name","branch_slug","slug","semesters","semester","divisions","division","idnex","timetable","schedule","lectures","length","lecture","push","division_name","no","day","alert","errorMessage","message","load_teacher_timetable","_jsx","_Fragment","children","CRow","className","CCol","_jsxs","CAlert","color","visible","style","padding","paddingBottom","CToast","autohide","is_proxy","CToastHeader","link","from_lecture","subject","subject_name","charAt","toUpperCase","slice","type","moment","start_time","format","end_time","CToastBody","teacher","batches","batch","batch_name","classroom","class_name","session","active","value","onClick","e","target","disabled"],"sourceRoot":""}