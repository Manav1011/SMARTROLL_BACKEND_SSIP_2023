{"version":3,"file":"static/js/224.91ce6e03.chunk.js","mappings":"uQAuJA,QApIA,YACqBA,EAAAA,EAAAA,MAAnB,MACOC,EAAcC,IAAWC,EAAAA,EAAAA,KA6B1BC,EAAuBC,UAC3B,MAIMC,EAAgBC,EAAAA,EAAMC,SACtBC,QAAqBP,EACzBD,EACAK,EACA,oCACA,MATc,CACd,eAAgB,mBAChB,8BAA8B,GAS9B,KACA,MAEF,IAA2B,IAAvBG,EAAaC,MAAiB,CAChC,MAAMC,EAAWF,EAAaE,SAC1BA,EAASC,KAAKC,iBACZ,iBAAkBC,QAAU,kBAAmBC,WAAa,gBAAiBD,OAC/EC,UAAUC,cACPC,SAAS,kCACTC,MAAMC,IACLJ,UAAUC,cAAcI,mBAAmBF,MAAMG,IAC/CC,aAAaC,oBAAoBL,MAAMM,IACrC,GAAmB,YAAfA,EAA0B,CAC5B,MAAMC,EArE1B,SAA4BC,GAC1B,MACMC,GAAUD,EADA,IAAIE,QAAQ,EAAKF,EAAaG,OAAS,GAAM,IACrBC,QAAQ,MAAO,KAAKA,QAAQ,KAAM,KAEpEC,EAAUjB,OAAOkB,KAAKL,GACtBM,EAAc,IAAIC,WAAWH,EAAQF,QAE3C,IAAK,IAAIM,EAAI,EAAGA,EAAIJ,EAAQF,SAAUM,EACpCF,EAAYE,GAAKJ,EAAQK,WAAWD,GAEtC,OAAOF,CACT,CA0DiDI,CAAmB1B,EAASC,KAAKC,kBAC9DM,EAAamB,YACVC,UAAU,CACTC,iBAAiB,EACjBf,yBAEDP,MAAMuB,IACLC,QAAQC,IAAIF,GA3DTpC,OAAOoC,EAAaG,KAC3C,MAIMtC,EAAgBC,EAAAA,EAAMC,SACtBC,QAAqBP,EACzBD,EACAK,EACA,sCACA,OATc,CACd,eAAgB,mBAChB,8BAA8B,GAS9B,CAAEmC,aAAcA,EAAaG,KAAKA,GAClC,OAEyB,IAAvBnC,EAAaC,OACJ,YAARkC,GACDC,IAAK,YAAa,0DAA2D,WAEpE,UAARD,GACDC,IAAK,YAAa,gDAAiD,YAGrEA,IAAK,QAASpC,EAAaqC,aAAaC,QAAS,QACnD,EAoCoBC,CAAiBP,EAAaG,EAAK,IAEpCK,OAAOvC,IACNmC,IAAK,QAASnC,EAAO,QAAQ,GAEnC,MACEmC,IAAK,QAAS,6CAA8C,QAC9D,GACA,GACF,IAGNA,IAAK,QAAS,oDAAqD,SAGrEA,IAAK,QAASpC,EAAaqC,aAAaC,QAAS,QAErD,GAGF,OACEG,EAAAA,EAAAA,KAAA,OAAKC,UAAU,sCAAqCC,UAClDF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,2BAA0BC,UACvCC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,2FAA0FC,SAAA,EACvGF,EAAAA,EAAAA,KAAA,OACEC,UAAU,gDACV,cAAY,OACZG,MAAM,6BACNC,KAAK,eACLC,QAAQ,YAAWJ,UAEnBF,EAAAA,EAAAA,KAAA,QAAMO,EAAE,kcAEVP,EAAAA,EAAAA,KAAA,KAAGQ,KAAK,IAAGN,UACTF,EAAAA,EAAAA,KAAA,MAAIC,UAAU,uDAAsDC,SAAC,0BAIvEF,EAAAA,EAAAA,KAAA,KAAGC,UAAU,oDAAmDC,SAAC,6GAGjEC,EAAAA,EAAAA,MAAA,KACEM,QAASA,KAAOvD,EAAqB,SAAS,EAC9C+C,UAAU,yEAAwEC,SAAA,CACnF,UAECF,EAAAA,EAAAA,KAAA,OACEC,UAAU,qCACV,cAAY,OACZG,MAAM,6BACNC,KAAK,OACLC,QAAQ,YAAWJ,UAEnBF,EAAAA,EAAAA,KAAA,QACEU,OAAO,eACPC,cAAc,QACdC,eAAe,QACfC,YAAY,IACZN,EAAE,wKAQlB,C","sources":["views/student_controller/additional_features/AdditionalFeatures.js"],"sourcesContent":["import React from 'react'\nimport axios from 'axios'\nimport useAPI from 'src/global_function/useApi'\nimport Swal from 'sweetalert'\nimport { useNavigate } from 'react-router-dom'\n\nfunction urlB64ToUint8Array(base64String) {\n  const padding = '='.repeat((4 - (base64String.length % 4)) % 4)\n  const base64 = (base64String + padding).replace(/\\-/g, '+').replace(/_/g, '/')\n\n  const rawData = window.atob(base64)\n  const outputArray = new Uint8Array(rawData.length)\n\n  for (let i = 0; i < rawData.length; ++i) {\n    outputArray[i] = rawData.charCodeAt(i)\n  }\n  return outputArray\n}\n\nfunction AdditionalFeatures() {\n  const navigation = useNavigate()\n  const [StoredTokens, CallAPI] = useAPI()\n\n  const SaveSubscription = async (subscription,type) => {\n    const headers = {\n      'Content-Type': 'application/json',\n      'ngrok-skip-browser-warning': true,\n    }\n    const axiosInstance = axios.create()\n    const response_obj = await CallAPI(\n      StoredTokens,\n      axiosInstance,\n      '/manage/save_web_push_subscription/',\n      'post',\n      headers,\n      { subscription: subscription,type:type },\n      null,\n    )\n    if (response_obj.error === false) {\n      if(type == 'lectures'){\n        Swal('Good job!', \"You'll be notified about your upcoming lecture sessions\", 'success')\n      }\n      if(type == 'alerts'){\n        Swal('Good job!', \"You'll be notified about the emergency alerts\", 'success')\n      }\n    } else {\n      Swal('Oops!', response_obj.errorMessage.message, 'error')\n    }\n  }\n\n  const subscribe_for_alerts = async (type) => {\n    const headers = {\n      'Content-Type': 'application/json',\n      'ngrok-skip-browser-warning': true,\n    }\n    const axiosInstance = axios.create()\n    const response_obj = await CallAPI(\n      StoredTokens,\n      axiosInstance,\n      '/manage/set_web_push_subscription',\n      'get',\n      headers,\n      null,\n      null,\n    )\n    if (response_obj.error === false) {\n      const response = response_obj.response\n      if (response.data.VAPID_PUBLIC_KEY) {\n        if ('Notification' in window && 'serviceWorker' in navigator && 'PushManager' in window) {\n          navigator.serviceWorker\n            .register('/static/workers/NotificationWorker.js')\n            .then((registration) => {\n              navigator.serviceWorker.getRegistrations().then((registered) => {\n                Notification.requestPermission().then((permission) => {\n                  if (permission === 'granted') {\n                    const applicationServerKey = urlB64ToUint8Array(response.data.VAPID_PUBLIC_KEY)\n                    registration.pushManager\n                      .subscribe({\n                        userVisibleOnly: true,\n                        applicationServerKey,\n                      })\n                      .then((subscription) => {\n                        console.log(subscription)\n                        SaveSubscription(subscription,type)\n                      })\n                      .catch((error) => {                        \n                        Swal('Oops!', error, 'error')\n                      })\n                  } else {\n                    Swal('Oops!', \"You've denined the notification permission\", 'error')\n                  }\n                })\n              })\n            })\n        } else {\n          Swal('Oops!', \"Your browser doesn't support push notificaitons!!\", 'error')\n        }\n      } else {\n        Swal('Oops!', response_obj.errorMessage.message, 'error')\n      }\n    }\n  }\n\n  return (\n    <div className=\"flex justify-center gap-4 flex-wrap\">      \n      <div className=\"flex justify-center mt-4\">\n        <div className=\"max-w-sm bg-slate-200 p-6  border border-gray-200 rounded-lg shadow dark:border-gray-700\">\n          <svg\n            className=\"w-7 h-7 text-gray-500 dark:text-gray-400 mb-3\"\n            aria-hidden=\"true\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n            fill=\"currentColor\"\n            viewBox=\"0 0 20 20\"\n          >\n            <path d=\"M18 5h-.7c.229-.467.349-.98.351-1.5a3.5 3.5 0 0 0-3.5-3.5c-1.717 0-3.215 1.2-4.331 2.481C8.4.842 6.949 0 5.5 0A3.5 3.5 0 0 0 2 3.5c.003.52.123 1.033.351 1.5H2a2 2 0 0 0-2 2v3a1 1 0 0 0 1 1h18a1 1 0 0 0 1-1V7a2 2 0 0 0-2-2ZM8.058 5H5.5a1.5 1.5 0 0 1 0-3c.9 0 2 .754 3.092 2.122-.219.337-.392.635-.534.878Zm6.1 0h-3.742c.933-1.368 2.371-3 3.739-3a1.5 1.5 0 0 1 0 3h.003ZM11 13H9v7h2v-7Zm-4 0H2v5a2 2 0 0 0 2 2h3v-7Zm6 0v7h3a2 2 0 0 0 2-2v-5h-5Z\" />\n          </svg>\n          <a href=\"#\">\n            <h5 className=\"mb-2 text-2xl font-semibold tracking-tight text-dark\">\n              Emergency Alerts!!\n            </h5>\n          </a>\n          <p className=\"mb-3 font-normal text-gray-500 dark:text-gray-400\">          \n            You'll be notified when there's a emergency situation in the college E.G. Fire, Rain, Smoke Detection!!\n          </p>\n          <a\n            onClick={() => {subscribe_for_alerts('alerts')}}\n            className=\"btn inline-flex font-medium items-center text-blue-600 hover:underline\"\n          >\n            Opt-In\n            <svg\n              className=\"w-3 h-3 ms-2.5 rtl:rotate-[270deg]\"\n              aria-hidden=\"true\"\n              xmlns=\"http://www.w3.org/2000/svg\"\n              fill=\"none\"\n              viewBox=\"0 0 18 18\"\n            >\n              <path\n                stroke=\"currentColor\"\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                strokeWidth=\"2\"\n                d=\"M15 11v4.833A1.166 1.166 0 0 1 13.833 17H2.167A1.167 1.167 0 0 1 1 15.833V4.167A1.166 1.166 0 0 1 2.167 3h4.618m4.447-2H17v5.768M9.111 8.889l7.778-7.778\"\n              />\n            </svg>\n          </a>\n        </div>\n      </div>      \n    </div>\n  )\n}\n\nexport default AdditionalFeatures\n"],"names":["useNavigate","StoredTokens","CallAPI","useAPI","subscribe_for_alerts","async","axiosInstance","axios","create","response_obj","error","response","data","VAPID_PUBLIC_KEY","window","navigator","serviceWorker","register","then","registration","getRegistrations","registered","Notification","requestPermission","permission","applicationServerKey","base64String","base64","repeat","length","replace","rawData","atob","outputArray","Uint8Array","i","charCodeAt","urlB64ToUint8Array","pushManager","subscribe","userVisibleOnly","subscription","console","log","type","Swal","errorMessage","message","SaveSubscription","catch","_jsx","className","children","_jsxs","xmlns","fill","viewBox","d","href","onClick","stroke","strokeLinecap","strokeLinejoin","strokeWidth"],"sourceRoot":""}