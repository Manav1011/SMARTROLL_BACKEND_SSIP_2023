{"version":3,"file":"static/js/459.798daebe.chunk.js","mappings":"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","sources":["views/superadmin/AddEvent.js","views/superadmin/Events.js"],"sourcesContent":["import React, { useEffect, useState } from 'react'\nimport {\nCOffcanvas,\n  COffcanvasBody,  \n  CCard,\n  CCardBody,\n  CFormSelect,\n  CCardHeader,\n} from '@coreui/react'\nimport axios from 'axios'\nimport useAPI from 'src/global_function/useApi'\n\nexport const AddEvent = ({ visible, setVisible,branches,setActiveEvents }) => {\n  const [eventTitle,setEventTitle] = useState('')\n  const [eventDescription,setEventDescription] = useState('')\n  const [selectedBranches,setSelectedBranches] = useState([])\n\nconst handleSelectedBranchChange = (event) => {    \n    const selectedOptions = Array.from(event.target.selectedOptions, option => option.value);\n    setSelectedBranches(selectedOptions);\n  };\n\n  const [StoredTokens, CallAPI] = useAPI()\n  const headers = {\n    'Content-Type': 'application/json',\n    'ngrok-skip-browser-warning': true,\n  }\n  const axiosInstance = axios.create()\n\nconst create_event = async(e) => {\n  e.preventDefault()\n  let body = {\n    title:eventTitle,\n    description:eventDescription,\n    branches:selectedBranches\n  }\n  CallAPI(\n    StoredTokens,\n    axiosInstance,\n    '/manage/notifications/add_event/',\n    'post',\n    headers,\n    body,\n    null,\n  ).then((res) => {\n    if (res.error) {\n      alert(res.errorMessage.message)\n    } else {\n          let event = res.response.data.data\n          setActiveEvents(prevArray => [event,...prevArray])\n          setVisible(false)\n    }\n  })\n}\n\n  return (    \n    <COffcanvas    \n    placement=\"end\"\n    visible={visible}\n    onHide={() => setVisible(false)}\n    data-coreui-backdrop=\"static\"\n    className=\"card w-100 p-4\" >\n      <COffcanvasBody>\n        <CCard className=\"shadow-lg rounded-lg border border-gray-200\">\n          <CCardHeader className=\"bg-[#c2bcf4] text-xl py-2 rounded-t-lg\">Add Event</CCardHeader>\n          <CCardBody className=\"p-6\">\n            <form className=\"space-y-4\" autoComplete=\"off\" onSubmit={create_event}>\n              {/* Survey Title */}\n              <div className=\"mb-4\">\n                <label className=\"form-label text-lg font-semibold\">Title Of Event</label>\n                <input\n                  type=\"text\"\n                  className=\"form-control border-gray-300 shadow-sm focus:border-yellow-500 focus:ring focus:ring-yellow-500 focus:ring-opacity-50\"\n                  required      \n                  onChange={(e) => {setEventTitle(e.target.value)}}\n                />\n              </div>              \n              {/* Survey Description */}\n              <div className=\"mb-4\">\n                <label className=\"form-label text-lg font-semibold\">Description Of Event</label>\n                <textarea\n                rows={4}\n                  type=\"textarea\"\n                  className=\"form-control border-gray-300 shadow-sm focus:border-yellow-500 focus:ring focus:ring-yellow-500 focus:ring-opacity-50\"\n                  required     \n                  onChange={(e) => {setEventDescription(e.target.value)}}\n                />\n              </div>  \n              {/* Select Branch */}\n              <div className=\"mb-4\">\n                <label className=\"form-label text-lg font-semibold\">Select Branch</label>                \n                <CFormSelect\n                    aria-label=\"Select Branch\"    \n                    multiple      \n                    value={selectedBranches}          \n                    onChange={handleSelectedBranchChange}\n                  >                    \n                    {branches.map((branch,index) => (\n                      <option value={branch.slug} key={index}>{branch.branch_name}</option>\n                    ))}\n                  </CFormSelect>                \n              </div>\n              {/* Submit Button */}\n              <button\n                type=\"submit\"                \n                className=\"btn btn-dark text-black rounded-md px-4 py-2 form-control\"\n              >\n                Submit\n              </button>\n              <button\n                type=\"button\" \n                className=\"btn btn-danger text-black rounded-md px-4 py-2 form-control\"\n                onClick={() => {setVisible(false)}}\n              >\n                Cancel\n              </button>\n            </form>\n          </CCardBody>\n        </CCard>\n      </COffcanvasBody>\n    </COffcanvas>\n  )\n}\n\nexport default AddEvent\n","import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\nimport useAPI from 'src/global_function/useApi'\nimport { CCardHeader, CCard, CCardBody, CCardFooter } from '@coreui/react'\nimport AddEvent from './AddEvent'\n\nfunction Events() {\n  const [visible, setVisible] = useState(false)\n  const [ActiveEvents, setActiveEvents] = useState([])\n  const [PastEvents, setPastEvents] = useState([])\n  const [selectedEventType, setSelectedEventType] = useState('active')\n  const [StoredTokens, CallAPI] = useAPI()\n  const [branches,setBranches] = useState([])\n  const headers = {\n    'Content-Type': 'application/json',\n    'ngrok-skip-browser-warning': true,\n  }\n  const axiosInstance = axios.create()\n\n  const get_branches = async () => {\n    CallAPI(\n      StoredTokens,\n      axiosInstance,\n      '/manage/get_active_branches_for_superadmin',\n      'get',\n      headers,\n      null,\n      null,\n    ).then((res) => {\n      if (res.error) {\n        alert(res.errorMessage.message)\n      } else {\n        setBranches(res?.response?.data?.data)   \n      }\n    })\n  }\n  const end_event = async (event_slug) => {\n    CallAPI(\n      StoredTokens,\n      axiosInstance,\n      '/manage/notifications/end_event',\n      'post',\n      headers,\n      {event_slug:event_slug},\n      null,\n    ).then((res) => {\n      if (res.error) {\n        alert(res.errorMessage.message)\n      } else {\n        alert(res.response.data.message)\n        setActiveEvents(ActiveEvents.filter((event) => {\n          setPastEvents(prevArray => [event,...prevArray])\n          return event.slug != event_slug\n        }))        \n      }\n    })\n  }\n  const get_events = async () => {\n    CallAPI(\n      StoredTokens,\n      axiosInstance,\n      '/manage/notifications/get_events',\n      'get',\n      headers,\n      null,\n      null,\n    ).then((res) => {\n      if (res.error) {\n        alert(res.errorMessage.message)\n      } else {        \n        let events = res.response.data.data\n        setActiveEvents(events.filter((event) => event.status == true))\n        setPastEvents(events.filter((event) => event.status == false))                \n      }\n    })\n  }\n\n  useEffect(() => {\n    get_events()\n    get_branches()\n  }, [])\n\n  return (\n    <div>\n      <div className=\"mt-3\">\n        <select\n          className=\"form-select\"\n          aria-label=\"Default select example\"\n          onChange={(e) => {\n            setSelectedEventType(e.target.value)\n          }}\n        >\n          <option value=\"active\">Active Events</option>\n          <option value=\"past\">Past Events</option>\n        </select>\n      </div>\n      <div className=\"mt-4\">\n        {selectedEventType == 'past' ? (\n          PastEvents.length > 0 ? (\n            PastEvents.map((event, index) => (\n              <CCard className=\"mb-4\" key={index}>\n                <CCardHeader>\n                  <h5 className=\"mb-2 text-2xl font-semibold tracking-tight text-dark\">\n                    {event.title}\n                  </h5>\n                </CCardHeader>\n                <CCardBody>\n                  <p className=\"mb-3 font-normal text-gray-500 dark:text-gray-400\">\n                    {event.description}\n                  </p>\n                </CCardBody>\n                <CCardFooter>\n                  <p className=\"mb-3 font-normal text-gray-800 dark:text-gray-800\">\n                    <p className=\"mb-1 font-bold text-gray-800 dark:text-gray-800\">Branches</p>\n                    {event.branches.map((branch, index) => branch.branch_name).join(', ')}\n                  </p>\n                </CCardFooter>\n              </CCard>\n            ))\n          ) : (\n            <div className=\"d-flex w-100 justify-content-center\">\n              <div className=\"alert alert-warning w-full my-2 text-center\">\n                <span className=\"\">No Past Events</span>\n              </div>\n            </div>\n          )\n        ) : ActiveEvents.length > 0 ? (\n          ActiveEvents.map((event, index) => (\n            <CCard className=\"mb-4\" key={index}>\n              <CCardHeader>\n                <h5 className=\"mb-2 text-2xl font-semibold tracking-tight text-dark\">\n                  {event.title}\n                </h5>\n              </CCardHeader>\n              <CCardBody>\n                <p className=\"mb-3 font-normal text-gray-500 dark:text-gray-400\">\n                  {event.description}\n                </p>\n              </CCardBody>\n              <CCardFooter>\n                <p className=\"mb-3 font-normal text-gray-800 dark:text-gray-800\">\n                  <p className=\"mb-1 font-bold text-gray-800 dark:text-gray-800\">Branches</p>\n                  {event.branches.map((branch, index) => branch.branch_name).join(', ')}\n                </p>\n              </CCardFooter>\n              <button className='w-full btn btn-outline-danger rounded-none mt-2' onClick={() => {end_event(event.slug)}}>Event Event</button>\n            </CCard>\n          ))\n        ) : (\n          <div className=\"d-flex w-100 justify-content-center\">\n            <div className=\"alert alert-warning w-full my-2 text-center\">\n              <span className=\"\">No Active Events</span>\n            </div>\n          </div>\n        )}\n      </div>\n      <div className=\"fixed bottom-0 right-0 w-16 h-16 mr-12 mb-8 cursor-pointer\" id=\"box_btn\" onClick={() => {setVisible(true)}}>\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          width={60}\n          height={60}\n          fill=\"currentColor\"\n          className=\"bi bi-plus-circle-fill\"\n          viewBox=\"0 0 16 16\"\n        >\n          <path d=\"M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0M8.5 4.5a.5.5 0 0 0-1 0v3h-3a.5.5 0 0 0 0 1h3v3a.5.5 0 0 0 1 0v-3h3a.5.5 0 0 0 0-1h-3z\" />\n        </svg>\n      </div>\n      {branches.length > 0 && <AddEvent visible={visible} setVisible={setVisible} branches={branches} setActiveEvents={setActiveEvents} />}\n    </div>\n  )\n}\n\nexport default Events\n"],"names":["_ref","visible","setVisible","branches","setActiveEvents","eventTitle","setEventTitle","useState","eventDescription","setEventDescription","selectedBranches","setSelectedBranches","StoredTokens","CallAPI","useAPI","headers","axiosInstance","axios","create","_jsx","COffcanvas","placement","onHide","className","children","COffcanvasBody","_jsxs","CCard","CCardHeader","CCardBody","autoComplete","onSubmit","async","e","preventDefault","title","description","then","res","error","alert","errorMessage","message","event","response","data","prevArray","type","required","onChange","target","value","rows","CFormSelect","multiple","selectedOptions","Array","from","option","map","branch","index","slug","branch_name","onClick","ActiveEvents","PastEvents","setPastEvents","selectedEventType","setSelectedEventType","setBranches","useEffect","events","filter","status","get_events","_res$response","_res$response$data","get_branches","length","CCardFooter","join","event_slug","end_event","id","xmlns","width","height","fill","viewBox","d","AddEvent"],"sourceRoot":""}