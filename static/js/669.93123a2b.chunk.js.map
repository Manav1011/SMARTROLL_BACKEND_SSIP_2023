{"version":3,"file":"static/js/669.93123a2b.chunk.js","mappings":"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","sources":["views/breadcrum/Breadcrumbnav.js","views/forms/validation/Terms.js","views/dashboard/Dashboard.js","views/forms/form-control/FormControl.js","views/forms/input-group/InputGroup.js","views/forms/validation/Validation.js"],"sourcesContent":["import React from 'react';\nimport { useState,useContext } from 'react'\nimport { Store } from 'src/views/forms/validation/store';\nimport {    \n    CCard,\n    CCardBody,    \n    CCol,    \n    CRow,    \n} from '@coreui/react'\n\nimport \"../../scss/panel.css\"\nconst Breadcrumbnav = (props) => {\n    const { state, dispatch: ctxDispatch } = useContext(Store);\n    const { objectCount , profileDetails } = state  \n    // console.log(objectCount)\n    const {currentStep , chageSteps }= props\n    let breadcrumbs = {\n        term:[\"term\"],\n        semester: [\"term\",\"semester\"],\n        division: [\"term\",\"semester\",\"division\"],\n        batch: [\"term\",\"semester\",\"division\",\"batch\"],\n    }\n    return (\n        <>    \n            <CRow className='mb-2'>\n                <CCol xl>\n                    <CCard>\n                        <CCardBody style={{display:'flex',justifyContent:'space-between',flexDirection:'column'}}>\n                            <nav aria-label=\"breadcrumb\">\n                                <ol className=\"mb-3 breadcrumb d-flex align-items-center text-sm sm:text-lg\" style={{margin:'0'}}>\n                                    <li className=\"breadcrumb-item active\" aria-current=\"page\">\n                                    <svg style={{marginTop:'-3'}} xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" className=\"bi bi-house\" viewBox=\"0 0 16 16\">\n                                        <path d=\"M8.707 1.5a1 1 0 0 0-1.414 0L.646 8.146a.5.5 0 0 0 .708.708L2 8.207V13.5A1.5 1.5 0 0 0 3.5 15h9a1.5 1.5 0 0 0 1.5-1.5V8.207l.646.647a.5.5 0 0 0 .708-.708L13 5.793V2.5a.5.5 0 0 0-.5-.5h-1a.5.5 0 0 0-.5.5v1.293L8.707 1.5ZM13 7.207V13.5a.5.5 0 0 1-.5.5h-9a.5.5 0 0 1-.5-.5V7.207l5-5 5 5Z\"/>\n                                    </svg>\n                                    </li>\n                                    {\n                                        breadcrumbs[currentStep].map((items,keys)=>(\n                                            \n                                             <li className=\"breadcrumb-item active\" aria-current=\"page\" key={keys}><a style={{cursor:\"grab\"}} onClick={() => {chageSteps(items)}} className={items === currentStep?\"disabled\":\"\"}>{items}</a></li>\n                                        ))\n                                    }\n                                </ol>                                                      \n                            </nav>\n\n                            <span className='text-sm sm:text-lg'>Branch - {profileDetails.obj.branch.branch_name}</span>\n\n                            \n                        </CCardBody>\n                    </CCard>\n                </CCol>\n            </CRow>\n        </>\n    );\n}\n\nexport default Breadcrumbnav;\n","import React, { useState, Component } from 'react'\nimport { useEffect } from 'react'\nimport PropTypes from 'prop-types'\nimport axios from 'axios'\nimport { useContext } from 'react'\nimport { Navigate, useNavigate } from 'react-router-dom'\nimport { APIMiddleware } from 'src/global_function/GlobalFunctions'\nimport useAPI from 'src/global_function/useApi'\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CForm,\n  CFormInput,\n  CFormFeedback,\n  CFormLabel,\n  CRow,\n  CTable,\n  CTableBody,\n  CTableDataCell,\n  CTableHead,\n  CTableHeaderCell,\n  CTableRow,\n} from '@coreui/react'\nimport { Store } from '../validation/store'\nimport { base_url } from 'src/base_url'\nimport expireToken from 'src/global_function/unauthorizedToken'\nimport { showAlert } from 'src/global_function/GlobalFunctions'\n\nconst CustomStyles = (set_term, set_term_count) => {\n  const { state, dispatch: ctxDispatch } = useContext(Store)\n  const { accessToken, refreshToken, batches, currentBatch, objectCount } = state\n  const [validated, setValidated] = useState(false)\n  const currentYear = new Date().getFullYear()\n  const [semester_no, set_semester_no] = useState('')\n  const [Start, setStart] = useState(currentYear)\n  const [termType,setTermType] = useState('odd')\n  const EndYear = (parseInt(Start, 10) + 1).toString()\n  const navigate = useNavigate()\n\n  // custom hook for api calling\n\n  const [StoredTokens, CallAPI] = useAPI()\n\n  const addBatches = async (body) => {\n    const header = {\n      'Content-Type': 'application/json',\n      'ngrok-skip-browser-warning': true,\n    }\n    const axiosInstance = axios.create()\n    let endpoint = `/manage/add_term/`\n    let method = 'post'\n    let headers = header\n    let response_obj = await CallAPI(\n      StoredTokens,\n      axiosInstance,\n      endpoint,\n      method,\n      headers,\n      body,\n      null,\n    )\n    if (response_obj.error == false) {\n      let response = response_obj.response\n      let batchCount = { ...objectCount }\n      batchCount.terms += 1\n      ctxDispatch({ type: 'GET_OBJECTS', payload: batchCount })\n      set_term((prevArray) => [...prevArray, response.data.data])\n      set_term_count((preValue) => preValue + 1)\n      showAlert('success', 'Bactch Added successfully...!')\n    } else {\n      alert(response_obj.errorMessage.message)\n    }\n  }\n\n  const handleSubmit = (event) => {\n    const form = event.currentTarget\n    event.preventDefault()\n    if (form.checkValidity() === false) {\n      event.preventDefault()\n      event.stopPropagation()\n    }\n    setValidated(true)\n    const body = {\n      start_year: Start,\n      end_year: EndYear,\n      type:termType\n    }\n    addBatches(body)\n  }\n\n  useEffect(() => {\n    console.log(termType);\n  }, [termType])\n  \n  return (\n    <>\n      <CForm\n        className=\"row g-3 needs-validation\"\n        noValidate\n        validated={validated}\n        onSubmit={handleSubmit}\n      >\n        <CCol md={6}>\n          <CFormLabel htmlFor=\"validationCustom01\">Start Year</CFormLabel>\n          <CFormInput\n            type=\"number\"\n            min={currentYear}\n            max=\"2099\"\n            step=\"1\"\n            value={Start}\n            id=\"validationCustom01\"\n            onChange={(e) => setStart(e.target.value)}\n            required\n            maxLength={4}\n          />\n          <CFormFeedback valid>Looks good!</CFormFeedback>\n        </CCol>\n        <CCol md={6}>\n          <CFormLabel htmlFor=\"validationCustom02\">End Year</CFormLabel>\n          <CFormInput\n            type=\"number\"\n            value={EndYear}\n            readOnly\n            step=\"1\"\n            id=\"validationCustom02\"\n            required\n            maxLength={4}\n          />\n          <CFormFeedback valid>Looks good!</CFormFeedback>\n        </CCol>\n        <CFormLabel htmlFor=\"validationCustom02\">Type</CFormLabel>\n        <CCol md={6} className=\"flex  items-center gap-4 -mt-1\">\n          <div className=\"flex items-center\">\n            <input                            \n              type=\"radio\"    \n              name='term-type'\n              value={'odd'}\n              defaultChecked       \n              onClick={(e) => {setTermType(e.target.value)}}   \n              className=\"w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600\"\n            />\n            <label              \n              className=\"ms-2 text-sm font-medium text-gray-400 dark:text-gray-500\"\n            >\n              Odd\n            </label>\n          </div>\n          <div className=\"flex items-center\">\n            <input                                        \n              type=\"radio\"     \n              name='term-type'\n              value={'even'}\n              onClick={(e) => {setTermType(e.target.value)}}   \n              className=\"w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600\"\n            />\n            <label              \n              className=\"ms-2 text-sm font-medium text-gray-400 dark:text-gray-500\"\n            >\n              Even\n            </label>\n          </div>\n          <CFormFeedback valid>Looks good!</CFormFeedback>\n        </CCol>\n        <CCol xs={12}>\n          <button className=\"btn btn-outline-dark form-control\" type=\"submit\">\n            Submit form\n          </button>\n        </CCol>\n      </CForm>\n    </>\n  )\n}\n\nconst Terms = (props) => {\n  const { chageSteps } = props\n  const { set_term_slug } = props\n  const { set_term_count } = props\n  const { state, dispatch: ctxDispatch } = useContext(Store)\n  const { accessToken, refreshToken, batches, currentBatch } = state\n  const navigate = useNavigate()\n  const [semester, set_semester] = useState([])\n  const [StoredTokens, CallAPI] = useAPI()\n\n  const [term, set_term] = useState([])\n\n  // function for the load batches\n\n  const load_term = async () => {\n    const header = {\n      'Content-Type': 'application/json',\n      'ngrok-skip-browser-warning': true,\n    }\n    const axiosInstance = axios.create()\n    let endpoint = `/manage/get_terms`\n    let method = 'get'\n    let headers = header\n    let response_obj = await CallAPI(StoredTokens, axiosInstance, endpoint, method, headers)\n    if (response_obj.error == false) {\n      let response = response_obj.response\n\n      set_term(response.data.data)\n    } else {\n      alert(response_obj.errorMessage.message)\n    }\n  }\n\n  useEffect(() => {\n    load_term()\n  }, [])\n\n  return (\n    <>\n      <CRow>\n        <CCol xs={12}>\n          <CCard className=\"mb-3\">\n            <CCardHeader>\n              <strong>Term</strong>\n            </CCardHeader>\n            <CCardBody>{CustomStyles(set_term, set_term_count)}</CCardBody>\n          </CCard>\n        </CCol>\n      </CRow>\n      <CRow>\n        <CCol xs>\n          <CCard className=\"mb-4\">\n            <CCardHeader>\n              <strong>Term History</strong>\n            </CCardHeader>\n            <CCardBody>\n              {term.length > 0 ? (\n                <CTable align=\"middle\" className=\"mb-0 border text-center\" hover responsive>\n                  <CTableHead color=\"light\">\n                    <CTableRow>\n                      <CTableHeaderCell>Start Year</CTableHeaderCell>\n                      <CTableHeaderCell>End Year</CTableHeaderCell>\n                      <CTableHeaderCell>Type</CTableHeaderCell>\n                      <CTableHeaderCell>Status</CTableHeaderCell>\n                    </CTableRow>\n                  </CTableHead>\n                  <CTableBody>\n                    {term.map((item, index) => (\n                      <CTableRow\n                        v-for=\"item in tableItems\"\n                        key={index}\n                        onClick={() => {\n                          chageSteps('semester')\n                          set_term_slug(item.slug)\n                        }}\n                        style={{ cursor: 'grab' }}\n                      >\n                        <CTableDataCell>\n                          <div>{item.start_year}</div>\n                        </CTableDataCell>\n                        <CTableDataCell>\n                          <div>{item.end_year}</div>\n                        </CTableDataCell>\n                        <CTableDataCell>\n                          <div>{item.type}</div>\n                        </CTableDataCell>\n                        <CTableDataCell>\n                          <div>{item.status ? 'Active' : 'Inactive'}</div>\n                        </CTableDataCell>\n                      </CTableRow>\n                    ))}\n                  </CTableBody>\n                </CTable>\n              ) : (\n                <p>no Terms</p>\n              )}\n            </CCardBody>\n          </CCard>\n        </CCol>\n      </CRow>\n    </>\n  )\n}\n\n// Terms.propTypes = {\n//   chageSteps: PropTypes.func.isRequired,\n//   set_semester_slug: PropTypes.func.isRequired,\n//   setBatchCout: PropTypes.func.isRequired,\n// }\n\nexport default Terms\n","import React , {Component} from 'react'\nimport { useState } from 'react'\nimport {\n  CButton,\n  CCard,\n  CCardFooter,\n  CCol,\n  CRow,\n} from '@coreui/react'\n\nimport axios from 'axios'\n\nimport FormControl from '../forms/form-control/FormControl'\nimport Select from '../forms/input-group/InputGroup'\nimport Validation from '../forms/validation/Validation'\nimport { useContext , useEffect } from 'react'\nimport { Store } from 'src/views/forms/validation/store';\nimport {base_url} from 'src/base_url'\nimport { APIMiddleware } from 'src/global_function/GlobalFunctions'\nimport Breadcrumbnav from '../breadcrum/Breadcrumbnav';\nimport useAPI from 'src/global_function/useApi'\nimport Terms from '../forms/validation/Terms'\nconst Dashboard = () => {\n  const [steps, setsteps] = useState('term')\n  const [semester_slug, set_semester_slug] = useState(\"\");\n  const [semSlug, setsemSlug] = useState(\"\");\n  const [subSlug, setsubSlug] = useState(\"\");\n\n  const [term_conut, set_term_count] = useState(0)\n  const [semCount, setsemCount] = useState(0);\n  const [divisionCount,set_divisionCount] = useState(0)\n  const [batchCount, setbatchCount] = useState(0);\n  \n    \n  const { state, dispatch: ctxDispatch } = useContext(Store);\n  const { accessToken , refreshToken , profileDetails, objectCount } = state  \n  const [division_slug, set_division_slug] = useState(\"\")\n  const [StoredTokens,CallAPI] = useAPI()\n  const [term_slug,set_term_slug] = useState(\"\")\n\n  useEffect(() => {               \n    if(profileDetails.obj.profile.role === \"admin\"){\n      getObjectCounts()\n    }\n  }, []);\n\n  const getObjectCounts = async () =>{\n    const header = {\n      \"Content-Type\":\"application/json\",        \n      'ngrok-skip-browser-warning':true\n    }\n    const axiosInstance = axios.create()\n    let endpoint = `/manage/get_object_counts`;let method='get';let headers = header;\n    let response_obj = await CallAPI(StoredTokens,axiosInstance,endpoint,method,headers)\n    if(response_obj.error == false){\n      let response = response_obj.response\n      ctxDispatch({ type: 'GET_OBJECTS', payload: response.data });\n    }else{  \n      alert(response_obj.errorMessage.message)\n    }\n  }\n  \n  const chageSteps = (currentStep) =>{\n      setsteps(currentStep)\n  }\n  // console.log(divisionCount)\n  const progressExample = [\n    { title: 'Terms', value: objectCount.terms, nextStep:'semester' },\n    { title: 'Semester', value: objectCount.semesters, nextStep:'semester' },\n    { title: 'divison', value: objectCount.divisons, nextStep:'subject' },\n    { title: 'Batches', value: objectCount.batches, nextStep:'batch'},\n  ]\n  // console.log(objectCount)\n  return (\n    <>\n      <Breadcrumbnav currentStep={steps} chageSteps={chageSteps}></Breadcrumbnav>\n      \n      <CCard className=\"mb-4\">\n        <CCardFooter>\n          <CRow xs={{ cols: 1 }} md={{ cols: 4 }} className=\"text-center\">\n            {progressExample.map((item, index) => (\n              <CCol className=\"mb-sm-2 mb-0\" key={index}>\n                <CButton style={{ backgroundColor: 'transparent', border: 'none',cursor:\"default\" }}>\n                  <div className=\"text-medium-emphasis\">{item.title}</div>\n                  <strong style={{ color: 'black' }}>\n                    {item.value} {item.percent}\n                  </strong>\n                </CButton>\n              </CCol>\n            ))}\n          </CRow>\n        </CCardFooter>\n      </CCard>      \n      {(() => {\n        \n        switch (steps) {\n\n          case 'term':\n            return <Terms chageSteps={chageSteps} set_term_slug={set_term_slug} set_term_count={set_term_count}></Terms>\n\n          case 'semester':\n            return <Validation chageSteps={chageSteps} term_slug={term_slug}  set_semester_slug={set_semester_slug} setsemCount={setsemCount}></Validation>\n            \n          case 'division':\n            return <FormControl chageSteps={chageSteps}  semester_slug={semester_slug} set_division_slug={set_division_slug} set_divisionCount={set_divisionCount}></FormControl>\n          case 'batch':\n            return <Select chageSteps={chageSteps} division_slug={division_slug} setsubSlug={setsubSlug} setBatchCout={setbatchCount}></Select>\n          default:\n            {/* console.log(steps) */}\n        }\n      })()}\n    </>\n  )\n}\n\nexport default Dashboard","import React from 'react'\nimport { useState, useEffect } from 'react'\nimport { useContext } from 'react'\nimport PropTypes from 'prop-types'\nimport axios from 'axios'\nimport { Store } from '../validation/store'\nimport {base_url} from 'src/base_url'\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CForm,\n  CFormInput,\n  CFormFeedback,\n  CFormLabel,\n  CRow,\n  CTable,\n  CTableBody,\n  CTableHead,\n  CTableHeaderCell,\n  CTableRow,\n  CFormSelect,\n  CTableDataCell\n} from '@coreui/react'\nimport expireToken from 'src/global_function/unauthorizedToken'\nimport { APIMiddleware } from 'src/global_function/GlobalFunctions'\nimport { useNavigate } from 'react-router-dom'\nimport { showAlert } from 'src/global_function/GlobalFunctions'\nimport useAPI from 'src/global_function/useApi'\n\nconst CustomStyles = (set_divisions, semester_slug,set_divisionCount) => {\n  const [StoredTokens,CallAPI] = useAPI()\n  const [validated, setValidated] = useState(false)\n  const [division_name, set_division_name] = useState(null)\n  const { state, dispatch: ctxDispatch } = useContext(Store);\n  const { accessToken,refreshToken, semesters , objectCount } = state\n  const [semCount, setsemCount] = useState(objectCount);\n  const navigate = useNavigate()\n  \n  const add_division = async (body) => {\n    if(division_name){\n      const header = {\n        \"Content-Type\":\"application/json\",      \n        'ngrok-skip-browser-warning':true\n      }\n      const axiosInstance = axios.create()\n      let endpoint = `/manage/add_division/`;let method='post';let headers = header;\n      let response_obj = await CallAPI(StoredTokens,axiosInstance,endpoint,method,headers,body,null)\n      if(response_obj.error == false){\n        let response = response_obj.response\n        let changeCount = {...objectCount}\n        // console.log(objectCount)\n        changeCount.divisons += 1  \n        // console.log(changeCount.divison)\n        ctxDispatch({ type: 'GET_OBJECTS', payload: changeCount });\n          set_divisions(prevArray => [...prevArray, response.data.data])\n          set_divisionCount(preValue => preValue + 1);\n        showAlert(\"success\",\"Semester Added successfully...!\")\n      }else{        \n        alert(response_obj.errorMessage.message)\n      }  \n    }\n     else{\n      alert(\"Please Enter The Valid Division Name\")\n     }\n  }\n\n  const handleSubmit = (event) => {\n    const form = event.currentTarget\n    if (form.checkValidity() === false) {\n      event.preventDefault()\n      event.stopPropagation()\n    }\n    event.preventDefault()\n    setValidated(true)\n    const body = {\n      division_name: division_name,\n      semester_slug: semester_slug,\n    }\n    add_division(body);\n    \n  }\n  return (\n    <CForm\n      className=\"row g-3 needs-validation\"\n      noValidate\n      validated={validated}\n      onSubmit={handleSubmit}\n    >\n      <CCol md={12}>\n        <CFormLabel htmlFor=\"validationCustom01\">Division Name</CFormLabel>\n        <CFormInput type=\"text\" id=\"validationCustom01\" onChange={e => set_division_name(e.target.value.toUpperCase())} required  maxLength={1}/>\n        <CFormFeedback valid>Looks good!</CFormFeedback>\n      </CCol>      \n      <CCol xs={12}>\n        <button className='btn btn-outline-dark form-control' type=\"submit\">\n          Submit form\n        </button>\n      </CCol>\n    </CForm>\n  )\n}\n\nconst FormControl = (props) => {\n  const { semester_slug ,chageSteps , set_division_slug , set_divisionCount } = props\n  const [divisions, set_divisions] = useState([]);\n  const { state, dispatch: ctxDispatch } = useContext(Store);\n  const { accessToken,refreshToken, semesters } = state\n  const navigate = useNavigate()\n  const load_division = async () => {    \n    const header = {\n      \"Content-Type\":\"application/json\",        \n      'ngrok-skip-browser-warning':true\n    }\n    const axiosInstance = axios.create()\n    let endpoint = `/manage/get_divisions`;let method='get';let headers = header;\n    let response_obj = await APIMiddleware(axiosInstance,endpoint,method,headers,null,{semester_slug: semester_slug })\n    if(response_obj.error == false){\n      let response = response_obj.response      \n        set_divisions(response.data.data)        \n    }else{        \n      alert(response_obj.errorMessage.message)\n    }\n  }\n\n  useEffect(() => {\n    load_division()\n  }, []);\n\n\n  return (\n    <>\n      <CRow>\n        <CCol xs={12}>\n          <CCard className=\"mb-3\">\n            <CCardHeader>\n              <strong>Divison</strong>\n            </CCardHeader>\n            <CCardBody>{CustomStyles(set_divisions, semester_slug,set_divisionCount)}</CCardBody>\n          </CCard>\n        </CCol>\n      </CRow>\n      <CRow>\n        <CCol xs>\n          <CCard className=\"mb-4\">\n            <CCardHeader>\n              <strong>Division History</strong>\n            </CCardHeader>\n            <CCardBody>\n              <CTable align=\"middle\" className=\"mb-0 border\" hover responsive>\n                <CTableHead color=\"light\">\n                  <CTableRow onClick={() => {chageSteps('batch');}} style={{textAlign:\"center\"}}>\n                    <CTableHeaderCell>Division Name</CTableHeaderCell>\n                  </CTableRow>\n                </CTableHead>\n                <CTableBody style={{textAlign:\"center\"}}>\n                  {divisions.map((item, index) => (\n                  \n                      <CTableRow key={index} onClick={() => {chageSteps('batch'); set_division_slug(item.slug);}} style={{cursor:\"pointer\"}}>\n                        <CTableDataCell>\n                          <div>{item.division_name}</div>\n                        </CTableDataCell>\n                         \n                        \n                      </CTableRow>\n                    \n                  ))}\n                </CTableBody>\n\n              </CTable>\n            </CCardBody>\n          </CCard>\n        </CCol>\n      </CRow>\n    </>\n  )\n}\n\nFormControl.propTypes = {\n  chageSteps:PropTypes.func.isRequired,\n  setsemSlug:PropTypes.func.isRequired,\n  batchSlug: PropTypes.string\n}\nexport default FormControl\n","import React from 'react'\nimport { useState , useContext,useEffect } from 'react'\nimport PropTypes from 'prop-types'\nimport { Store } from '../validation/store'\nimport axios from 'axios'\nimport {base_url} from 'src/base_url'\nimport expireToken from 'src/global_function/unauthorizedToken'\nimport { APIMiddleware } from 'src/global_function/GlobalFunctions'\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CForm,\n  CFormInput,\n  CFormFeedback,\n  CFormLabel,\n  CRow,\n  CTable,\n  CTableBody,\n  CTableHead,\n  CTableHeaderCell,\n  CTableRow,\n  CTableDataCell,\n} from '@coreui/react'\nimport { useNavigate } from 'react-router-dom'\nimport { showAlert } from 'src/global_function/GlobalFunctions'\nimport { batch } from 'react-redux'\nimport useAPI from 'src/global_function/useApi'\nconst CustomStyles = (division_slug,set_batches,setBatchCout) => {\n  const [validated, setValidated] = useState(false)\n  const [batch_name, set_batch_name] = useState(null);\n  \n  const { state, dispatch: ctxDispatch } = useContext(Store);\n  const { accessToken,refreshToken, objectCount } = state\n  const navigate = useNavigate()\n\n  //custom hook to call the API\n\n  const [StoredTokens,CallAPI] = useAPI()\n\n\n  const add_batch = async (body) => {\n    if(batch_name){\n\n    }\n    else{\n      alert(\"Please Enter The Valid Batch Name\")\n    }\n    const header = {\n      \"Content-Type\":\"application/json\",      \n      'ngrok-skip-browser-warning':true\n    }\n    const axiosInstance = axios.create()\n    let endpoint = `/manage/add_batch/`;let method='post';let headers = header;\n    let response_obj = await CallAPI(StoredTokens,axiosInstance,endpoint,method,headers,body,null)\n    if(response_obj.error == false){\n        let response = response_obj.response        \n        let changeSubjectCount = {...objectCount}\n        changeSubjectCount.batches += 1      \n        // console.log(changeSubjectCount)  \n        ctxDispatch({ type: 'GET_OBJECTS', payload: changeSubjectCount })\n        set_batches(prevArray => [...prevArray, response.data.data])\n        setBatchCout(preValue => preValue + 1);\n        showAlert(\"success\",\"Batch Added successfully...!\")\n      }else{     \n        alert(response_obj.errorMessage.message)     \n      }    \n  }\n  \n  const handleSubmit = (event) => {\n    const form = event.currentTarget\n    if (form.checkValidity() === false) {\n      event.preventDefault()\n      event.stopPropagation()\n    }\n    setValidated(true)\n    const body = {\n      division_slug:division_slug,\n      batch_name:batch_name,\n    }\n    event.preventDefault()\n    add_batch(body)\n    \n  }\n  return (\n    <CForm\n      className=\"row g-3 needs-validation\"\n      noValidate\n      validated={validated}\n      onSubmit={handleSubmit}\n    >\n      <CCol md={12}>\n        <CFormLabel htmlFor=\"validationCustom01\">Batch Name</CFormLabel>\n        <CFormInput type=\"text\" id=\"validationCustom01\" onChange={e => set_batch_name(e.target.value)} required />\n        <CFormFeedback valid>Looks good!</CFormFeedback>\n      </CCol>\n      <CCol xs={12}>\n        <button className='btn btn-outline-dark form-control' type=\"submit\">\n          Submit form\n        </button>\n      </CCol>\n    </CForm>\n  )\n}\n\nconst Select = (props) => {\n\n  const [StoredTokens, CallAPI] = useAPI()\n  const { state, dispatch: ctxDispatch } = useContext(Store);\n  const { accessToken,refreshToken, semesters } = state\n  const navigate = useNavigate()\n  const {division_slug , chageSteps,setBatchCout} = props\n  const [batches, set_batches] = useState([]);\n  \n  const load_batches = async () => {\n    const header = {\n      \"Content-Type\":\"application/json\",        \n      'ngrok-skip-browser-warning':true\n    }\n    const axiosInstance = axios.create()\n    let endpoint = `/manage/get_batches`;let method='get';let headers = header;\n    let response_obj = await APIMiddleware(axiosInstance,endpoint,method,headers,null,{ division_slug: division_slug })\n    if(response_obj.error == false){\n      let response = response_obj.response\n      set_batches(response.data.data)\n    }else{      \n      alert(response_obj.errorMessage.message)  \n    }\n  }\n\n  useEffect(() => {\n      load_batches()\n  }, []);\n  return (\n    <>\n      <CRow>\n        <CCol xs={12}>\n          <CCard className=\"mb-3\">\n            <CCardHeader>\n              <strong>Batches</strong>\n            </CCardHeader>\n            <CCardBody>{CustomStyles(division_slug,set_batches,setBatchCout)}</CCardBody>\n          </CCard>\n        </CCol>\n      </CRow>\n      <CRow>\n        <CCol xs>\n          <CCard className=\"mb-4\">\n            <CCardHeader>\n              <strong>Batch History</strong>\n            </CCardHeader>\n            <CCardBody>\n              <CTable align=\"middle\" className=\"mb-0 border\" hover responsive>\n                <CTableHead color=\"light\">\n                  <CTableRow className='text-center'>\n                    <CTableHeaderCell>Batch Name</CTableHeaderCell>\n                  </CTableRow>\n                </CTableHead>\n                <CTableBody>\n                  {batches.map((item, index) => (\n                    <CTableRow v-for=\"item in tableItems\" key={index}>\n                      <CTableDataCell>\n                        <div className='text-center'>{item.division.division_name} | {item.batch_name}</div>\n                      </CTableDataCell>\n                    </CTableRow>\n                  ))}\n                </CTableBody>\n              </CTable>\n            </CCardBody>\n          </CCard>\n        </CCol>\n      </CRow>\n    </>\n  )\n}\nSelect.prototype = {\n  chageSteps:PropTypes.func.isRequired,\n  semSlug: PropTypes.string\n}\nexport default Select\n","import React, { useState  ,Component } from 'react'\nimport { useEffect } from 'react'\nimport PropTypes from 'prop-types'\nimport axios from 'axios'\nimport { useContext } from 'react'\nimport { Navigate, useNavigate } from 'react-router-dom'\nimport { APIMiddleware } from 'src/global_function/GlobalFunctions'\nimport useAPI from 'src/global_function/useApi'\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CForm,\n  CFormInput,\n  CFormFeedback,\n  CFormLabel,\n  CRow,\n  CTable,\n  CTableBody,\n  CTableDataCell,\n  CTableHead,\n  CTableHeaderCell,\n  CTableRow,\n} from '@coreui/react'\nimport { Store } from '../validation/store'\nimport {base_url} from 'src/base_url'\nimport expireToken from 'src/global_function/unauthorizedToken'\nimport { showAlert } from 'src/global_function/GlobalFunctions'\n\nconst CustomStyles = (set_semester,setsemCount,term_slug) => {\n  \n  const { state, dispatch: ctxDispatch } = useContext(Store);\n  const { accessToken, refreshToken, batches, currentBatch, objectCount} = state\n  const [validated, setValidated] = useState(false)\n  const currentYear = new Date().getFullYear() \n  const [semester_no, set_semester_no] = useState(0)\n  const [Start, setStart] = useState(currentYear);\n  const EndYear = (parseInt(Start, 10) + 1).toString();\n  const navigate = useNavigate()\n  \n\n  // custom hook for api calling \n\n  const [StoredTokens,CallAPI] = useAPI()\n\n\n  \n  const addBatches = async(body) => {\n    if(semester_no != 0){\n      const header = {\n        \"Content-Type\":\"application/json\",      \n        'ngrok-skip-browser-warning':true\n      }\n      const axiosInstance = axios.create()\n      let endpoint = `/manage/add_semester/`;let method='post';let headers = header;\n      let response_obj = await CallAPI(StoredTokens,axiosInstance,endpoint,method,headers,body,null)\n      if(response_obj.error == false){\n          let response = response_obj.response\n          let batchCount = {...objectCount}\n          batchCount.semesters += 1        \n          ctxDispatch({ type: 'GET_OBJECTS', payload: batchCount });\n          set_semester(prevArray => [...prevArray, response.data.data]);\n          setsemCount(preValue => preValue + 1);\n        }else{       \n          alert(response_obj.errorMessage.message)   \n        }\n    }\n    else{\n      alert(\"Please Enter the Valid Semester Number\")\n    }\n    \n  }\n\n  const handleSubmit = (event) => {\n    const form = event.currentTarget\n    event.preventDefault()\n    if (form.checkValidity() === false) {\n      event.preventDefault()\n      event.stopPropagation()\n      alert('Please enter the valid semester details')\n      return\n    }\n    setValidated(true)\n    const body = {\n      \"term_slug\":term_slug,\n      \"no\": semester_no,\n      \n    }\n    addBatches(body)\n    \n  }\n  return (\n    <>\n    <CForm\n      className=\"row g-3 needs-validation\"\n      noValidate\n      validated={validated}\n      onSubmit={handleSubmit}\n    >\n      <CCol md={12}>\n        <CFormLabel htmlFor=\"validationCustom01\">Semester Number</CFormLabel>\n        <CFormInput type=\"number\" min={1} max={8} step=\"1\"   id=\"validationCustom01\" onChange={e => set_semester_no(e.target.value)} required maxLength={1} />\n        <CFormFeedback valid>Looks good!</CFormFeedback>\n      </CCol>\n      <CCol xs={12}>\n        <button className='btn btn-outline-dark form-control' type=\"submit\" >\n          Submit form\n        </button>\n      </CCol>\n    </CForm>\n    </>\n  )\n}\n\nconst Validation = (props) => {\n  const {chageSteps} = props\n  const {set_semester_slug} = props\n  const {setsemCount} = props\n  const {term_slug} = props\n  const { state, dispatch: ctxDispatch } = useContext(Store);\n  const { accessToken, refreshToken, batches, currentBatch} = state\n  const navigate = useNavigate()\n  const [semester, set_semester] = useState([]);\n  const [StoredTokens,CallAPI] = useAPI()\n  // function for the load batches\n  \nconst loadBatches = async() => {\n    const header = {\n      \"Content-Type\":\"application/json\",        \n      'ngrok-skip-browser-warning':true\n    }\n    const axiosInstance = axios.create()\n    let endpoint = `/manage/get_semesters`;let method='get';let headers = header;\n    let response_obj = await CallAPI(StoredTokens,axiosInstance,endpoint,method,headers,null,{\"term_slug\":term_slug})    \n    if(response_obj.error == false){\n      let response = response_obj.response\n      \n      set_semester(response.data.data)\n    }else{        \n      alert(response_obj.errorMessage.message)\n    }    \n  }\n\n  useEffect(() => {\n    if(accessToken){\n      loadBatches()\n    }\n  }, []);\n\n  // useEffect(() => {\n  //   setBatches(batches)\n    \n  // }, [batches]);\n  \n  \n  return (\n    <>\n      <CRow>\n        <CCol xs={12}>\n          <CCard className=\"mb-3\">\n            <CCardHeader>\n              <strong>Semesters</strong>\n            </CCardHeader>\n            <CCardBody>{CustomStyles(set_semester,setsemCount,term_slug)}</CCardBody>\n          </CCard>\n        </CCol>\n      </CRow>\n      <CRow>\n        <CCol xs>\n          <CCard className=\"mb-4\">\n            <CCardHeader>\n              <strong>Semester History</strong>\n            </CCardHeader>\n            <CCardBody>\n              <CTable align=\"middle\" className=\"mb-0 border text-center\" hover responsive>\n                <CTableHead color=\"light\">\n                  <CTableRow>\n                    <CTableHeaderCell>Semester No</CTableHeaderCell>\n                    <CTableHeaderCell>Activation Status</CTableHeaderCell>\n                  </CTableRow>\n                </CTableHead>\n                <CTableBody>\n                  {semester.map((item, index) => (\n                    <CTableRow v-for=\"item in tableItems\" key={index} onClick={() => {chageSteps('division'); set_semester_slug(item.slug);}} style={{cursor:\"grab\"}}>\n                      <CTableDataCell>\n                        <div>{item.no}</div>   \n                      </CTableDataCell>\n                      \n                      <CTableDataCell>\n                        <div className='d-flex justify-content-center'>\n                          {item.status ? (<div><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" className=\"bi bi-check-circle-fill\" viewBox=\"0 0 16 16\">\n                            <path d=\"M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zm-3.97-3.03a.75.75 0 0 0-1.08.022L7.477 9.417 5.384 7.323a.75.75 0 0 0-1.06 1.06L6.97 11.03a.75.75 0 0 0 1.079-.02l3.992-4.99a.75.75 0 0 0-.01-1.05z\" />\n                          </svg>{}\n                          </div>):<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" className=\"bi bi-x-circle-fill\" viewBox=\"0 0 16 16\">\n                      <path d=\"M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zM5.354 4.646a.5.5 0 1 0-.708.708L7.293 8l-2.647 2.646a.5.5 0 0 0 .708.708L8 8.707l2.646 2.647a.5.5 0 0 0 .708-.708L8.707 8l2.647-2.646a.5.5 0 0 0-.708-.708L8 7.293 5.354 4.646z\"/>\n                          </svg>}\n                        </div>   \n                      </CTableDataCell> \n                    </CTableRow>\n                  ))}\n                </CTableBody>\n              </CTable>\n            </CCardBody>\n          </CCard>\n        </CCol>\n      </CRow>\n      \n    </>\n  )\n}\n\nValidation.propTypes = {\n  chageSteps: PropTypes.func.isRequired,\n  set_semester_slug: PropTypes.func.isRequired,\n  setBatchCout:PropTypes.func.isRequired\n}\n\nexport default Validation\n"],"names":["props","state","dispatch","ctxDispatch","useContext","Store","objectCount","profileDetails","currentStep","chageSteps","_jsx","_Fragment","children","CRow","className","CCol","xl","CCard","_jsxs","CCardBody","style","display","justifyContent","flexDirection","margin","marginTop","xmlns","width","height","fill","viewBox","d","term","semester","division","batch","map","items","keys","cursor","onClick","obj","branch","branch_name","CustomStyles","set_term","set_term_count","accessToken","refreshToken","batches","currentBatch","validated","setValidated","useState","currentYear","Date","getFullYear","semester_no","set_semester_no","Start","setStart","termType","setTermType","EndYear","parseInt","toString","StoredTokens","CallAPI","useNavigate","useAPI","useEffect","console","log","CForm","noValidate","onSubmit","event","form","currentTarget","preventDefault","checkValidity","stopPropagation","async","axiosInstance","axios","create","headers","response_obj","body","error","response","batchCount","terms","type","payload","prevArray","data","preValue","showAlert","alert","errorMessage","message","addBatches","start_year","end_year","md","CFormLabel","htmlFor","CFormInput","min","max","step","value","id","onChange","e","target","required","maxLength","CFormFeedback","valid","readOnly","name","defaultChecked","xs","set_term_slug","set_semester","load_term","CCardHeader","length","CTable","align","hover","responsive","CTableHead","color","CTableRow","CTableHeaderCell","CTableBody","item","index","slug","CTableDataCell","status","Dashboard","steps","setsteps","semester_slug","set_semester_slug","semSlug","setsemSlug","subSlug","setsubSlug","term_conut","semCount","setsemCount","divisionCount","set_divisionCount","setbatchCount","division_slug","set_division_slug","term_slug","profile","role","getObjectCounts","progressExample","title","nextStep","semesters","divisons","Breadcrumbnav","CCardFooter","cols","CButton","backgroundColor","border","percent","Terms","Validation","FormControl","Select","setBatchCout","set_divisions","division_name","set_division_name","header","endpoint","method","changeCount","add_division","toUpperCase","divisions","APIMiddleware","load_division","textAlign","set_batches","batch_name","set_batch_name","changeSubjectCount","add_batch","load_batches","prototype","PropTypes","isRequired","loadBatches","no"],"sourceRoot":""}