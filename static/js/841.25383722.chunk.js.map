{"version":3,"file":"static/js/841.25383722.chunk.js","mappings":"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","sources":["views/teacher/Teacherview.js"],"sourcesContent":["import React from 'react'\n\nimport { useState } from 'react'\nimport {\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CRow,\n  CToast,\n  CToastHeader,\n  CToastBody,\n  CAlert,\n} from '@coreui/react'\nimport axios from 'axios'\nimport { useEffect } from 'react'\nimport useAPI from 'src/global_function/useApi'\nimport { useNavigate } from 'react-router-dom'\nimport moment from 'moment';\n\n\nexport default function Teacherview() {\n\n  // usestate to opne and close the model  \n  const navigation = useNavigate()\n\n  const [StoredTokens, CallAPI] = useAPI()\n  const [TimeTables, setTimeTables] = useState(null)\n  const load_teacher_timetable = async () => {\n    const headers = {\n      'Content-Type': 'application/json',\n      'ngrok-skip-browser-warning': true,\n    }\n    const axiosInstance = axios.create()\n    const response_obj = await CallAPI(\n      StoredTokens,\n      axiosInstance,\n      '/manage/get_timetable_for_teacher',\n      'get',\n      headers,\n      null,\n      null,\n    )\n    if (response_obj.error === false) {\n      const response = response_obj.response\n      console.log(response.data.data)\n      setTimeTables(response.data.data)\n    }\n    else {\n      alert(response_obj.errorMessage.message)\n    }\n  }\n\n\n  const create_Session = async (lecture_slug) => {\n    navigation(`/teacher/session?slug=${lecture_slug}`)\n  }\n\n  useEffect(() => {\n    load_teacher_timetable()\n  }, [])\n\n  return (\n    <>\n      <CRow className=\"mb-3\">\n        <CCol>\n          {\n            TimeTables && TimeTables.map((branch, index) => {\n\n              return branch.semesters.map((semester, index) => {\n\n                return (\n                  <div key={index}>\n                    <CAlert\n                      className=\"m-0 rounded-0 w-100 p-2 d-flex justify-content-between align-items-center mb-2\"\n                      color=\"primary\"\n                      visible={true}\n                    >\n                      {branch.branch_name}\n                    </CAlert>\n                    {semester.divisions.map((division, index) => {\n                      console.log(division)\n                      return division.timetable.schedule.lectures.length > 0 ? (\n                        division.timetable.schedule.lectures.map((lectures, index) => {\n                          return (\n                            <div key={index}>\n                              <CRow className=\"flex-column\" style={{ padding: '0' }}>\n                                <CCol className=\"d-flex align-items-center flex-column\" key={index}>\n                                  <div className=\"w-100 rounded-0 border-0\">\n                                    <div className=\"\" style={{ paddingBottom: \"0px\" }}>\n                                      <div className=\"justify-content-center w-100\">\n                                        <CToast\n                                          key={index}\n                                          autohide={false}\n                                          visible={true}\n                                          className={`mb-3 mt-3 w-100 ${lectures.is_proxy ? \"border-red-700\" : \"\"}`}\n                                        >\n                                          <CToastHeader className=\"d-flex flex-wrap justify-content-sm-between justify-content-center mx-2\">\n                                            {lectures.is_proxy ? (\n                                              <div className={`w-100 fw-bold text-center`}>\n                                                <div>\n                                                  <small className='mx-2 my-2'>\n\n                                                    Semester: {semester.no} | Division : {division.division_name}\n                                                  </small>\n                                                </div>\n                                                <div>\n                                                  <small className='mx-2 my-2'>\n                                                    {lectures.is_proxy ? \"Proxied from \" : \"\"}\n                                                    {lectures.link ? lectures.link.from_lecture.subject.subject_name : \"\"}\n                                                  </small>\n                                                </div>\n\n                                                <hr className='w-100 my-2'></hr>\n\n                                              </div>\n                                            ) : (null)}\n                                            <div className=\"fw-bold mx-2\">\n                                              {lectures.subject.subject_name.charAt(0).toUpperCase() + lectures.subject.subject_name.slice(1)}\n                                            </div>\n                                            <small className='mx-2 my-2'>\n                                              {lectures.type.toUpperCase()}\n                                            </small>\n                                            <small className='mx-2 my-2'>\n                                              {moment(lectures.start_time.slice(0, 5), 'HH:mm').format('h:mm A')} |{' '}\n                                              {moment(lectures.end_time.slice(0, 5), 'HH:mm').format('h:mm A')}\n                                            </small>\n                                          </CToastHeader>\n                                          <CToastBody className=\"d-flex flex-row flex-wrap justify-content-center\">\n                                            <CRow className='w-100 align-items-center'>\n                                              <CCol className='text-sm-start text-center col-12 col-sm-4 col-lg-4 col-md-4'>\n                                                Prof - {lectures.teacher.charAt(0).toUpperCase() + lectures.teacher.slice(1)}\n                                              </CCol>\n                                              <CCol className=' text-sm-end col-12 col-sm-4 col-lg-4 col-md-4'>\n                                                <div className='w-100 text-center'>\n                                                  {' '}\n                                                  {lectures.batches.map((batch, index) => (\n                                                    <span key={index}>\n                                                      {batch.batch_name.toUpperCase()}\n                                                      {index < lectures.batches.length - 1 &&\n                                                        ', '}\n                                                    </span>\n                                                  ))}{' '}\n                                                </div>\n                                              </CCol>\n                                              <CCol className='text-sm-end text-center col-12 col-sm-4 col-lg-4 col-md-4'>\n                                                {lectures.classroom.class_name.charAt(0).toUpperCase() + lectures.classroom.class_name.slice(1)}\n                                                {' '}\n                                              </CCol>\n                                            </CRow>\n\n                                            <div className='d-flex w-100'>\n                                              <div className='w-100'>\n                                                {lectures.session.active === \"pre\" && <button className='btn btn-outline-primary w-100 mt-3' value={lectures.slug} onClick={(e) => create_Session(e.target.value)}>Start Session</button>}\n                                                {lectures.session.active === \"ongoing\" && <button className='btn btn-outline-primary w-100 mt-3' value={lectures.slug} onClick={(e) => create_Session(e.target.value)}>Ongoing Session</button>}\n                                                {lectures.session.active === \"post\" && <button disabled={true} className='btn btn-outline-secondary w-100 mt-3'>Session Ended</button>}\n                                              </div>\n                                            </div>\n                                            <div>\n                                            </div>\n                                          </CToastBody>\n                                        </CToast>\n                                      </div>\n                                    </div>\n                                  </div>\n                                </CCol>\n                              </CRow>\n                            </div>\n                          )\n                        })\n                      ) : (null)\n                    })}\n                  </div>\n                )\n              })\n            })\n          }\n\n        </CCol>\n\n      </CRow>\n    </>\n  )\n}\n"],"names":["Teacherview","navigation","useNavigate","StoredTokens","CallAPI","useAPI","TimeTables","setTimeTables","useState","create_Session","async","concat","lecture_slug","useEffect","axiosInstance","axios","create","response_obj","error","response","console","log","data","alert","errorMessage","message","load_teacher_timetable","_jsx","_Fragment","children","CRow","className","CCol","map","branch","index","semesters","semester","_jsxs","CAlert","color","visible","branch_name","divisions","division","timetable","schedule","lectures","length","style","padding","paddingBottom","CToast","autohide","is_proxy","CToastHeader","no","division_name","link","from_lecture","subject","subject_name","charAt","toUpperCase","slice","type","moment","start_time","format","end_time","CToastBody","teacher","batches","batch","batch_name","classroom","class_name","session","active","value","slug","onClick","e","target","disabled"],"sourceRoot":""}