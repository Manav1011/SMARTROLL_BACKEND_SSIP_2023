{"version":3,"file":"static/js/4085.1c1acacb.chunk.js","mappings":"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","sources":["views/forms/input-group/InputGroup.js"],"sourcesContent":["import React from 'react'\nimport { useState , useContext,useEffect } from 'react'\nimport PropTypes from 'prop-types'\nimport { Store } from '../validation/store'\nimport axios from 'axios'\nimport base_url from 'src/base_url'\nimport expireToken from 'src/global_function/unauthorizedToken'\nimport { APIMiddleware } from 'src/global_function/GlobalFunctions'\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CForm,\n  CFormInput,\n  CFormFeedback,\n  CFormLabel,\n  CRow,\n  CTable,\n  CTableBody,\n  CTableHead,\n  CTableHeaderCell,\n  CTableRow,\n  CTableDataCell,\n} from '@coreui/react'\nimport { useNavigate } from 'react-router-dom'\nconst CustomStyles = (semSlug,setsubjects) => {\n  const [validated, setValidated] = useState(false)\n  const [SName, setSName] = useState(\"\");\n  const [Scode, setScode] = useState(\"\");\n  const [Scredit, setScredit] = useState(\"\");\n  const { state, dispatch: ctxDispatch } = useContext(Store);\n  const { accessToken,refreshToken, objectCount } = state\n  const navigate = useNavigate()\n  const add_subject = async (body) => {\n    const header = {\n      \"Content-Type\":\"application/json\",      \n      'ngrok-skip-browser-warning':true\n    }\n    const axiosInstance = axios.create()\n    let endpoint = `/manage/add_subjects`;let method='post';let headers = header;\n    let response_obj = await APIMiddleware(axiosInstance,endpoint,method,headers,body,null)\n    if(response_obj.error == false){\n        let response = response_obj.response\n        let changeSubjectCount = {...objectCount}\n        changeSubjectCount.subjects += 1\n        console.log(changeSubjectCount);\n        ctxDispatch({ type: 'GET_OBJECTS', payload: changeSubjectCount })\n        setsubjects(prevArray => [...prevArray, response.data.subject])\n      }else{  \n        console.log(response_obj.error)\n      }    \n  }\n  \n  const handleSubmit = (event) => {\n    const form = event.currentTarget\n    if (form.checkValidity() === false) {\n      event.preventDefault()\n      event.stopPropagation()\n    }\n    console.log(SName)\n    console.log(Scode)\n    console.log(Scredit);\n    setValidated(true)\n    const body = {\n      semester_slug:semSlug,\n      subject_name:SName,\n      subject_code:Scode,\n      subject_credit:Scredit\n    }\n    event.preventDefault()\n    add_subject(body)\n  }\n  return (\n    <CForm\n      className=\"row g-3 needs-validation\"\n      noValidate\n      validated={validated}\n      onSubmit={handleSubmit}\n    >\n      <CCol md={12}>\n        <CFormLabel htmlFor=\"validationCustom01\">Subject Name</CFormLabel>\n        <CFormInput type=\"text\" id=\"validationCustom01\" onChange={e => setSName(e.target.value)} required />\n        <CFormFeedback valid>Looks good!</CFormFeedback>\n      </CCol>\n      <CCol md={6}>\n        <CFormLabel htmlFor=\"validationCustom01\">Subject Code</CFormLabel>\n        <CFormInput type=\"text\" id=\"validationCustom02\" onChange={e => setScode(e.target.value)} required />\n        <CFormFeedback valid>Looks good!</CFormFeedback>\n      </CCol>\n      <CCol md={6}>\n        <CFormLabel htmlFor=\"validationCustom02\">Subject Credit</CFormLabel>\n        <CFormInput type=\"text\" id=\"validationCustom02\" onChange={e => setScredit(e.target.value)} required />\n        <CFormFeedback valid>Looks good!</CFormFeedback>\n      </CCol>\n      <CCol xs={12}>\n        <button className='btn btn-outline-dark form-control' type=\"submit\">\n          Submit form\n        </button>\n      </CCol>\n    </CForm>\n  )\n}\n\nconst Select = (props) => {\n\n  const { state, dispatch: ctxDispatch } = useContext(Store);\n  const { accessToken,refreshToken, semesters } = state\n  const navigate = useNavigate()\n  const {semSlug , chageSteps} = props\n  console.log(semSlug);\n  const [subjects, setsubjects] = useState([]);\n  \n  const load_subjects = async () => {\n    const header = {\n      \"Content-Type\":\"application/json\",        \n      'ngrok-skip-browser-warning':true\n    }\n    const axiosInstance = axios.create()\n    let endpoint = `/manage/get_subjects`;let method='get';let headers = header;\n    let response_obj = await APIMiddleware(axiosInstance,endpoint,method,headers,null,{ semester_slug: semSlug })\n    if(response_obj.error == false){\n      let response = response_obj.response\n      setsubjects(response.data.data)\n    }else{  \n      console.log(response_obj.error)\n    }\n  }\n\n  useEffect(() => {\n      load_subjects()\n  }, []);\n  return (\n    <>\n      <CRow>\n        <CCol xs={12}>\n          <CCard className=\"mb-3\">\n            <CCardHeader>\n              <strong>Subjects</strong>\n            </CCardHeader>\n            <CCardBody>{CustomStyles(semSlug,setsubjects)}</CCardBody>\n          </CCard>\n        </CCol>\n      </CRow>\n      <CRow>\n        <CCol xs>\n          <CCard className=\"mb-4\">\n            <CCardHeader>\n              <strong>Subjects History</strong>\n            </CCardHeader>\n            <CCardBody>\n              <CTable align=\"middle\" className=\"mb-0 border\" hover responsive>\n                <CTableHead color=\"light\">\n                  <CTableRow>\n                    <CTableHeaderCell>Subject Name</CTableHeaderCell>\n                    <CTableHeaderCell>Subject Code</CTableHeaderCell>\n                    <CTableHeaderCell>Subject Credit</CTableHeaderCell>\n                  </CTableRow>\n                </CTableHead>\n                <CTableBody>\n                  {subjects.map((item, index) => (\n                    <CTableRow v-for=\"item in tableItems\" key={index}>\n                      <CTableDataCell>\n                        <div>{item.subject_name}</div>\n                      </CTableDataCell>\n                      <CTableDataCell>\n                        <div>{item.code}</div>\n                      </CTableDataCell>\n                      <CTableDataCell>\n                        <div>{item.credit}</div>\n                      </CTableDataCell>\n                    </CTableRow>\n                  ))}\n                </CTableBody>\n              </CTable>\n            </CCardBody>\n          </CCard>\n        </CCol>\n      </CRow>\n    </>\n  )\n}\nSelect.prototype = {\n  chageSteps:PropTypes.func.isRequired,\n  semSlug: PropTypes.string\n}\nexport default Select\n"],"names":["CustomStyles","semSlug","setsubjects","validated","setValidated","useState","SName","setSName","Scode","setScode","Scredit","setScredit","state","dispatch","ctxDispatch","useContext","Store","accessToken","refreshToken","objectCount","useNavigate","_jsxs","CForm","className","noValidate","onSubmit","event","currentTarget","checkValidity","preventDefault","stopPropagation","console","log","body","semester_slug","subject_name","subject_code","subject_credit","async","axiosInstance","axios","create","headers","response_obj","APIMiddleware","error","response","changeSubjectCount","subjects","type","payload","prevArray","data","subject","add_subject","children","CCol","md","_jsx","CFormLabel","htmlFor","CFormInput","id","onChange","e","target","value","required","CFormFeedback","valid","xs","Select","props","semesters","chageSteps","useEffect","load_subjects","_Fragment","CRow","CCard","CCardHeader","CCardBody","CTable","align","hover","responsive","CTableHead","color","CTableRow","CTableHeaderCell","CTableBody","map","item","index","CTableDataCell","code","credit","prototype","PropTypes","isRequired"],"sourceRoot":""}