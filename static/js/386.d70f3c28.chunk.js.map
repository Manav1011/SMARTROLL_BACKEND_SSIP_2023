{"version":3,"file":"static/js/386.d70f3c28.chunk.js","mappings":"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","sources":["views/forms/validation/Validation.js"],"sourcesContent":["import React, { useState  ,Component } from 'react'\nimport { useEffect } from 'react'\nimport PropTypes from 'prop-types'\nimport axios from 'axios'\nimport { useContext } from 'react'\nimport { Navigate, useNavigate } from 'react-router-dom'\nimport { APIMiddleware } from 'src/global_function/GlobalFunctions'\nimport useAPI from 'src/global_function/useApi'\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CForm,\n  CFormInput,\n  CFormFeedback,\n  CFormLabel,\n  CRow,\n  CTable,\n  CTableBody,\n  CTableDataCell,\n  CTableHead,\n  CTableHeaderCell,\n  CTableRow,\n} from '@coreui/react'\nimport { Store } from '../validation/store'\nimport {base_url} from 'src/base_url'\nimport expireToken from 'src/global_function/unauthorizedToken'\nimport { showAlert } from 'src/global_function/GlobalFunctions'\n\nconst CustomStyles = (set_semester,setBatchCout,term_slug) => {\n  \n  const { state, dispatch: ctxDispatch } = useContext(Store);\n  const { accessToken, refreshToken, batches, currentBatch, objectCount} = state\n  const [validated, setValidated] = useState(false)\n  const currentYear = new Date().getFullYear() \n  const [semester_no, set_semester_no] = useState(\"\")\n  const [Start, setStart] = useState(currentYear);\n  const EndYear = (parseInt(Start, 10) + 1).toString();\n  const navigate = useNavigate()\n  \n\n  // custom hook for api calling \n\n  const [StoredTokens,CallAPI] = useAPI()\n\n\n  \n  const addBatches = async(body) => {\n    const header = {\n      \"Content-Type\":\"application/json\",      \n      'ngrok-skip-browser-warning':true\n    }\n    const axiosInstance = axios.create()\n    let endpoint = `/manage/add_semester/`;let method='post';let headers = header;\n    let response_obj = await CallAPI(StoredTokens,axiosInstance,endpoint,method,headers,body,null)\n    if(response_obj.error == false){\n        let response = response_obj.response\n        let batchCount = {...objectCount}\n        batchCount.semesters += 1        \n        ctxDispatch({ type: 'GET_OBJECTS', payload: batchCount });\n        set_semester(prevArray => [...prevArray, response.data.data]);\n        setBatchCout(preValue => preValue + 1);\n      }else{       \n        alert(response_obj.errorMessage.message)   \n      }\n  }\n\n  const handleSubmit = (event) => {\n    const form = event.currentTarget\n    event.preventDefault()\n    if (form.checkValidity() === false) {\n      event.preventDefault()\n      event.stopPropagation()\n    }\n    setValidated(true)\n    const body = {\n      \"term_slug\":term_slug,\n      \"no\": semester_no,\n      \n    }\n    addBatches(body)\n    showAlert(\"success\",\"Bactch Added successfully...!\")\n    \n  }\n  return (\n    <>\n    <CForm\n      className=\"row g-3 needs-validation\"\n      noValidate\n      validated={validated}\n      onSubmit={handleSubmit}\n    >\n      <CCol md={12}>\n        <CFormLabel htmlFor=\"validationCustom01\">Semester Number</CFormLabel>\n        <CFormInput type=\"number\" min={1} max={8} step=\"1\"   id=\"validationCustom01\" onChange={e => set_semester_no(e.target.value)} required maxLength={1} />\n        <CFormFeedback valid>Looks good!</CFormFeedback>\n      </CCol>\n      <CCol xs={12}>\n        <button className='btn btn-outline-dark form-control' type=\"submit\" >\n          Submit form\n        </button>\n      </CCol>\n    </CForm>\n    </>\n  )\n}\n\nconst Validation = (props) => {\n  const {chageSteps} = props\n  const {set_semester_slug} = props\n  const {setBatchCout} = props\n  const {term_slug} = props\n  const { state, dispatch: ctxDispatch } = useContext(Store);\n  const { accessToken, refreshToken, batches, currentBatch} = state\n  const navigate = useNavigate()\n  const [semester, set_semester] = useState([]);\n  const [StoredTokens,CallAPI] = useAPI()\n  // function for the load batches\n  \nconst loadBatches = async() => {\n    const header = {\n      \"Content-Type\":\"application/json\",        \n      'ngrok-skip-browser-warning':true\n    }\n    const axiosInstance = axios.create()\n    let endpoint = `/manage/get_semesters`;let method='get';let headers = header;\n    let response_obj = await CallAPI(StoredTokens,axiosInstance,endpoint,method,headers,null,{\"term_slug\":term_slug})    \n    if(response_obj.error == false){\n      let response = response_obj.response\n      \n      set_semester(response.data.data)\n    }else{        \n      alert(response_obj.errorMessage.message)\n    }    \n  }\n\n  useEffect(() => {\n    if(accessToken){\n      loadBatches()\n    }\n  }, []);\n\n  // useEffect(() => {\n  //   setBatches(batches)\n    \n  // }, [batches]);\n  \n  \n  return (\n    <>\n      <CRow>\n        <CCol xs={12}>\n          <CCard className=\"mb-3\">\n            <CCardHeader>\n              <strong>Semesters</strong>\n            </CCardHeader>\n            <CCardBody>{CustomStyles(set_semester,setBatchCout,term_slug)}</CCardBody>\n          </CCard>\n        </CCol>\n      </CRow>\n      <CRow>\n        <CCol xs>\n          <CCard className=\"mb-4\">\n            <CCardHeader>\n              <strong>Semester History</strong>\n            </CCardHeader>\n            <CCardBody>\n              <CTable align=\"middle\" className=\"mb-0 border text-center\" hover responsive>\n                <CTableHead color=\"light\">\n                  <CTableRow>\n                    <CTableHeaderCell>Semester No</CTableHeaderCell>\n                    <CTableHeaderCell>Activation Status</CTableHeaderCell>\n                  </CTableRow>\n                </CTableHead>\n                <CTableBody>\n                  {semester.map((item, index) => (\n                    <CTableRow v-for=\"item in tableItems\" key={index} onClick={() => {chageSteps('division'); set_semester_slug(item.slug);}}>\n                      <CTableDataCell>\n                        <div>{item.no}</div>   \n                      </CTableDataCell>\n                      \n                      <CTableDataCell>\n                        <div>\n                          {item.status ? (<div><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" className=\"bi bi-check-circle-fill\" viewBox=\"0 0 16 16\">\n                            <path d=\"M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zm-3.97-3.03a.75.75 0 0 0-1.08.022L7.477 9.417 5.384 7.323a.75.75 0 0 0-1.06 1.06L6.97 11.03a.75.75 0 0 0 1.079-.02l3.992-4.99a.75.75 0 0 0-.01-1.05z\" />\n                          </svg>{}\n                          </div>):<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" className=\"bi bi-x-circle-fill\" viewBox=\"0 0 16 16\">\n                      <path d=\"M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zM5.354 4.646a.5.5 0 1 0-.708.708L7.293 8l-2.647 2.646a.5.5 0 0 0 .708.708L8 8.707l2.646 2.647a.5.5 0 0 0 .708-.708L8.707 8l2.647-2.646a.5.5 0 0 0-.708-.708L8 7.293 5.354 4.646z\"/>\n                          </svg>}\n                        </div>   \n                      </CTableDataCell> \n                    </CTableRow>\n                  ))}\n                </CTableBody>\n              </CTable>\n            </CCardBody>\n          </CCard>\n        </CCol>\n      </CRow>\n      \n    </>\n  )\n}\n\nValidation.propTypes = {\n  chageSteps: PropTypes.func.isRequired,\n  set_semester_slug: PropTypes.func.isRequired,\n  setBatchCout:PropTypes.func.isRequired\n}\n\nexport default Validation\n"],"names":["CustomStyles","set_semester","setBatchCout","term_slug","state","dispatch","ctxDispatch","useContext","Store","accessToken","refreshToken","batches","currentBatch","objectCount","validated","setValidated","useState","currentYear","Date","getFullYear","semester_no","set_semester_no","Start","setStart","StoredTokens","CallAPI","parseInt","toString","useNavigate","useAPI","_jsx","_Fragment","children","_jsxs","CForm","className","noValidate","onSubmit","event","form","currentTarget","preventDefault","checkValidity","stopPropagation","async","axiosInstance","axios","create","headers","response_obj","body","error","response","batchCount","semesters","type","payload","prevArray","data","preValue","alert","errorMessage","message","addBatches","showAlert","CCol","md","CFormLabel","htmlFor","CFormInput","min","max","step","id","onChange","e","target","value","required","maxLength","CFormFeedback","valid","xs","props","chageSteps","set_semester_slug","semester","useEffect","loadBatches","CRow","CCard","CCardHeader","CCardBody","CTable","align","hover","responsive","CTableHead","color","CTableRow","CTableHeaderCell","CTableBody","map","item","index","onClick","slug","CTableDataCell","no","status","xmlns","width","height","fill","viewBox","d"],"sourceRoot":""}