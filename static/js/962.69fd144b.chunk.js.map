{"version":3,"file":"static/js/962.69fd144b.chunk.js","mappings":"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","sources":["views/teacher/ManageSubjects.js","views/teacher/Teacher.js"],"sourcesContent":["import React, { useEffect, useState, useContext} from 'react'\nimport { Store } from '../forms/validation/store'\nimport axios from 'axios'\nimport {base_url} from 'src/base_url'\nimport expireToken from 'src/global_function/unauthorizedToken'\nimport { APIMiddleware } from 'src/global_function/GlobalFunctions'\nimport { showAlert } from 'src/global_function/GlobalFunctions'\nimport {\n    COffcanvas,\n    COffcanvasHeader,\n    COffcanvasTitle,    \n    COffcanvasBody,       \n    CCard,\n    CCardBody,\n    CCardHeader,\n    CCol,    \n    CRow,\n    CTable,\n    CTableBody,\n    CTableHead,\n    CTableHeaderCell,\n    CTableRow,\n    CFormCheck,\n    CTableDataCell,\n    CToast,\n    CToastHeader,\n    CToastBody\n  } from '@coreui/react'\nimport { useNavigate } from 'react-router-dom'\nfunction ManageSubjects({visible,setVisible,SelectedTeacher}) {           \n    const { state, dispatch: ctxDispatch } = useContext(Store);\n    const { accessToken,refreshToken,currentBatch} = state                \n    const [subjectsToRender,setSubjectsToRender] = useState([])    \n    const navigate = useNavigate()\n    const load_subjects_of_current_batch = async () =>{        \n        const header = {\n          \"Content-Type\":\"application/json\",        \n          'ngrok-skip-browser-warning':true\n        }\n        const axiosInstance = axios.create()\n        let endpoint = `/manage/get_subjects_of_current_batch`;let method='get';let headers = header;\n        let response_obj = await APIMiddleware(axiosInstance,endpoint,method,headers,null,{batch_slug:currentBatch.slug,teacher_id:SelectedTeacher.id})\n        if(response_obj.error == false){\n          let response = response_obj.response\n          setSubjectsToRender(response.data.data)\n        }else{              \n        }        \n      }\n      let checkedSubjects = subjectsToRender\n      const subjectSelectionChanged = (value,obj) => {\n        checkedSubjects.map((item) => {\n            if(item == obj){\n                item.selected = value                \n            }            \n        })\n      }    \n\n      const add_subject_to_teacher_api = async(body)=>{\n        const header = {\n          \"Content-Type\":\"application/json\",      \n          'ngrok-skip-browser-warning':true\n        }\n        const axiosInstance = axios.create()\n        let endpoint = `/manage/add_subjects_to_teacher`;let method='post';let headers = header;\n        let response_obj = await APIMiddleware(axiosInstance,endpoint,method,headers,body,null)\n        if(response_obj.error == false){\n          let response = response_obj.response\n          setVisible(false)          \n        }else{            \n        }\n        showAlert(\"success\",\"Subject Added successfully...!\")\n      }\n\n      const add_subjects_to_teacher = async () =>{          \n        setSubjectsToRender(checkedSubjects)\n        // Now we can call the API\n        let selectedSubjectSlugs = subjectsToRender.filter(item => item.selected === true).map(item => item.slug);        \n        let requestBody = {\n            teacher_id:SelectedTeacher.id,\n            selected_subjects:selectedSubjectSlugs\n        }\n        await add_subject_to_teacher_api(requestBody)\n      }      \n      useEffect( () => {        \n        if(visible){                                                   \n            load_subjects_of_current_batch()            \n        }\n      },[visible])      \n  return (\n    <>\n    <COffcanvas className='card w-100' style={{background:'#3c4b64'}} placement=\"end\" visible={visible} onHide={() => setVisible(false)} data-coreui-backdrop=\"static\">\n    <COffcanvasHeader className='card-header text-light' style={{background:'#303c54'}}>\n      <COffcanvasTitle>{SelectedTeacher.profile.name}</COffcanvasTitle>\n      <button className='btn btn-outline-light' onClick={() => setVisible(false)} >\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" className=\"bi bi-x-lg\" viewBox=\"0 0 16 16\">\n        <path d=\"M2.146 2.854a.5.5 0 1 1 .708-.708L8 7.293l5.146-5.147a.5.5 0 0 1 .708.708L8.707 8l5.147 5.146a.5.5 0 0 1-.708.708L8 8.707l-5.146 5.147a.5.5 0 0 1-.708-.708L7.293 8 2.146 2.854Z\"/>\n        </svg>\n      </button>      \n    </COffcanvasHeader>\n    <COffcanvasHeader className='card-header text-light' style={{background:'#303c54'}}>\n      <COffcanvasTitle>Branch - {SelectedTeacher.branch.branch_name} | Batch - {currentBatch.batch_name}</COffcanvasTitle>      \n    </COffcanvasHeader>\n    <COffcanvasBody>    \n    <CRow>\n    <CCol xs style={subjectsToRender.length > 0 ? {} : { display: 'flex', justifyContent: 'center' }}>\n  {subjectsToRender.length > 0 ? (\n    <CCard className=\"mb-4\">\n      <CCardHeader className='text-center'>\n        <strong>Subjects</strong>\n      </CCardHeader>\n      <CCardBody>\n        <CTable align=\"middle\" className=\"mb-0 border\" hover responsive>\n          <CTableHead color=\"light\">\n            <CTableRow>\n              <CTableHeaderCell>Name</CTableHeaderCell>\n              <CTableHeaderCell className='text-center'>Code</CTableHeaderCell>\n              <CTableHeaderCell className='text-center'>Action</CTableHeaderCell>\n            </CTableRow>\n          </CTableHead>\n          <CTableBody>\n            {subjectsToRender.map((item, index) => (\n              <CTableRow key={index}>\n                <CTableDataCell>\n                  <div>{item.subject_name}</div>\n                </CTableDataCell>\n                <CTableDataCell className='text-center'>\n                  <div>{item.code}</div>\n                </CTableDataCell>\n                <CTableDataCell className='text-center'>\n                  <div>\n                    {item.selected ? (\n                      <CFormCheck\n                        id={`flexCheckChecked-${index}`}\n                        defaultChecked\n                        onChange={(e) => subjectSelectionChanged(e.target.checked, item)}\n                      />\n                    ) : (\n                      <CFormCheck\n                        id={`flexCheckDefault-${index}`}\n                        onChange={(e) => subjectSelectionChanged(e.target.checked, item)}\n                      />\n                    )}\n                  </div>\n                </CTableDataCell>\n              </CTableRow>\n            ))}\n          </CTableBody>\n        </CTable>\n        <button className='btn btn-outline-dark form-control mt-4' type=\"submit\" onClick={add_subjects_to_teacher}>\n                  Set Subject\n        </button>\n      </CCardBody>\n    </CCard>\n  ) : (\n    <CToast animation={false} autohide={false} visible={true}>\n      <CToastHeader>\n        <svg\n          className=\"rounded me-2\"\n          width=\"20\"\n          height=\"20\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n          preserveAspectRatio=\"xMidYMid slice\"\n          focusable=\"false\"\n          role=\"img\"\n        >\n          <rect width=\"100%\" height=\"100%\" fill=\"#007aff\"></rect>\n        </svg>\n        <div className=\"fw-bold me-auto\">SMARTROLL ADMINISTRATION</div>\n      </CToastHeader>\n      <CToastBody>There are no subjects available...Please add some!</CToastBody>\n    </CToast>\n  )}\n</CCol>\n\n      </CRow>\n    </COffcanvasBody>\n  </COffcanvas>\n  </>\n  )\n}\n\nexport default ManageSubjects","import React from 'react'\nimport { useState, useContext, useEffect } from 'react'\nimport 'src/scss/panel.css'\nimport { Store } from '../forms/validation/store'\nimport axios from 'axios'\nimport {base_url} from 'src/base_url'\nimport { useSelector, useDispatch } from 'react-redux'\nimport expireToken from 'src/global_function/unauthorizedToken'\nimport ManageSubjects from './ManageSubjects'\nimport { useNavigate } from 'react-router-dom'\nimport { APIMiddleware } from 'src/global_function/GlobalFunctions'\nimport useAPI from 'src/global_function/useApi'\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CForm,\n  CFormInput,\n  CFormFeedback,\n  CFormLabel,\n  CRow,\n  CTable,\n  CTableBody,\n  CTableHead,\n  CTableHeaderCell,\n  CTableRow,\n  CTableDataCell,\n  COffcanvas,\n  COffcanvasHeader,\n  COffcanvasTitle,\n  CCloseButton,\n  COffcanvasBody,\n  CFormCheck,\n} from '@coreui/react'\nimport { showAlert } from 'src/global_function/GlobalFunctions'\nimport Swal from 'sweetalert'\n  const CustomStyles = (setTeacherlist) => {\n  const [validated, setValidated] = useState(false)\n  const navigate = useNavigate()\n  const { state, dispatch: ctxDispatch } = useContext(Store)\n  const { accessToken, refreshToken, currentBatch } = state\n  const [StoredTokens, CallAPI] = useAPI()\n  const add_Teacher = async (body) => {\n    const headers = {\n      'Content-Type': 'application/json',\n      'ngrok-skip-browser-warning': true,\n    }\n    const axiosInstance = axios.create()\n    let endpoint = `/manage/add_teacher/`\n    let method = 'post'\n    let response_obj = await CallAPI(\n      StoredTokens,\n      axiosInstance,\n      endpoint,\n      method,\n      headers,\n      body,\n      null\n    )\n    if (response_obj.error == false) {\n      \n      let response = response_obj.response\n     \n      setTeacherlist((prevArray) => [...prevArray, response.data.data])\n    } else {      \n    }\n  }\n\n  const handleSubmit = (event) => {\n    \n    event.preventDefault()\n    const form = event.currentTarget\n    // if (form.checkValidity() === false) {\n    //   event.preventDefault()\n    //   event.stopPropagation()\n    //   return\n    // }\n    const name = event.target.tname.value\n    const ph_no = event.target.tmobile.value\n    const email = event.target.temail.value\n    setValidated(true)\n    if (!name || !ph_no || !email) {\n      Swal({\n        title: 'Input Field Empty',\n        icon: 'error',\n        button: 'OK',\n      })\n    } else {      \n\n      const body = {\n        name,\n        email,\n        ph_no,\n      }\n      add_Teacher(body)\n      showAlert('success', 'Teacher Added successfully...!')\n    }\n\n  }\n  return (\n    <CForm\n      className=\"row g-3 needs-validation\"\n      noValidate\n      validated={validated}\n      onSubmit={handleSubmit}\n    >\n      <CCol md={6}>\n        <CFormLabel htmlFor=\"validationCustom01\">Teacher Name</CFormLabel>\n        <CFormInput type=\"text\" id=\"validationCustom01\" name=\"tname\" required />\n        <CFormFeedback valid>Looks good!</CFormFeedback>\n      </CCol>\n      <CCol md={6}>\n        <CFormLabel htmlFor=\"validationCustom01\">Teacher Moblie No</CFormLabel>\n        <CFormInput\n          type=\"tel\"\n          id=\"validationCustom02\"\n          name=\"tmobile\"\n          pattern=\"[0-9]{10}\"\n          required\n        />\n        <CFormFeedback valid>Looks good!</CFormFeedback>\n      </CCol>\n      <CCol md={12}>\n        <CFormLabel htmlFor=\"validationCustom01\">Teacher E-mail</CFormLabel>\n        <CFormInput type=\"email\" id=\"validationCustom02\" name=\"temail\" required />\n        <CFormFeedback valid>Looks good!</CFormFeedback>\n      </CCol>\n      {/* <CCol md={6}>\n          <CFormLabel htmlFor=\"validationCustom02\">Teacher Password</CFormLabel>\n          <CFormInput type=\"password\" id=\"validationCustom02\"  required onChange={e => setTeacher_password(e.target.value)}/>\n          <CFormFeedback valid>Looks good!</CFormFeedback>\n        </CCol> */}\n      <CCol xs={12}>\n        <button className=\"btn btn-outline-dark form-control\" type=\"submit\">\n          Submit form\n        </button>\n      </CCol>\n    </CForm>\n  )\n}\n\nconst Teacher = () => {\n  const [StoredTokens, CallAPI] = useAPI()\n  const [isModalOpen, setModalOpen] = useState(false)\n  const [visible, setVisible] = useState(false)\n  const [SelectedTeacher, setSelectedTeacher] = useState(null)\n  const navigate = useNavigate()\n  const dispatch = useDispatch()\n\n  const [Teacherlist, setTeacherlist] = useState([])\n\n  const { state, dispatch: ctxDispatch } = useContext(Store)\n  const { accessToken, refreshToken } = state\n  const load_teacher = async () => {\n    const headers = {\n      'Content-Type': 'application/json',\n      'ngrok-skip-browser-warning': true,\n    }\n    const axiosInstance = axios.create()\n    let endpoint = `/manage/get_teacher`\n    let method = 'get'\n    let response_obj = await CallAPI(StoredTokens,axiosInstance, endpoint, method, headers)\n    if (response_obj.error == false) {\n      let response = response_obj.response\n      setTeacherlist(response.data.data)\n    } else {\n      console.log(response_obj.errorMessage.message)\n    }\n  }\n\n  useEffect(() => {\n      load_teacher()\n  }, [])\n\n  const checkboxOptions = ['Option 1', 'Option 2', 'Option 3']\n\n  return (\n    <>\n      <CRow>\n        <CCol xs={12}>\n          <CCard className=\"mb-3\">\n            <CCardHeader>\n              <strong>Teachers</strong>\n            </CCardHeader>\n            <CCardBody>{CustomStyles(setTeacherlist)}</CCardBody>\n          </CCard>\n        </CCol>\n      </CRow>\n      <CRow>\n        <CCol xs>\n          <CCard className=\"mb-4\">\n            <CCardHeader>\n              <strong>Teacher History</strong>\n            </CCardHeader>\n            <CCardBody>\n              <CTable align=\"middle\" className=\"mb-0 border\" hover responsive>\n                <CTableHead color=\"light\">\n                  <CTableRow>\n                    <CTableHeaderCell>Name</CTableHeaderCell>\n                    <CTableHeaderCell>E-mail</CTableHeaderCell>\n                    <CTableHeaderCell>Mobile No</CTableHeaderCell>\n                  </CTableRow>\n                </CTableHead>\n                <CTableBody>\n                  {Teacherlist.map((item, index) => (\n                    <CTableRow\n                      v-for=\"item in tableItems\"\n                      key={index}\n                    >\n                      <CTableDataCell>\n                        <div>{item.profile.name.charAt(0) + item.profile.name.slice(1)}</div>\n                      </CTableDataCell>\n                      <CTableDataCell>\n                        <div>{item.profile.email}</div>\n                      </CTableDataCell>\n                      <CTableDataCell>\n                        <div>{item.profile.ph_no}</div>\n                      </CTableDataCell>\n                    </CTableRow>\n                  ))}\n                </CTableBody>\n              </CTable>\n            </CCardBody>\n          </CCard>\n        </CCol>\n      </CRow>\n\n      {SelectedTeacher ? (\n        <ManageSubjects\n          visible={visible}\n          setVisible={setVisible}\n          SelectedTeacher={SelectedTeacher}\n        />\n      ) : null}\n    </>\n  )\n}\n\nexport default Teacher"],"names":["_ref","visible","setVisible","SelectedTeacher","state","dispatch","ctxDispatch","useContext","Store","accessToken","refreshToken","currentBatch","subjectsToRender","setSubjectsToRender","useState","useNavigate","checkedSubjects","subjectSelectionChanged","value","obj","map","item","selected","useEffect","async","axiosInstance","axios","create","headers","response_obj","APIMiddleware","batch_slug","slug","teacher_id","id","error","response","data","load_subjects_of_current_batch","_jsx","_Fragment","children","_jsxs","COffcanvas","className","style","background","placement","onHide","COffcanvasHeader","COffcanvasTitle","profile","name","onClick","xmlns","width","height","fill","viewBox","d","branch","branch_name","batch_name","COffcanvasBody","CRow","CCol","xs","length","display","justifyContent","CCard","CCardHeader","CCardBody","CTable","align","hover","responsive","CTableHead","color","CTableRow","CTableHeaderCell","CTableBody","index","CTableDataCell","subject_name","code","CFormCheck","concat","defaultChecked","onChange","e","target","checked","type","selectedSubjectSlugs","filter","requestBody","selected_subjects","body","showAlert","add_subject_to_teacher_api","CToast","animation","autohide","CToastHeader","preserveAspectRatio","focusable","role","CToastBody","CustomStyles","setTeacherlist","validated","setValidated","StoredTokens","CallAPI","useAPI","CForm","noValidate","onSubmit","event","preventDefault","currentTarget","tname","ph_no","tmobile","email","temail","prevArray","add_Teacher","Swal","title","icon","button","md","CFormLabel","htmlFor","CFormInput","required","CFormFeedback","valid","pattern","Teacher","isModalOpen","setModalOpen","setSelectedTeacher","Teacherlist","useDispatch","console","log","errorMessage","message","load_teacher","charAt","slice","ManageSubjects"],"sourceRoot":""}