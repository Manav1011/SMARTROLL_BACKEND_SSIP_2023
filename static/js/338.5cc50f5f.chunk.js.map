{"version":3,"file":"static/js/338.5cc50f5f.chunk.js","mappings":"qQAWA,MA4CA,EA5CuBA,IACnB,MAAM,MAAEC,EAAOC,SAAUC,IAAgBC,EAAAA,EAAAA,YAAWC,EAAAA,IAC9C,YAAEC,EAAW,eAAGC,GAAmBN,GAEnC,YAACO,EAAW,WAAGC,GAAcT,EAOnC,OACIU,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,UACIF,EAAAA,EAAAA,KAACG,EAAAA,GAAI,CAACC,UAAU,OAAMF,UAClBF,EAAAA,EAAAA,KAACK,EAAAA,GAAI,CAACC,IAAE,EAAAJ,UACJF,EAAAA,EAAAA,KAACO,EAAAA,GAAK,CAAAL,UACFM,EAAAA,EAAAA,MAACC,EAAAA,GAAS,CAACC,MAAO,CAACC,QAAQ,OAAOC,eAAe,gBAAgBC,cAAc,UAAUX,SAAA,EACrFF,EAAAA,EAAAA,KAAA,OAAK,aAAW,aAAYE,UACxBM,EAAAA,EAAAA,MAAA,MAAIJ,UAAU,+DAA+DM,MAAO,CAACI,OAAO,KAAKZ,SAAA,EAC7FF,EAAAA,EAAAA,KAAA,MAAII,UAAU,yBAAyB,eAAa,OAAMF,UAC1DF,EAAAA,EAAAA,KAAA,OAAKU,MAAO,CAACK,UAAU,MAAOC,MAAM,6BAA6BC,MAAM,KAAKC,OAAO,KAAKC,KAAK,eAAef,UAAU,cAAcgB,QAAQ,YAAWlB,UACnJF,EAAAA,EAAAA,KAAA,QAAMqB,EAAE,qSAhB1B,CACdC,KAAK,CAAC,QACNC,SAAU,CAAC,OAAO,YAClBC,SAAU,CAAC,OAAO,WAAW,YAC7BC,MAAO,CAAC,OAAO,WAAW,WAAW,UAgBO3B,GAAa4B,KAAI,CAACC,EAAMC,KAE/B5B,EAAAA,EAAAA,KAAA,MAAII,UAAU,yBAAyB,eAAa,OAAMF,UAAYF,EAAAA,EAAAA,KAAA,KAAGU,MAAO,CAACmB,OAAO,QAASC,QAASA,KAAO/B,EAAW4B,EAAM,EAAGvB,UAAWuB,IAAU7B,EAAY,WAAW,GAAGI,SAAEyB,KAAtHC,WAMjFpB,EAAAA,EAAAA,MAAA,QAAMJ,UAAU,qBAAoBF,SAAA,CAAC,YAAUL,EAAekC,IAAIC,OAAOC,yBAO1F,C,0KCpBX,MAAMC,EAAeA,CAACC,EAASC,KAE3B,MAAM,MAAE7C,EAAOC,SAAUC,IAAgBC,EAAAA,EAAAA,YAAWC,EAAAA,IAC9C,YAAE0C,EAAW,aAAEC,EAAY,QAAEC,EAAO,aAAEC,EAAY,YAAE5C,GAAeL,GAClEkD,EAAWC,IAAgBC,EAAAA,EAAAA,WAAS,GACrCC,GAAc,IAAIC,MAAOC,eACxBC,EAAaC,IAAmBL,EAAAA,EAAAA,UAAS,KACzCM,EAAOC,IAAYP,EAAAA,EAAAA,UAASC,GAC7BO,GAAWC,SAASH,EAAO,IAAM,GAAGI,YAMnCC,EAAaC,KALHC,EAAAA,EAAAA,OAKcC,EAAAA,EAAAA,MAyC/B,OACEzD,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,UACAM,EAAAA,EAAAA,MAACkD,EAAAA,GAAK,CACJtD,UAAU,2BACVuD,YAAU,EACVlB,UAAWA,EACXmB,SAtBkBC,IACpB,MAAMC,EAAOD,EAAME,cACnBF,EAAMG,kBACuB,IAAzBF,EAAKG,kBACPJ,EAAMG,iBACNH,EAAMK,mBAERxB,GAAa,GA5BIyB,WACjB,MAIMC,EAAgBC,EAAAA,EAAMC,SAC5B,IAAyDC,EAL1C,CACb,eAAe,mBACf,8BAA6B,GAI3BC,QAAqBjB,EAAQD,EAAac,EADlC,oBAAkC,OAC8BG,EAAQE,EAAK,MACzF,GAAyB,GAAtBD,EAAaE,MAAe,CAC3B,IAAIC,EAAWH,EAAaG,SACxBC,EAAa,IAAIhF,GACrBgF,EAAWC,OAAS,EACpBpF,EAAY,CAAEqF,KAAM,cAAeC,QAASH,IAC5CzC,GAAS6C,GAAa,IAAIA,EAAWL,EAASM,KAAKA,QACnD7C,GAAe8C,GAAYA,EAAW,KACtCC,EAAAA,EAAAA,GAAU,UAAU,gCACtB,MACEC,MAAMZ,EAAaa,aAAaC,QAClC,EAeFC,CAJa,CACX,WAActC,EACd,SAAWE,GAEG,EAUSjD,SAAA,EAEvBM,EAAAA,EAAAA,MAACH,EAAAA,GAAI,CAACmF,GAAI,EAAEtF,SAAA,EACVF,EAAAA,EAAAA,KAACyF,EAAAA,GAAU,CAACC,QAAQ,qBAAoBxF,SAAC,gBACzCF,EAAAA,EAAAA,KAAC2F,EAAAA,GAAU,CAACb,KAAK,SAASc,IAAKhD,EAAaiD,IAAI,OAAOC,KAAK,IAAIC,MAAO9C,EAAQ+C,GAAG,qBAAqBC,SAAUC,GAAKhD,EAASgD,EAAEC,OAAOJ,OAAQK,UAAQ,EAACC,UAAW,KACpKrG,EAAAA,EAAAA,KAACsG,EAAAA,GAAa,CAACC,OAAK,EAAArG,SAAC,oBAEvBM,EAAAA,EAAAA,MAACH,EAAAA,GAAI,CAACmF,GAAI,EAAEtF,SAAA,EACVF,EAAAA,EAAAA,KAACyF,EAAAA,GAAU,CAACC,QAAQ,qBAAoBxF,SAAC,cACzCF,EAAAA,EAAAA,KAAC2F,EAAAA,GAAU,CAACb,KAAK,SAASiB,MAAO5C,EAAUqD,UAAQ,EAACV,KAAK,IAAIE,GAAG,qBAAuBI,UAAQ,EAACC,UAAW,KAC3GrG,EAAAA,EAAAA,KAACsG,EAAAA,GAAa,CAACC,OAAK,EAAArG,SAAC,oBAEvBF,EAAAA,EAAAA,KAACK,EAAAA,GAAI,CAACoG,GAAI,GAAGvG,UACXF,EAAAA,EAAAA,KAAA,UAAQI,UAAU,oCAAoC0E,KAAK,SAAQ5E,SAAE,sBAKtE,EAyGT,EA/FeZ,IAEX,MAAM,WAACS,GAAcT,GACjB,cAACoH,GAAiBpH,GAClB,eAAC8C,GAAkB9C,GACnB,MAAEC,EAAOC,SAAUC,IAAgBC,EAAAA,EAAAA,YAAWC,EAAAA,IAC9C,YAAE0C,EAAW,aAAEC,EAAY,QAAEC,EAAO,aAAEC,GAAgBjD,GAErDgC,EAAUoF,KADAnD,EAAAA,EAAAA,OACgBb,EAAAA,EAAAA,UAAS,MACnCW,EAAaC,IAAWE,EAAAA,EAAAA,MAGtBnC,EAAKa,IAAYQ,EAAAA,EAAAA,UAAS,IA2BnC,OANAiE,EAAAA,EAAAA,YAAU,KAjBMzC,WACd,MAIMC,EAAgBC,EAAAA,EAAMC,SAC5B,IAAwDC,EALzC,CACb,eAAe,mBACf,8BAA6B,GAI3BC,QAAqBjB,EAAQD,EAAac,EADlC,oBAAkC,MAC8BG,GAC5E,GAAyB,GAAtBC,EAAaE,MAAe,CAC7B,IAAIC,EAAWH,EAAaG,SAE5BxC,EAASwC,EAASM,KAAKA,KACzB,MACEG,MAAMZ,EAAaa,aAAaC,QAClC,EAIAuB,EAAW,GAEV,KAIDrG,EAAAA,EAAAA,MAAAP,EAAAA,SAAA,CAAAC,SAAA,EACMF,EAAAA,EAAAA,KAACG,EAAAA,GAAI,CAAAD,UACPF,EAAAA,EAAAA,KAACK,EAAAA,GAAI,CAACoG,GAAI,GAAGvG,UACXM,EAAAA,EAAAA,MAACD,EAAAA,GAAK,CAACH,UAAU,OAAMF,SAAA,EACrBF,EAAAA,EAAAA,KAAC8G,EAAAA,GAAW,CAAA5G,UACVF,EAAAA,EAAAA,KAAA,UAAAE,SAAQ,YAEVF,EAAAA,EAAAA,KAACS,EAAAA,GAAS,CAAAP,SAAEgC,EAAaC,EAASC,aAIxCpC,EAAAA,EAAAA,KAACG,EAAAA,GAAI,CAAAD,UACHF,EAAAA,EAAAA,KAACK,EAAAA,GAAI,CAACoG,IAAE,EAAAvG,UACNM,EAAAA,EAAAA,MAACD,EAAAA,GAAK,CAACH,UAAU,OAAMF,SAAA,EACrBF,EAAAA,EAAAA,KAAC8G,EAAAA,GAAW,CAAA5G,UACVF,EAAAA,EAAAA,KAAA,UAAAE,SAAQ,oBAEVF,EAAAA,EAAAA,KAACS,EAAAA,GAAS,CAAAP,SACLoB,EAAKyF,OAAS,GAAKvG,EAAAA,EAAAA,MAACwG,EAAAA,GAAM,CAACC,MAAM,SAAS7G,UAAU,0BAA0B8G,OAAK,EAACC,YAAU,EAAAjH,SAAA,EAC/FF,EAAAA,EAAAA,KAACoH,EAAAA,EAAU,CAACC,MAAM,QAAOnH,UACvBM,EAAAA,EAAAA,MAAC8G,EAAAA,GAAS,CAAApH,SAAA,EAERF,EAAAA,EAAAA,KAACuH,EAAAA,GAAgB,CAAArH,SAAC,gBAClBF,EAAAA,EAAAA,KAACuH,EAAAA,GAAgB,CAAArH,SAAC,mBAGtBF,EAAAA,EAAAA,KAACwH,EAAAA,GAAU,CAAAtH,SACRoB,EAAKI,KAAI,CAAC+F,EAAMC,KACflH,EAAAA,EAAAA,MAAC8G,EAAAA,GAAS,CAAC,QAAM,qBAAiCxF,QAASA,KAAO/B,EAAW,YAAa2G,EAAce,EAAKE,KAAK,EAAIjH,MAAO,CAACmB,OAAO,QAAQ3B,SAAA,EAC3IF,EAAAA,EAAAA,KAAC4H,EAAAA,GAAc,CAAA1H,UACbF,EAAAA,EAAAA,KAAA,OAAAE,SAAMuH,EAAKI,gBAEb7H,EAAAA,EAAAA,KAAC4H,EAAAA,GAAc,CAAA1H,UACbF,EAAAA,EAAAA,KAAA,OAAAE,SAAMuH,EAAKK,eAL4BJ,WAWnC1H,EAAAA,EAAAA,KAAA,KAAAE,SAAG,wBAMxB,EC1FP,EA7FkB6H,KAChB,MAAOC,EAAOC,IAAYtF,EAAAA,EAAAA,UAAS,SAC5BuF,EAAeC,IAAqBxF,EAAAA,EAAAA,UAAS,KAC7CyF,EAASC,IAAc1F,EAAAA,EAAAA,UAAS,KAChC2F,EAASC,IAAc5F,EAAAA,EAAAA,UAAS,KAEhC6F,EAAYpG,IAAkBO,EAAAA,EAAAA,UAAS,IACvC8F,EAAUC,IAAe/F,EAAAA,EAAAA,UAAS,IAClCgG,EAAcC,IAAqBjG,EAAAA,EAAAA,UAAS,IAC5CiC,EAAYiE,IAAiBlG,EAAAA,EAAAA,UAAS,IAGvC,MAAEpD,EAAOC,SAAUC,IAAgBC,EAAAA,EAAAA,YAAWC,EAAAA,IAC9C,YAAE0C,EAAW,aAAGC,EAAY,eAAGzC,EAAc,YAAED,GAAgBL,GAC9DuJ,EAAeC,IAAqBpG,EAAAA,EAAAA,UAAS,KAC7CW,EAAaC,IAAWE,EAAAA,EAAAA,MACxBuF,EAAUtC,IAAiB/D,EAAAA,EAAAA,UAAS,KAE3CiE,EAAAA,EAAAA,YAAU,KAC+B,UAApC/G,EAAekC,IAAIkH,QAAQC,MAC5BC,GACF,GACC,IAEH,MAAMA,EAAkBhF,UACtB,MAIMC,EAAgBC,EAAAA,EAAMC,SAC5B,IAAgEC,EALjD,CACb,eAAe,mBACf,8BAA6B,GAI3BC,QAAqBjB,EAAQD,EAAac,EADlC,4BAA0C,MACsBG,GAC5E,GAAyB,GAAtBC,EAAaE,MAAe,CAC7B,IAAIC,EAAWH,EAAaG,SAC5BlF,EAAY,CAAEqF,KAAM,cAAeC,QAASJ,EAASM,MACvD,MACEG,MAAMZ,EAAaa,aAAaC,QAClC,EAGIvF,EAAcD,IAChBmI,EAASnI,EAAY,EAEzBsJ,QAAQC,IAAIV,GACZ,MAAMW,EAAkB,CACtB,CAAEC,MAAO,QAASxD,MAAOnG,EAAYiF,MAAO2E,SAAS,YACrD,CAAED,MAAO,WAAYxD,MAAOnG,EAAY6J,UAAWD,SAAS,YAC5D,CAAED,MAAO,UAAWxD,MAAOnG,EAAY8J,SAAUF,SAAS,WAC1D,CAAED,MAAO,UAAWxD,MAAOnG,EAAY2C,QAASiH,SAAS,UAG3D,OADAJ,QAAQC,IAAIzJ,IAEVY,EAAAA,EAAAA,MAAAP,EAAAA,SAAA,CAAAC,SAAA,EACEF,EAAAA,EAAAA,KAAC2J,EAAAA,QAAa,CAAC7J,YAAakI,EAAOjI,WAAYA,KAE/CC,EAAAA,EAAAA,KAACO,EAAAA,GAAK,CAACH,UAAU,OAAMF,UACrBF,EAAAA,EAAAA,KAAC4J,EAAAA,GAAW,CAAA1J,UACVF,EAAAA,EAAAA,KAACG,EAAAA,GAAI,CAACsG,GAAI,CAAEoD,KAAM,GAAKrE,GAAI,CAAEqE,KAAM,GAAKzJ,UAAU,cAAaF,SAC5DoJ,EAAgB5H,KAAI,CAAC+F,EAAMC,KAC1B1H,EAAAA,EAAAA,KAACK,EAAAA,GAAI,CAACD,UAAU,eAAcF,UAC5BM,EAAAA,EAAAA,MAACsJ,EAAAA,GAAO,CAACpJ,MAAO,CAAEqJ,gBAAiB,cAAeC,OAAQ,OAAOnI,OAAO,WAAY3B,SAAA,EAClFF,EAAAA,EAAAA,KAAA,OAAKI,UAAU,uBAAsBF,SAAEuH,EAAK8B,SAC5C/I,EAAAA,EAAAA,MAAA,UAAQE,MAAO,CAAE2G,MAAO,SAAUnH,SAAA,CAC/BuH,EAAK1B,MAAM,IAAE0B,EAAKwC,eAJWvC,WAY3C,MAEC,OAAQM,GAEN,IAAK,OACH,OAAOhI,EAAAA,EAAAA,KAACkK,EAAK,CAACnK,WAAYA,EAAY2G,cAAeA,EAAetE,eAAgBA,IAEtF,IAAK,WACH,OAAOpC,EAAAA,EAAAA,KAACmK,EAAAA,QAAU,CAACpK,WAAYA,EAAYiJ,UAAWA,EAAYb,kBAAmBA,EAAmBO,YAAaA,IAEvH,IAAK,WACH,OAAO1I,EAAAA,EAAAA,KAACoK,EAAAA,QAAW,CAACrK,WAAYA,EAAamI,cAAeA,EAAea,kBAAmBA,EAAmBH,kBAAmBA,IACtI,IAAK,QACH,OAAO5I,EAAAA,EAAAA,KAACqK,EAAAA,QAAM,CAACtK,WAAYA,EAAY+I,cAAeA,EAAeP,WAAYA,EAAY+B,aAAczB,IAIhH,EAjBA,KAkBA,C,kIC/EP,MAAM3G,EAAeA,CAACqI,EAAerC,EAAcU,KACjD,MAAOtF,EAAaC,IAAWE,EAAAA,EAAAA,MACxBhB,EAAWC,IAAgBC,EAAAA,EAAAA,WAAS,IACpC6H,EAAeC,IAAqB9H,EAAAA,EAAAA,UAAS,OAC9C,MAAEpD,EAAOC,SAAUC,IAAgBC,EAAAA,EAAAA,YAAWC,EAAAA,IAC9C,YAAE0C,EAAW,aAACC,EAAY,UAAEmH,EAAS,YAAG7J,GAAgBL,GACvDkJ,EAAUC,IAAe/F,EAAAA,EAAAA,UAAS/C,IACxB4D,EAAAA,EAAAA,MA6CjB,OACEhD,EAAAA,EAAAA,MAACkD,EAAAA,GAAK,CACJtD,UAAU,2BACVuD,YAAU,EACVlB,UAAWA,EACXmB,SApBkBC,KAES,IADhBA,EAAME,cACVE,kBACPJ,EAAMG,iBACNH,EAAMK,mBAERL,EAAMG,iBACNtB,GAAa,GAnCMyB,WACnB,GAAGqG,EAAc,CACf,MAAME,EAAS,CACb,eAAe,mBACf,8BAA6B,GAEzBtG,EAAgBC,EAAAA,EAAMC,SAC5B,IAAIqG,EAAQ,wBAA+BC,EAAO,OAAWrG,EAAUmG,EACnElG,QAAqBjB,EAAQD,EAAac,EAAcuG,EAASC,EAAOrG,EAAQE,EAAK,MACzF,GAAyB,GAAtBD,EAAaE,MAAe,CAC7B,IAAIC,EAAWH,EAAaG,SACxBkG,EAAc,IAAIjL,GACtBwJ,QAAQC,IAAIzJ,GACZiL,EAAYnB,UAAY,EACxBN,QAAQC,IAAIwB,EAAYC,SACxBrL,EAAY,CAAEqF,KAAM,cAAeC,QAAS8F,IAC1CN,GAAcvF,GAAa,IAAIA,EAAWL,EAASM,KAAKA,QACxD2D,GAAkB1D,GAAYA,EAAW,KAC3CC,EAAAA,EAAAA,GAAU,UAAU,kCACtB,MACEC,MAAMZ,EAAaa,aAAaC,QAEpC,MAEEF,MAAM,uCACP,EAeD2F,CAJa,CACXP,cAAeA,EACftC,cAAeA,GAEC,EAQOhI,SAAA,EAEvBM,EAAAA,EAAAA,MAACH,EAAAA,GAAI,CAACmF,GAAI,GAAGtF,SAAA,EACXF,EAAAA,EAAAA,KAACyF,EAAAA,GAAU,CAACC,QAAQ,qBAAoBxF,SAAC,mBACzCF,EAAAA,EAAAA,KAAC2F,EAAAA,GAAU,CAACb,KAAK,OAAOkB,GAAG,qBAAqBC,SAAUC,GAAKuE,EAAkBvE,EAAEC,OAAOJ,MAAMiF,eAAgB5E,UAAQ,EAAEC,UAAW,KACrIrG,EAAAA,EAAAA,KAACsG,EAAAA,GAAa,CAACC,OAAK,EAAArG,SAAC,oBAEvBF,EAAAA,EAAAA,KAACK,EAAAA,GAAI,CAACoG,GAAI,GAAGvG,UACXF,EAAAA,EAAAA,KAAA,UAAQI,UAAU,oCAAoC0E,KAAK,SAAQ5E,SAAC,oBAIhE,EAoFZ,EAhFqBZ,IACnB,MAAM,cAAE4I,EAAa,WAAEnI,EAAU,kBAAGgJ,EAAiB,kBAAGH,GAAsBtJ,GACvE2L,EAAWV,IAAiB5H,EAAAA,EAAAA,UAAS,KACtC,MAAEpD,EAAOC,SAAUC,IAAgBC,EAAAA,EAAAA,YAAWC,EAAAA,IAC9C,YAAE0C,EAAW,aAACC,EAAY,UAAEmH,GAAclK,GAC/BiE,EAAAA,EAAAA,MAsBjB,OALAoD,EAAAA,EAAAA,YAAU,KAhBYzC,WACpB,MAIMC,EAAgBC,EAAAA,EAAMC,SAC5B,IAA4DC,EAL7C,CACb,eAAe,mBACf,8BAA6B,GAI3BC,QAAqB0G,EAAAA,EAAAA,GAAc9G,EAD3B,wBAAsC,MACmBG,EAAQ,KAAK,CAAC2D,cAAeA,IAClG,GAAyB,GAAtB1D,EAAaE,MAAe,CAC7B,IAAIC,EAAWH,EAAaG,SAC1B4F,EAAc5F,EAASM,KAAKA,KAChC,MACEG,MAAMZ,EAAaa,aAAaC,QAClC,EAIA6F,EAAe,GACd,KAID3K,EAAAA,EAAAA,MAAAP,EAAAA,SAAA,CAAAC,SAAA,EACEF,EAAAA,EAAAA,KAACG,EAAAA,GAAI,CAAAD,UACHF,EAAAA,EAAAA,KAACK,EAAAA,GAAI,CAACoG,GAAI,GAAGvG,UACXM,EAAAA,EAAAA,MAACD,EAAAA,GAAK,CAACH,UAAU,OAAMF,SAAA,EACrBF,EAAAA,EAAAA,KAAC8G,EAAAA,GAAW,CAAA5G,UACVF,EAAAA,EAAAA,KAAA,UAAAE,SAAQ,eAEVF,EAAAA,EAAAA,KAACS,EAAAA,GAAS,CAAAP,SAAEgC,EAAaqI,EAAerC,EAAcU,aAI5D5I,EAAAA,EAAAA,KAACG,EAAAA,GAAI,CAAAD,UACHF,EAAAA,EAAAA,KAACK,EAAAA,GAAI,CAACoG,IAAE,EAAAvG,UACNM,EAAAA,EAAAA,MAACD,EAAAA,GAAK,CAACH,UAAU,OAAMF,SAAA,EACrBF,EAAAA,EAAAA,KAAC8G,EAAAA,GAAW,CAAA5G,UACVF,EAAAA,EAAAA,KAAA,UAAAE,SAAQ,wBAEVF,EAAAA,EAAAA,KAACS,EAAAA,GAAS,CAAAP,UACRM,EAAAA,EAAAA,MAACwG,EAAAA,GAAM,CAACC,MAAM,SAAS7G,UAAU,cAAc8G,OAAK,EAACC,YAAU,EAAAjH,SAAA,EAC7DF,EAAAA,EAAAA,KAACoH,EAAAA,EAAU,CAACC,MAAM,QAAOnH,UACvBF,EAAAA,EAAAA,KAACsH,EAAAA,GAAS,CAACxF,QAASA,KAAO/B,EAAW,QAAQ,EAAIW,MAAO,CAAC0K,UAAU,UAAUlL,UAC5EF,EAAAA,EAAAA,KAACuH,EAAAA,GAAgB,CAAArH,SAAC,uBAGtBF,EAAAA,EAAAA,KAACwH,EAAAA,GAAU,CAAC9G,MAAO,CAAC0K,UAAU,UAAUlL,SACrC+K,EAAUvJ,KAAI,CAAC+F,EAAMC,KAElB1H,EAAAA,EAAAA,KAACsH,EAAAA,GAAS,CAAaxF,QAASA,KAAO/B,EAAW,SAAUgJ,EAAkBtB,EAAKE,KAAK,EAAIjH,MAAO,CAACmB,OAAO,WAAW3B,UACpHF,EAAAA,EAAAA,KAAC4H,EAAAA,GAAc,CAAA1H,UACbF,EAAAA,EAAAA,KAAA,OAAAE,SAAMuH,EAAK+C,mBAFC9C,qBAgB/B,C,+JClJP,MAAMxF,EAAeA,CAAC4G,EAAcuC,EAAYf,KAC9C,MAAO7H,EAAWC,IAAgBC,EAAAA,EAAAA,WAAS,IACpC2I,EAAYC,IAAkB5I,EAAAA,EAAAA,UAAS,OAExC,MAAEpD,EAAOC,SAAUC,IAAgBC,EAAAA,EAAAA,YAAWC,EAAAA,IAC9C,YAAE0C,EAAW,aAACC,EAAY,YAAE1C,GAAgBL,GAK3C+D,EAAaC,KAJHC,EAAAA,EAAAA,OAIcC,EAAAA,EAAAA,MA8C/B,OACEjD,EAAAA,EAAAA,MAACkD,EAAAA,GAAK,CACJtD,UAAU,2BACVuD,YAAU,EACVlB,UAAWA,EACXmB,SApBkBC,KAES,IADhBA,EAAME,cACVE,kBACPJ,EAAMG,iBACNH,EAAMK,mBAERxB,GAAa,GACb,MAAM+B,EAAO,CACXqE,cAAcA,EACdwC,WAAWA,GAEbzH,EAAMG,iBAvCUG,WACbmH,GAIDlG,MAAM,qCAER,MAIMhB,EAAgBC,EAAAA,EAAMC,SAC5B,IAA0DC,EAL3C,CACb,eAAe,mBACf,8BAA6B,GAI3BC,QAAqBjB,EAAQD,EAAac,EADlC,qBAAmC,OAC6BG,EAAQE,EAAK,MACzF,GAAyB,GAAtBD,EAAaE,MAAe,CAC3B,IAAIC,EAAWH,EAAaG,SACxB6G,EAAqB,IAAI5L,GAC7B4L,EAAmBjJ,SAAW,EAC9B6G,QAAQC,IAAImC,GACZ/L,EAAY,CAAEqF,KAAM,cAAeC,QAASyG,IAC5CH,GAAYrG,GAAa,IAAIA,EAAWL,EAASM,KAAKA,QACtDqF,GAAapF,GAAYA,EAAW,KACpCC,EAAAA,EAAAA,GAAU,UAAU,+BACtB,MACEC,MAAMZ,EAAaa,aAAaC,QAClC,EAeFmG,CAAUhH,EAAK,EAQUvE,SAAA,EAEvBM,EAAAA,EAAAA,MAACH,EAAAA,GAAI,CAACmF,GAAI,GAAGtF,SAAA,EACXF,EAAAA,EAAAA,KAACyF,EAAAA,GAAU,CAACC,QAAQ,qBAAoBxF,SAAC,gBACzCF,EAAAA,EAAAA,KAAC2F,EAAAA,GAAU,CAACb,KAAK,OAAOkB,GAAG,qBAAqBC,SAAUC,GAAKqF,EAAerF,EAAEC,OAAOJ,OAAQK,UAAQ,KACvGpG,EAAAA,EAAAA,KAACsG,EAAAA,GAAa,CAACC,OAAK,EAAArG,SAAC,oBAEvBF,EAAAA,EAAAA,KAACK,EAAAA,GAAI,CAACoG,GAAI,GAAGvG,UACXF,EAAAA,EAAAA,KAAA,UAAQI,UAAU,oCAAoC0E,KAAK,SAAQ5E,SAAC,oBAIhE,EAINmK,EAAU/K,IAEd,MAAOgE,EAAcC,IAAWE,EAAAA,EAAAA,MAC1B,MAAElE,EAAOC,SAAUC,IAAgBC,EAAAA,EAAAA,YAAWC,EAAAA,IAC9C,YAAE0C,EAAW,aAACC,EAAY,UAAEmH,GAAclK,GAE1C,cAACuJ,EAAa,WAAG/I,EAAU,aAACuK,KADjB9G,EAAAA,EAAAA,MACiClE,IAC3CiD,EAAS8I,IAAe1I,EAAAA,EAAAA,UAAS,IAqBxC,OAHAiE,EAAAA,EAAAA,YAAU,KAhBWzC,WACnB,MAIMC,EAAgBC,EAAAA,EAAMC,SAC5B,IAA0DC,EAL3C,CACb,eAAe,mBACf,8BAA6B,GAI3BC,QAAqB0G,EAAAA,EAAAA,GAAc9G,EAD3B,sBAAoC,MACqBG,EAAQ,KAAK,CAAEuE,cAAeA,IACnG,GAAyB,GAAtBtE,EAAaE,MAAe,CAC7B,IAAIC,EAAWH,EAAaG,SAC5B0G,EAAY1G,EAASM,KAAKA,KAC5B,MACEG,MAAMZ,EAAaa,aAAaC,QAClC,EAIEoG,EAAc,GACf,KAEDlL,EAAAA,EAAAA,MAAAP,EAAAA,SAAA,CAAAC,SAAA,EACEF,EAAAA,EAAAA,KAACG,EAAAA,GAAI,CAAAD,UACHF,EAAAA,EAAAA,KAACK,EAAAA,GAAI,CAACoG,GAAI,GAAGvG,UACXM,EAAAA,EAAAA,MAACD,EAAAA,GAAK,CAACH,UAAU,OAAMF,SAAA,EACrBF,EAAAA,EAAAA,KAAC8G,EAAAA,GAAW,CAAA5G,UACVF,EAAAA,EAAAA,KAAA,UAAAE,SAAQ,eAEVF,EAAAA,EAAAA,KAACS,EAAAA,GAAS,CAAAP,SAAEgC,EAAa4G,EAAcuC,EAAYf,aAIzDtK,EAAAA,EAAAA,KAACG,EAAAA,GAAI,CAAAD,UACHF,EAAAA,EAAAA,KAACK,EAAAA,GAAI,CAACoG,IAAE,EAAAvG,UACNM,EAAAA,EAAAA,MAACD,EAAAA,GAAK,CAACH,UAAU,OAAMF,SAAA,EACrBF,EAAAA,EAAAA,KAAC8G,EAAAA,GAAW,CAAA5G,UACVF,EAAAA,EAAAA,KAAA,UAAAE,SAAQ,qBAEVF,EAAAA,EAAAA,KAACS,EAAAA,GAAS,CAAAP,UACRM,EAAAA,EAAAA,MAACwG,EAAAA,GAAM,CAACC,MAAM,SAAS7G,UAAU,cAAc8G,OAAK,EAACC,YAAU,EAAAjH,SAAA,EAC7DF,EAAAA,EAAAA,KAACoH,EAAAA,EAAU,CAACC,MAAM,QAAOnH,UACvBF,EAAAA,EAAAA,KAACsH,EAAAA,GAAS,CAAClH,UAAU,cAAaF,UAChCF,EAAAA,EAAAA,KAACuH,EAAAA,GAAgB,CAAArH,SAAC,oBAGtBF,EAAAA,EAAAA,KAACwH,EAAAA,GAAU,CAAAtH,SACRqC,EAAQb,KAAI,CAAC+F,EAAMC,KAClB1H,EAAAA,EAAAA,KAACsH,EAAAA,GAAS,CAAC,QAAM,qBAAoBpH,UACnCF,EAAAA,EAAAA,KAAC4H,EAAAA,GAAc,CAAA1H,UACbM,EAAAA,EAAAA,MAAA,OAAKJ,UAAU,cAAaF,SAAA,CAAEuH,EAAKjG,SAASgJ,cAAc,MAAI/C,EAAK6D,iBAF5B5D,qBAYxD,EAGP2C,EAAOsB,UAAY,CACjB5L,WAAW6L,IAAAA,KAAeC,WAC1BzD,QAASwD,IAAAA,QAEX,S,kICtJA,MAAM1J,EAAeA,CAACyE,EAAa+B,EAAYM,KAE7C,MAAM,MAAEzJ,EAAOC,SAAUC,IAAgBC,EAAAA,EAAAA,YAAWC,EAAAA,IAC9C,YAAE0C,EAAW,aAAEC,EAAY,QAAEC,EAAO,aAAEC,EAAY,YAAE5C,GAAeL,GAClEkD,EAAWC,IAAgBC,EAAAA,EAAAA,WAAS,GACrCC,GAAc,IAAIC,MAAOC,eACxBC,EAAaC,IAAmBL,EAAAA,EAAAA,UAAS,IACzCM,EAAOC,IAAYP,EAAAA,EAAAA,UAASC,IAO5BU,EAAaC,KANHH,SAASH,EAAO,IAAM,GAAGI,YACzBG,EAAAA,EAAAA,OAKcC,EAAAA,EAAAA,MAgD/B,OACEzD,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,UACAM,EAAAA,EAAAA,MAACkD,EAAAA,GAAK,CACJtD,UAAU,2BACVuD,YAAU,EACVlB,UAAWA,EACXmB,SAxBkBC,IACpB,MAAMC,EAAOD,EAAME,cAEnB,GADAF,EAAMG,kBACuB,IAAzBF,EAAKG,gBAIP,OAHAJ,EAAMG,iBACNH,EAAMK,uBACNkB,MAAM,2CAGR1C,GAAa,GAnCIyB,WACjB,GAAkB,GAAfpB,EAAiB,CAClB,MAAM2H,EAAS,CACb,eAAe,mBACf,8BAA6B,GAEzBtG,EAAgBC,EAAAA,EAAMC,SAC5B,IAAIqG,EAAQ,wBAA+BC,EAAO,OAAWrG,EAAUmG,EACnElG,QAAqBjB,EAAQD,EAAac,EAAcuG,EAASC,EAAOrG,EAAQE,EAAK,MACzF,GAAyB,GAAtBD,EAAaE,MAAe,CAC3B,IAAIC,EAAWH,EAAaG,SACxBC,EAAa,IAAIhF,GACrBgF,EAAW6E,WAAa,EACxBhK,EAAY,CAAEqF,KAAM,cAAeC,QAASH,IAC5C+B,GAAa3B,GAAa,IAAIA,EAAWL,EAASM,KAAKA,QACvDyD,GAAYxD,GAAYA,EAAW,GACrC,MACEE,MAAMZ,EAAaa,aAAaC,QAEtC,MAEEF,MAAM,yCACR,EAmBAG,CALa,CACX,UAAYyD,EACZ,GAAMjG,GAGQ,EASS7C,SAAA,EAEvBM,EAAAA,EAAAA,MAACH,EAAAA,GAAI,CAACmF,GAAI,GAAGtF,SAAA,EACXF,EAAAA,EAAAA,KAACyF,EAAAA,GAAU,CAACC,QAAQ,qBAAoBxF,SAAC,qBACzCF,EAAAA,EAAAA,KAAC2F,EAAAA,GAAU,CAACb,KAAK,SAASc,IAAK,EAAGC,IAAK,EAAGC,KAAK,IAAME,GAAG,qBAAqBC,SAAUC,GAAKlD,EAAgBkD,EAAEC,OAAOJ,OAAQK,UAAQ,EAACC,UAAW,KACjJrG,EAAAA,EAAAA,KAACsG,EAAAA,GAAa,CAACC,OAAK,EAAArG,SAAC,oBAEvBF,EAAAA,EAAAA,KAACK,EAAAA,GAAI,CAACoG,GAAI,GAAGvG,UACXF,EAAAA,EAAAA,KAAA,UAAQI,UAAU,oCAAoC0E,KAAK,SAAQ5E,SAAE,sBAKtE,EA2GP,EAvGoBZ,IAClB,MAAM,WAACS,GAAcT,GACf,kBAAC6I,GAAqB7I,GACtB,YAACoJ,GAAepJ,GAChB,UAAC0J,GAAa1J,GACd,MAAEC,EAAOC,SAAUC,IAAgBC,EAAAA,EAAAA,YAAWC,EAAAA,IAC9C,YAAE0C,EAAW,aAAEC,EAAY,QAAEC,EAAO,aAAEC,GAAgBjD,GAErDgC,EAAUoF,KADAnD,EAAAA,EAAAA,OACgBb,EAAAA,EAAAA,UAAS,MACnCW,EAAaC,IAAWE,EAAAA,EAAAA,KAgC/B,OAZAmD,EAAAA,EAAAA,YAAU,KACLvE,GAlBa8B,WAChB,MAIMC,EAAgBC,EAAAA,EAAMC,SAC5B,IAA4DC,EAL7C,CACb,eAAe,mBACf,8BAA6B,GAI3BC,QAAqBjB,EAAQD,EAAac,EADlC,wBAAsC,MAC0BG,EAAQ,KAAK,CAAC,UAAYyE,IACtG,GAAyB,GAAtBxE,EAAaE,MAAe,CAC7B,IAAIC,EAAWH,EAAaG,SAE5BgC,EAAahC,EAASM,KAAKA,KAC7B,MACEG,MAAMZ,EAAaa,aAAaC,QAClC,EAKEwG,EACF,GACC,KASDtL,EAAAA,EAAAA,MAAAP,EAAAA,SAAA,CAAAC,SAAA,EACEF,EAAAA,EAAAA,KAACG,EAAAA,GAAI,CAAAD,UACHF,EAAAA,EAAAA,KAACK,EAAAA,GAAI,CAACoG,GAAI,GAAGvG,UACXM,EAAAA,EAAAA,MAACD,EAAAA,GAAK,CAACH,UAAU,OAAMF,SAAA,EACrBF,EAAAA,EAAAA,KAAC8G,EAAAA,GAAW,CAAA5G,UACVF,EAAAA,EAAAA,KAAA,UAAAE,SAAQ,iBAEVF,EAAAA,EAAAA,KAACS,EAAAA,GAAS,CAAAP,SAAEgC,EAAayE,EAAa+B,EAAYM,aAIxDhJ,EAAAA,EAAAA,KAACG,EAAAA,GAAI,CAAAD,UACHF,EAAAA,EAAAA,KAACK,EAAAA,GAAI,CAACoG,IAAE,EAAAvG,UACNM,EAAAA,EAAAA,MAACD,EAAAA,GAAK,CAACH,UAAU,OAAMF,SAAA,EACrBF,EAAAA,EAAAA,KAAC8G,EAAAA,GAAW,CAAA5G,UACVF,EAAAA,EAAAA,KAAA,UAAAE,SAAQ,wBAEVF,EAAAA,EAAAA,KAACS,EAAAA,GAAS,CAAAP,UACRM,EAAAA,EAAAA,MAACwG,EAAAA,GAAM,CAACC,MAAM,SAAS7G,UAAU,0BAA0B8G,OAAK,EAACC,YAAU,EAAAjH,SAAA,EACzEF,EAAAA,EAAAA,KAACoH,EAAAA,EAAU,CAACC,MAAM,QAAOnH,UACvBM,EAAAA,EAAAA,MAAC8G,EAAAA,GAAS,CAAApH,SAAA,EACRF,EAAAA,EAAAA,KAACuH,EAAAA,GAAgB,CAAArH,SAAC,iBAClBF,EAAAA,EAAAA,KAACuH,EAAAA,GAAgB,CAAArH,SAAC,4BAGtBF,EAAAA,EAAAA,KAACwH,EAAAA,GAAU,CAAAtH,SACRqB,EAASG,KAAI,CAAC+F,EAAMC,KACnBlH,EAAAA,EAAAA,MAAC8G,EAAAA,GAAS,CAAC,QAAM,qBAAiCxF,QAASA,KAAO/B,EAAW,YAAaoI,EAAkBV,EAAKE,KAAK,EAAIjH,MAAO,CAACmB,OAAO,QAAQ3B,SAAA,EAC/IF,EAAAA,EAAAA,KAAC4H,EAAAA,GAAc,CAAA1H,UACbF,EAAAA,EAAAA,KAAA,OAAAE,SAAMuH,EAAKsE,QAGb/L,EAAAA,EAAAA,KAAC4H,EAAAA,GAAc,CAAA1H,UACbF,EAAAA,EAAAA,KAAA,OAAKI,UAAU,gCAA+BF,SAC3CuH,EAAKuE,QAAUhM,EAAAA,EAAAA,KAAA,OAAAE,UAAKF,EAAAA,EAAAA,KAAA,OAAKgB,MAAM,6BAA6BC,MAAM,KAAKC,OAAO,KAAKC,KAAK,eAAef,UAAU,0BAA0BgB,QAAQ,YAAWlB,UAC7JF,EAAAA,EAAAA,KAAA,QAAMqB,EAAE,iMAEFrB,EAAAA,EAAAA,KAAA,OAAKgB,MAAM,6BAA6BC,MAAM,KAAKC,OAAO,KAAKC,KAAK,eAAef,UAAU,sBAAsBgB,QAAQ,YAAWlB,UAClJF,EAAAA,EAAAA,KAAA,QAAMqB,EAAE,gOAXiCqG,qBAwBxD,C","sources":["views/breadcrum/Breadcrumbnav.js","views/forms/validation/Terms.js","views/dashboard/Dashboard.js","views/forms/form-control/FormControl.js","views/forms/input-group/InputGroup.js","views/forms/validation/Validation.js"],"sourcesContent":["import React from 'react';\nimport { useState,useContext } from 'react'\nimport { Store } from 'src/views/forms/validation/store';\nimport {    \n    CCard,\n    CCardBody,    \n    CCol,    \n    CRow,    \n} from '@coreui/react'\n\nimport \"../../scss/panel.css\"\nconst Breadcrumbnav = (props) => {\n    const { state, dispatch: ctxDispatch } = useContext(Store);\n    const { objectCount , profileDetails } = state  \n    // console.log(objectCount)\n    const {currentStep , chageSteps }= props\n    let breadcrumbs = {\n        term:[\"term\"],\n        semester: [\"term\",\"semester\"],\n        division: [\"term\",\"semester\",\"division\"],\n        batch: [\"term\",\"semester\",\"division\",\"batch\"],\n    }\n    return (\n        <>    \n            <CRow className='mb-2'>\n                <CCol xl>\n                    <CCard>\n                        <CCardBody style={{display:'flex',justifyContent:'space-between',flexDirection:'column'}}>\n                            <nav aria-label=\"breadcrumb\">\n                                <ol className=\"mb-3 breadcrumb d-flex align-items-center text-sm sm:text-lg\" style={{margin:'0'}}>\n                                    <li className=\"breadcrumb-item active\" aria-current=\"page\">\n                                    <svg style={{marginTop:'-3'}} xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" className=\"bi bi-house\" viewBox=\"0 0 16 16\">\n                                        <path d=\"M8.707 1.5a1 1 0 0 0-1.414 0L.646 8.146a.5.5 0 0 0 .708.708L2 8.207V13.5A1.5 1.5 0 0 0 3.5 15h9a1.5 1.5 0 0 0 1.5-1.5V8.207l.646.647a.5.5 0 0 0 .708-.708L13 5.793V2.5a.5.5 0 0 0-.5-.5h-1a.5.5 0 0 0-.5.5v1.293L8.707 1.5ZM13 7.207V13.5a.5.5 0 0 1-.5.5h-9a.5.5 0 0 1-.5-.5V7.207l5-5 5 5Z\"/>\n                                    </svg>\n                                    </li>\n                                    {\n                                        breadcrumbs[currentStep].map((items,keys)=>(\n                                            \n                                             <li className=\"breadcrumb-item active\" aria-current=\"page\" key={keys}><a style={{cursor:\"grab\"}} onClick={() => {chageSteps(items)}} className={items === currentStep?\"disabled\":\"\"}>{items}</a></li>\n                                        ))\n                                    }\n                                </ol>                                                      \n                            </nav>\n\n                            <span className='text-sm sm:text-lg'>Branch - {profileDetails.obj.branch.branch_name}</span>\n\n                            \n                        </CCardBody>\n                    </CCard>\n                </CCol>\n            </CRow>\n        </>\n    );\n}\n\nexport default Breadcrumbnav;\n","import React, { useState  ,Component } from 'react'\nimport { useEffect } from 'react'\nimport PropTypes from 'prop-types'\nimport axios from 'axios'\nimport { useContext } from 'react'\nimport { Navigate, useNavigate } from 'react-router-dom'\nimport { APIMiddleware } from 'src/global_function/GlobalFunctions'\nimport useAPI from 'src/global_function/useApi'\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CForm,\n  CFormInput,\n  CFormFeedback,\n  CFormLabel,\n  CRow,\n  CTable,\n  CTableBody,\n  CTableDataCell,\n  CTableHead,\n  CTableHeaderCell,\n  CTableRow,\n} from '@coreui/react'\nimport { Store } from '../validation/store'\nimport {base_url} from 'src/base_url'\nimport expireToken from 'src/global_function/unauthorizedToken'\nimport { showAlert } from 'src/global_function/GlobalFunctions'\n\nconst CustomStyles = (set_term,set_term_count) => {\n  \n    const { state, dispatch: ctxDispatch } = useContext(Store);\n    const { accessToken, refreshToken, batches, currentBatch, objectCount} = state\n    const [validated, setValidated] = useState(false)\n    const currentYear = new Date().getFullYear() \n    const [semester_no, set_semester_no] = useState(\"\")\n    const [Start, setStart] = useState(currentYear);\n    const EndYear = (parseInt(Start, 10) + 1).toString();\n    const navigate = useNavigate()\n    \n  \n    // custom hook for api calling \n  \n    const [StoredTokens,CallAPI] = useAPI()\n  \n  \n    \n    const addBatches = async(body) => {\n      const header = {\n        \"Content-Type\":\"application/json\",      \n        'ngrok-skip-browser-warning':true\n      }\n      const axiosInstance = axios.create()\n      let endpoint = `/manage/add_term/`;let method='post';let headers = header;\n      let response_obj = await CallAPI(StoredTokens,axiosInstance,endpoint,method,headers,body,null)\n      if(response_obj.error == false){\n          let response = response_obj.response\n          let batchCount = {...objectCount}\n          batchCount.terms += 1          \n          ctxDispatch({ type: 'GET_OBJECTS', payload: batchCount });\n          set_term(prevArray => [...prevArray, response.data.data]);\n          set_term_count(preValue => preValue + 1);\n          showAlert(\"success\",\"Bactch Added successfully...!\")\n        }else{  \n          alert(response_obj.errorMessage.message)\n        }\n    }\n  \n    const handleSubmit = (event) => {\n      const form = event.currentTarget\n      event.preventDefault()\n      if (form.checkValidity() === false) {\n        event.preventDefault()\n        event.stopPropagation()\n      }\n      setValidated(true)\n      const body = {\n        \"start_year\": Start,\n        \"end_year\":EndYear\n      }\n      addBatches(body)\n      \n      \n    }\n    return (\n      <>\n      <CForm\n        className=\"row g-3 needs-validation\"\n        noValidate\n        validated={validated}\n        onSubmit={handleSubmit}\n      >\n        <CCol md={6}>\n          <CFormLabel htmlFor=\"validationCustom01\">Start Year</CFormLabel>\n          <CFormInput type=\"number\" min={currentYear} max=\"2099\" step=\"1\" value={Start}  id=\"validationCustom01\" onChange={e => setStart(e.target.value)} required maxLength={4} />\n          <CFormFeedback valid>Looks good!</CFormFeedback>\n        </CCol>\n        <CCol md={6}>\n          <CFormLabel htmlFor=\"validationCustom02\">End Year</CFormLabel>\n          <CFormInput type=\"number\" value={EndYear}  readOnly step=\"1\" id=\"validationCustom02\"   required maxLength={4}/>\n          <CFormFeedback valid>Looks good!</CFormFeedback>\n        </CCol>\n        <CCol xs={12}>\n          <button className='btn btn-outline-dark form-control' type=\"submit\" >\n            Submit form\n          </button>\n        </CCol>\n      </CForm>\n      </>\n    )\n  }\n\n\n\n\n\n\n\nconst Terms = (props) => {\n\n    const {chageSteps} = props\n  const {set_term_slug} = props\n  const {set_term_count} = props\n  const { state, dispatch: ctxDispatch } = useContext(Store);\n  const { accessToken, refreshToken, batches, currentBatch} = state\n  const navigate = useNavigate()\n  const [semester, set_semester] = useState([]);\n  const [StoredTokens,CallAPI] = useAPI()\n\n\n    const [term,set_term] = useState([])\n\n  // function for the load batches\n  \nconst load_term = async() => {\n    const header = {\n      \"Content-Type\":\"application/json\",        \n      'ngrok-skip-browser-warning':true\n    }\n    const axiosInstance = axios.create()\n    let endpoint = `/manage/get_terms`;let method='get';let headers = header;\n    let response_obj = await CallAPI(StoredTokens,axiosInstance,endpoint,method,headers)    \n    if(response_obj.error == false){\n      let response = response_obj.response\n      \n      set_term(response.data.data)\n    }else{  \n      alert(response_obj.errorMessage.message)\n    }    \n  }\n\n  useEffect(() => {\n    load_term()\n\n  }, []);\n\n\n  return (\n    <>\n          <CRow>\n        <CCol xs={12}>\n          <CCard className=\"mb-3\">\n            <CCardHeader>\n              <strong>Term</strong>\n            </CCardHeader>\n            <CCardBody>{CustomStyles(set_term,set_term_count)}</CCardBody>\n          </CCard>\n        </CCol>\n      </CRow>\n      <CRow>\n        <CCol xs>\n          <CCard className=\"mb-4\">\n            <CCardHeader>\n              <strong>Term History</strong>\n            </CCardHeader>\n            <CCardBody>\n                {term.length > 0 ? (<CTable align=\"middle\" className=\"mb-0 border text-center\" hover responsive>\n                <CTableHead color=\"light\">\n                  <CTableRow>\n                    \n                    <CTableHeaderCell>Start Year</CTableHeaderCell>\n                    <CTableHeaderCell>End Year</CTableHeaderCell>\n                  </CTableRow>\n                </CTableHead>\n                <CTableBody>\n                  {term.map((item, index) => (\n                    <CTableRow v-for=\"item in tableItems\" key={index} onClick={() => {chageSteps('semester'); set_term_slug(item.slug);}} style={{cursor:\"grab\"}}>\n                      <CTableDataCell>\n                        <div>{item.start_year}</div>   \n                      </CTableDataCell>\n                      <CTableDataCell>\n                        <div>{item.end_year}</div>   \n                      </CTableDataCell>\n                      \n                    </CTableRow>\n                  ))}\n                </CTableBody>\n              </CTable>) : (<p>no Terms</p>)}\n              \n            </CCardBody>\n          </CCard>\n        </CCol>\n      </CRow>\n    </>\n  )\n}\n\nTerms.propTypes = {\n    chageSteps: PropTypes.func.isRequired,\n    set_semester_slug: PropTypes.func.isRequired,\n    setBatchCout:PropTypes.func.isRequired\n  }\n\nexport default Terms","import React , {Component} from 'react'\nimport { useState } from 'react'\nimport {\n  CButton,\n  CCard,\n  CCardFooter,\n  CCol,\n  CRow,\n} from '@coreui/react'\n\nimport axios from 'axios'\n\nimport FormControl from '../forms/form-control/FormControl'\nimport Select from '../forms/input-group/InputGroup'\nimport Validation from '../forms/validation/Validation'\nimport { useContext , useEffect } from 'react'\nimport { Store } from 'src/views/forms/validation/store';\nimport {base_url} from 'src/base_url'\nimport { APIMiddleware } from 'src/global_function/GlobalFunctions'\nimport Breadcrumbnav from '../breadcrum/Breadcrumbnav';\nimport useAPI from 'src/global_function/useApi'\nimport Terms from '../forms/validation/Terms'\nconst Dashboard = () => {\n  const [steps, setsteps] = useState('term')\n  const [semester_slug, set_semester_slug] = useState(\"\");\n  const [semSlug, setsemSlug] = useState(\"\");\n  const [subSlug, setsubSlug] = useState(\"\");\n\n  const [term_conut, set_term_count] = useState(0)\n  const [semCount, setsemCount] = useState(0);\n  const [divisionCount,set_divisionCount] = useState(0)\n  const [batchCount, setbatchCount] = useState(0);\n  \n    \n  const { state, dispatch: ctxDispatch } = useContext(Store);\n  const { accessToken , refreshToken , profileDetails, objectCount } = state  \n  const [division_slug, set_division_slug] = useState(\"\")\n  const [StoredTokens,CallAPI] = useAPI()\n  const [term_slug,set_term_slug] = useState(\"\")\n\n  useEffect(() => {               \n    if(profileDetails.obj.profile.role === \"admin\"){\n      getObjectCounts()\n    }\n  }, []);\n\n  const getObjectCounts = async () =>{\n    const header = {\n      \"Content-Type\":\"application/json\",        \n      'ngrok-skip-browser-warning':true\n    }\n    const axiosInstance = axios.create()\n    let endpoint = `/manage/get_object_counts`;let method='get';let headers = header;\n    let response_obj = await CallAPI(StoredTokens,axiosInstance,endpoint,method,headers)\n    if(response_obj.error == false){\n      let response = response_obj.response\n      ctxDispatch({ type: 'GET_OBJECTS', payload: response.data });\n    }else{  \n      alert(response_obj.errorMessage.message)\n    }\n  }\n  \n  const chageSteps = (currentStep) =>{\n      setsteps(currentStep)\n  }\n  console.log(divisionCount)\n  const progressExample = [\n    { title: 'Terms', value: objectCount.terms, nextStep:'semester' },\n    { title: 'Semester', value: objectCount.semesters, nextStep:'semester' },\n    { title: 'divison', value: objectCount.divisons, nextStep:'subject' },\n    { title: 'Batches', value: objectCount.batches, nextStep:'batch'},\n  ]\n  console.log(objectCount)\n  return (\n    <>\n      <Breadcrumbnav currentStep={steps} chageSteps={chageSteps}></Breadcrumbnav>\n      \n      <CCard className=\"mb-4\">\n        <CCardFooter>\n          <CRow xs={{ cols: 1 }} md={{ cols: 4 }} className=\"text-center\">\n            {progressExample.map((item, index) => (\n              <CCol className=\"mb-sm-2 mb-0\" key={index}>\n                <CButton style={{ backgroundColor: 'transparent', border: 'none',cursor:\"default\" }}>\n                  <div className=\"text-medium-emphasis\">{item.title}</div>\n                  <strong style={{ color: 'black' }}>\n                    {item.value} {item.percent}\n                  </strong>\n                </CButton>\n              </CCol>\n            ))}\n          </CRow>\n        </CCardFooter>\n      </CCard>      \n      {(() => {\n        \n        switch (steps) {\n\n          case 'term':\n            return <Terms chageSteps={chageSteps} set_term_slug={set_term_slug} set_term_count={set_term_count}></Terms>\n\n          case 'semester':\n            return <Validation chageSteps={chageSteps} term_slug={term_slug}  set_semester_slug={set_semester_slug} setsemCount={setsemCount}></Validation>\n            \n          case 'division':\n            return <FormControl chageSteps={chageSteps}  semester_slug={semester_slug} set_division_slug={set_division_slug} set_divisionCount={set_divisionCount}></FormControl>\n          case 'batch':\n            return <Select chageSteps={chageSteps} division_slug={division_slug} setsubSlug={setsubSlug} setBatchCout={setbatchCount}></Select>\n          default:\n            {/* console.log(steps) */}\n        }\n      })()}\n    </>\n  )\n}\n\nexport default Dashboard","import React from 'react'\nimport { useState, useEffect } from 'react'\nimport { useContext } from 'react'\nimport PropTypes from 'prop-types'\nimport axios from 'axios'\nimport { Store } from '../validation/store'\nimport {base_url} from 'src/base_url'\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CForm,\n  CFormInput,\n  CFormFeedback,\n  CFormLabel,\n  CRow,\n  CTable,\n  CTableBody,\n  CTableHead,\n  CTableHeaderCell,\n  CTableRow,\n  CFormSelect,\n  CTableDataCell\n} from '@coreui/react'\nimport expireToken from 'src/global_function/unauthorizedToken'\nimport { APIMiddleware } from 'src/global_function/GlobalFunctions'\nimport { useNavigate } from 'react-router-dom'\nimport { showAlert } from 'src/global_function/GlobalFunctions'\nimport useAPI from 'src/global_function/useApi'\n\nconst CustomStyles = (set_divisions, semester_slug,set_divisionCount) => {\n  const [StoredTokens,CallAPI] = useAPI()\n  const [validated, setValidated] = useState(false)\n  const [division_name, set_division_name] = useState(null)\n  const { state, dispatch: ctxDispatch } = useContext(Store);\n  const { accessToken,refreshToken, semesters , objectCount } = state\n  const [semCount, setsemCount] = useState(objectCount);\n  const navigate = useNavigate()\n  \n  const add_division = async (body) => {\n    if(division_name){\n      const header = {\n        \"Content-Type\":\"application/json\",      \n        'ngrok-skip-browser-warning':true\n      }\n      const axiosInstance = axios.create()\n      let endpoint = `/manage/add_division/`;let method='post';let headers = header;\n      let response_obj = await CallAPI(StoredTokens,axiosInstance,endpoint,method,headers,body,null)\n      if(response_obj.error == false){\n        let response = response_obj.response\n        let changeCount = {...objectCount}\n        console.log(objectCount)\n        changeCount.divisons += 1  \n        console.log(changeCount.divison)\n        ctxDispatch({ type: 'GET_OBJECTS', payload: changeCount });\n          set_divisions(prevArray => [...prevArray, response.data.data])\n          set_divisionCount(preValue => preValue + 1);\n        showAlert(\"success\",\"Semester Added successfully...!\")\n      }else{        \n        alert(response_obj.errorMessage.message)\n      }  \n    }\n     else{\n      alert(\"Please Enter The Valid Division Name\")\n     }\n  }\n\n  const handleSubmit = (event) => {\n    const form = event.currentTarget\n    if (form.checkValidity() === false) {\n      event.preventDefault()\n      event.stopPropagation()\n    }\n    event.preventDefault()\n    setValidated(true)\n    const body = {\n      division_name: division_name,\n      semester_slug: semester_slug,\n    }\n    add_division(body);\n    \n  }\n  return (\n    <CForm\n      className=\"row g-3 needs-validation\"\n      noValidate\n      validated={validated}\n      onSubmit={handleSubmit}\n    >\n      <CCol md={12}>\n        <CFormLabel htmlFor=\"validationCustom01\">Division Name</CFormLabel>\n        <CFormInput type=\"text\" id=\"validationCustom01\" onChange={e => set_division_name(e.target.value.toUpperCase())} required  maxLength={1}/>\n        <CFormFeedback valid>Looks good!</CFormFeedback>\n      </CCol>      \n      <CCol xs={12}>\n        <button className='btn btn-outline-dark form-control' type=\"submit\">\n          Submit form\n        </button>\n      </CCol>\n    </CForm>\n  )\n}\n\nconst FormControl = (props) => {\n  const { semester_slug ,chageSteps , set_division_slug , set_divisionCount } = props\n  const [divisions, set_divisions] = useState([]);\n  const { state, dispatch: ctxDispatch } = useContext(Store);\n  const { accessToken,refreshToken, semesters } = state\n  const navigate = useNavigate()\n  const load_division = async () => {    \n    const header = {\n      \"Content-Type\":\"application/json\",        \n      'ngrok-skip-browser-warning':true\n    }\n    const axiosInstance = axios.create()\n    let endpoint = `/manage/get_divisions`;let method='get';let headers = header;\n    let response_obj = await APIMiddleware(axiosInstance,endpoint,method,headers,null,{semester_slug: semester_slug })\n    if(response_obj.error == false){\n      let response = response_obj.response      \n        set_divisions(response.data.data)        \n    }else{        \n      alert(response_obj.errorMessage.message)\n    }\n  }\n\n  useEffect(() => {\n    load_division()\n  }, []);\n\n\n  return (\n    <>\n      <CRow>\n        <CCol xs={12}>\n          <CCard className=\"mb-3\">\n            <CCardHeader>\n              <strong>Divison</strong>\n            </CCardHeader>\n            <CCardBody>{CustomStyles(set_divisions, semester_slug,set_divisionCount)}</CCardBody>\n          </CCard>\n        </CCol>\n      </CRow>\n      <CRow>\n        <CCol xs>\n          <CCard className=\"mb-4\">\n            <CCardHeader>\n              <strong>Division History</strong>\n            </CCardHeader>\n            <CCardBody>\n              <CTable align=\"middle\" className=\"mb-0 border\" hover responsive>\n                <CTableHead color=\"light\">\n                  <CTableRow onClick={() => {chageSteps('batch');}} style={{textAlign:\"center\"}}>\n                    <CTableHeaderCell>Division Name</CTableHeaderCell>\n                  </CTableRow>\n                </CTableHead>\n                <CTableBody style={{textAlign:\"center\"}}>\n                  {divisions.map((item, index) => (\n                  \n                      <CTableRow key={index} onClick={() => {chageSteps('batch'); set_division_slug(item.slug);}} style={{cursor:\"pointer\"}}>\n                        <CTableDataCell>\n                          <div>{item.division_name}</div>\n                        </CTableDataCell>\n                         \n                        \n                      </CTableRow>\n                    \n                  ))}\n                </CTableBody>\n\n              </CTable>\n            </CCardBody>\n          </CCard>\n        </CCol>\n      </CRow>\n    </>\n  )\n}\n\nFormControl.propTypes = {\n  chageSteps:PropTypes.func.isRequired,\n  setsemSlug:PropTypes.func.isRequired,\n  batchSlug: PropTypes.string\n}\nexport default FormControl\n","import React from 'react'\nimport { useState , useContext,useEffect } from 'react'\nimport PropTypes from 'prop-types'\nimport { Store } from '../validation/store'\nimport axios from 'axios'\nimport {base_url} from 'src/base_url'\nimport expireToken from 'src/global_function/unauthorizedToken'\nimport { APIMiddleware } from 'src/global_function/GlobalFunctions'\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CForm,\n  CFormInput,\n  CFormFeedback,\n  CFormLabel,\n  CRow,\n  CTable,\n  CTableBody,\n  CTableHead,\n  CTableHeaderCell,\n  CTableRow,\n  CTableDataCell,\n} from '@coreui/react'\nimport { useNavigate } from 'react-router-dom'\nimport { showAlert } from 'src/global_function/GlobalFunctions'\nimport { batch } from 'react-redux'\nimport useAPI from 'src/global_function/useApi'\nconst CustomStyles = (division_slug,set_batches,setBatchCout) => {\n  const [validated, setValidated] = useState(false)\n  const [batch_name, set_batch_name] = useState(null);\n  \n  const { state, dispatch: ctxDispatch } = useContext(Store);\n  const { accessToken,refreshToken, objectCount } = state\n  const navigate = useNavigate()\n\n  //custom hook to call the API\n\n  const [StoredTokens,CallAPI] = useAPI()\n\n\n  const add_batch = async (body) => {\n    if(batch_name){\n\n    }\n    else{\n      alert(\"Please Enter The Valid Batch Name\")\n    }\n    const header = {\n      \"Content-Type\":\"application/json\",      \n      'ngrok-skip-browser-warning':true\n    }\n    const axiosInstance = axios.create()\n    let endpoint = `/manage/add_batch/`;let method='post';let headers = header;\n    let response_obj = await CallAPI(StoredTokens,axiosInstance,endpoint,method,headers,body,null)\n    if(response_obj.error == false){\n        let response = response_obj.response        \n        let changeSubjectCount = {...objectCount}\n        changeSubjectCount.batches += 1      \n        console.log(changeSubjectCount)  \n        ctxDispatch({ type: 'GET_OBJECTS', payload: changeSubjectCount })\n        set_batches(prevArray => [...prevArray, response.data.data])\n        setBatchCout(preValue => preValue + 1);\n        showAlert(\"success\",\"Batch Added successfully...!\")\n      }else{     \n        alert(response_obj.errorMessage.message)     \n      }    \n  }\n  \n  const handleSubmit = (event) => {\n    const form = event.currentTarget\n    if (form.checkValidity() === false) {\n      event.preventDefault()\n      event.stopPropagation()\n    }\n    setValidated(true)\n    const body = {\n      division_slug:division_slug,\n      batch_name:batch_name,\n    }\n    event.preventDefault()\n    add_batch(body)\n    \n  }\n  return (\n    <CForm\n      className=\"row g-3 needs-validation\"\n      noValidate\n      validated={validated}\n      onSubmit={handleSubmit}\n    >\n      <CCol md={12}>\n        <CFormLabel htmlFor=\"validationCustom01\">Batch Name</CFormLabel>\n        <CFormInput type=\"text\" id=\"validationCustom01\" onChange={e => set_batch_name(e.target.value)} required />\n        <CFormFeedback valid>Looks good!</CFormFeedback>\n      </CCol>\n      <CCol xs={12}>\n        <button className='btn btn-outline-dark form-control' type=\"submit\">\n          Submit form\n        </button>\n      </CCol>\n    </CForm>\n  )\n}\n\nconst Select = (props) => {\n\n  const [StoredTokens, CallAPI] = useAPI()\n  const { state, dispatch: ctxDispatch } = useContext(Store);\n  const { accessToken,refreshToken, semesters } = state\n  const navigate = useNavigate()\n  const {division_slug , chageSteps,setBatchCout} = props\n  const [batches, set_batches] = useState([]);\n  \n  const load_batches = async () => {\n    const header = {\n      \"Content-Type\":\"application/json\",        \n      'ngrok-skip-browser-warning':true\n    }\n    const axiosInstance = axios.create()\n    let endpoint = `/manage/get_batches`;let method='get';let headers = header;\n    let response_obj = await APIMiddleware(axiosInstance,endpoint,method,headers,null,{ division_slug: division_slug })\n    if(response_obj.error == false){\n      let response = response_obj.response\n      set_batches(response.data.data)\n    }else{      \n      alert(response_obj.errorMessage.message)  \n    }\n  }\n\n  useEffect(() => {\n      load_batches()\n  }, []);\n  return (\n    <>\n      <CRow>\n        <CCol xs={12}>\n          <CCard className=\"mb-3\">\n            <CCardHeader>\n              <strong>Batches</strong>\n            </CCardHeader>\n            <CCardBody>{CustomStyles(division_slug,set_batches,setBatchCout)}</CCardBody>\n          </CCard>\n        </CCol>\n      </CRow>\n      <CRow>\n        <CCol xs>\n          <CCard className=\"mb-4\">\n            <CCardHeader>\n              <strong>Batch History</strong>\n            </CCardHeader>\n            <CCardBody>\n              <CTable align=\"middle\" className=\"mb-0 border\" hover responsive>\n                <CTableHead color=\"light\">\n                  <CTableRow className='text-center'>\n                    <CTableHeaderCell>Batch Name</CTableHeaderCell>\n                  </CTableRow>\n                </CTableHead>\n                <CTableBody>\n                  {batches.map((item, index) => (\n                    <CTableRow v-for=\"item in tableItems\" key={index}>\n                      <CTableDataCell>\n                        <div className='text-center'>{item.division.division_name} | {item.batch_name}</div>\n                      </CTableDataCell>\n                    </CTableRow>\n                  ))}\n                </CTableBody>\n              </CTable>\n            </CCardBody>\n          </CCard>\n        </CCol>\n      </CRow>\n    </>\n  )\n}\nSelect.prototype = {\n  chageSteps:PropTypes.func.isRequired,\n  semSlug: PropTypes.string\n}\nexport default Select\n","import React, { useState  ,Component } from 'react'\nimport { useEffect } from 'react'\nimport PropTypes from 'prop-types'\nimport axios from 'axios'\nimport { useContext } from 'react'\nimport { Navigate, useNavigate } from 'react-router-dom'\nimport { APIMiddleware } from 'src/global_function/GlobalFunctions'\nimport useAPI from 'src/global_function/useApi'\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CForm,\n  CFormInput,\n  CFormFeedback,\n  CFormLabel,\n  CRow,\n  CTable,\n  CTableBody,\n  CTableDataCell,\n  CTableHead,\n  CTableHeaderCell,\n  CTableRow,\n} from '@coreui/react'\nimport { Store } from '../validation/store'\nimport {base_url} from 'src/base_url'\nimport expireToken from 'src/global_function/unauthorizedToken'\nimport { showAlert } from 'src/global_function/GlobalFunctions'\n\nconst CustomStyles = (set_semester,setsemCount,term_slug) => {\n  \n  const { state, dispatch: ctxDispatch } = useContext(Store);\n  const { accessToken, refreshToken, batches, currentBatch, objectCount} = state\n  const [validated, setValidated] = useState(false)\n  const currentYear = new Date().getFullYear() \n  const [semester_no, set_semester_no] = useState(0)\n  const [Start, setStart] = useState(currentYear);\n  const EndYear = (parseInt(Start, 10) + 1).toString();\n  const navigate = useNavigate()\n  \n\n  // custom hook for api calling \n\n  const [StoredTokens,CallAPI] = useAPI()\n\n\n  \n  const addBatches = async(body) => {\n    if(semester_no != 0){\n      const header = {\n        \"Content-Type\":\"application/json\",      \n        'ngrok-skip-browser-warning':true\n      }\n      const axiosInstance = axios.create()\n      let endpoint = `/manage/add_semester/`;let method='post';let headers = header;\n      let response_obj = await CallAPI(StoredTokens,axiosInstance,endpoint,method,headers,body,null)\n      if(response_obj.error == false){\n          let response = response_obj.response\n          let batchCount = {...objectCount}\n          batchCount.semesters += 1        \n          ctxDispatch({ type: 'GET_OBJECTS', payload: batchCount });\n          set_semester(prevArray => [...prevArray, response.data.data]);\n          setsemCount(preValue => preValue + 1);\n        }else{       \n          alert(response_obj.errorMessage.message)   \n        }\n    }\n    else{\n      alert(\"Please Enter the Valid Semester Number\")\n    }\n    \n  }\n\n  const handleSubmit = (event) => {\n    const form = event.currentTarget\n    event.preventDefault()\n    if (form.checkValidity() === false) {\n      event.preventDefault()\n      event.stopPropagation()\n      alert('Please enter the valid semester details')\n      return\n    }\n    setValidated(true)\n    const body = {\n      \"term_slug\":term_slug,\n      \"no\": semester_no,\n      \n    }\n    addBatches(body)\n    \n  }\n  return (\n    <>\n    <CForm\n      className=\"row g-3 needs-validation\"\n      noValidate\n      validated={validated}\n      onSubmit={handleSubmit}\n    >\n      <CCol md={12}>\n        <CFormLabel htmlFor=\"validationCustom01\">Semester Number</CFormLabel>\n        <CFormInput type=\"number\" min={1} max={8} step=\"1\"   id=\"validationCustom01\" onChange={e => set_semester_no(e.target.value)} required maxLength={1} />\n        <CFormFeedback valid>Looks good!</CFormFeedback>\n      </CCol>\n      <CCol xs={12}>\n        <button className='btn btn-outline-dark form-control' type=\"submit\" >\n          Submit form\n        </button>\n      </CCol>\n    </CForm>\n    </>\n  )\n}\n\nconst Validation = (props) => {\n  const {chageSteps} = props\n  const {set_semester_slug} = props\n  const {setsemCount} = props\n  const {term_slug} = props\n  const { state, dispatch: ctxDispatch } = useContext(Store);\n  const { accessToken, refreshToken, batches, currentBatch} = state\n  const navigate = useNavigate()\n  const [semester, set_semester] = useState([]);\n  const [StoredTokens,CallAPI] = useAPI()\n  // function for the load batches\n  \nconst loadBatches = async() => {\n    const header = {\n      \"Content-Type\":\"application/json\",        \n      'ngrok-skip-browser-warning':true\n    }\n    const axiosInstance = axios.create()\n    let endpoint = `/manage/get_semesters`;let method='get';let headers = header;\n    let response_obj = await CallAPI(StoredTokens,axiosInstance,endpoint,method,headers,null,{\"term_slug\":term_slug})    \n    if(response_obj.error == false){\n      let response = response_obj.response\n      \n      set_semester(response.data.data)\n    }else{        \n      alert(response_obj.errorMessage.message)\n    }    \n  }\n\n  useEffect(() => {\n    if(accessToken){\n      loadBatches()\n    }\n  }, []);\n\n  // useEffect(() => {\n  //   setBatches(batches)\n    \n  // }, [batches]);\n  \n  \n  return (\n    <>\n      <CRow>\n        <CCol xs={12}>\n          <CCard className=\"mb-3\">\n            <CCardHeader>\n              <strong>Semesters</strong>\n            </CCardHeader>\n            <CCardBody>{CustomStyles(set_semester,setsemCount,term_slug)}</CCardBody>\n          </CCard>\n        </CCol>\n      </CRow>\n      <CRow>\n        <CCol xs>\n          <CCard className=\"mb-4\">\n            <CCardHeader>\n              <strong>Semester History</strong>\n            </CCardHeader>\n            <CCardBody>\n              <CTable align=\"middle\" className=\"mb-0 border text-center\" hover responsive>\n                <CTableHead color=\"light\">\n                  <CTableRow>\n                    <CTableHeaderCell>Semester No</CTableHeaderCell>\n                    <CTableHeaderCell>Activation Status</CTableHeaderCell>\n                  </CTableRow>\n                </CTableHead>\n                <CTableBody>\n                  {semester.map((item, index) => (\n                    <CTableRow v-for=\"item in tableItems\" key={index} onClick={() => {chageSteps('division'); set_semester_slug(item.slug);}} style={{cursor:\"grab\"}}>\n                      <CTableDataCell>\n                        <div>{item.no}</div>   \n                      </CTableDataCell>\n                      \n                      <CTableDataCell>\n                        <div className='d-flex justify-content-center'>\n                          {item.status ? (<div><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" className=\"bi bi-check-circle-fill\" viewBox=\"0 0 16 16\">\n                            <path d=\"M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zm-3.97-3.03a.75.75 0 0 0-1.08.022L7.477 9.417 5.384 7.323a.75.75 0 0 0-1.06 1.06L6.97 11.03a.75.75 0 0 0 1.079-.02l3.992-4.99a.75.75 0 0 0-.01-1.05z\" />\n                          </svg>{}\n                          </div>):<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" className=\"bi bi-x-circle-fill\" viewBox=\"0 0 16 16\">\n                      <path d=\"M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zM5.354 4.646a.5.5 0 1 0-.708.708L7.293 8l-2.647 2.646a.5.5 0 0 0 .708.708L8 8.707l2.646 2.647a.5.5 0 0 0 .708-.708L8.707 8l2.647-2.646a.5.5 0 0 0-.708-.708L8 7.293 5.354 4.646z\"/>\n                          </svg>}\n                        </div>   \n                      </CTableDataCell> \n                    </CTableRow>\n                  ))}\n                </CTableBody>\n              </CTable>\n            </CCardBody>\n          </CCard>\n        </CCol>\n      </CRow>\n      \n    </>\n  )\n}\n\nValidation.propTypes = {\n  chageSteps: PropTypes.func.isRequired,\n  set_semester_slug: PropTypes.func.isRequired,\n  setBatchCout:PropTypes.func.isRequired\n}\n\nexport default Validation\n"],"names":["props","state","dispatch","ctxDispatch","useContext","Store","objectCount","profileDetails","currentStep","chageSteps","_jsx","_Fragment","children","CRow","className","CCol","xl","CCard","_jsxs","CCardBody","style","display","justifyContent","flexDirection","margin","marginTop","xmlns","width","height","fill","viewBox","d","term","semester","division","batch","map","items","keys","cursor","onClick","obj","branch","branch_name","CustomStyles","set_term","set_term_count","accessToken","refreshToken","batches","currentBatch","validated","setValidated","useState","currentYear","Date","getFullYear","semester_no","set_semester_no","Start","setStart","EndYear","parseInt","toString","StoredTokens","CallAPI","useNavigate","useAPI","CForm","noValidate","onSubmit","event","form","currentTarget","preventDefault","checkValidity","stopPropagation","async","axiosInstance","axios","create","headers","response_obj","body","error","response","batchCount","terms","type","payload","prevArray","data","preValue","showAlert","alert","errorMessage","message","addBatches","md","CFormLabel","htmlFor","CFormInput","min","max","step","value","id","onChange","e","target","required","maxLength","CFormFeedback","valid","readOnly","xs","set_term_slug","set_semester","useEffect","load_term","CCardHeader","length","CTable","align","hover","responsive","CTableHead","color","CTableRow","CTableHeaderCell","CTableBody","item","index","slug","CTableDataCell","start_year","end_year","Dashboard","steps","setsteps","semester_slug","set_semester_slug","semSlug","setsemSlug","subSlug","setsubSlug","term_conut","semCount","setsemCount","divisionCount","set_divisionCount","setbatchCount","division_slug","set_division_slug","term_slug","profile","role","getObjectCounts","console","log","progressExample","title","nextStep","semesters","divisons","Breadcrumbnav","CCardFooter","cols","CButton","backgroundColor","border","percent","Terms","Validation","FormControl","Select","setBatchCout","set_divisions","division_name","set_division_name","header","endpoint","method","changeCount","divison","add_division","toUpperCase","divisions","APIMiddleware","load_division","textAlign","set_batches","batch_name","set_batch_name","changeSubjectCount","add_batch","load_batches","prototype","PropTypes","isRequired","loadBatches","no","status"],"sourceRoot":""}