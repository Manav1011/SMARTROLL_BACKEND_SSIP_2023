{"version":3,"file":"static/js/8386.52f4c90e.chunk.js","mappings":"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","sources":["views/forms/validation/Validation.js"],"sourcesContent":["import React, { useState  ,Component } from 'react'\nimport { useEffect } from 'react'\nimport PropTypes from 'prop-types'\nimport axios from 'axios'\nimport { useContext } from 'react'\nimport { Navigate, useNavigate } from 'react-router-dom'\nimport { APIMiddleware } from 'src/global_function/GlobalFunctions'\n\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CForm,\n  CFormInput,\n  CFormFeedback,\n  CFormLabel,\n  CRow,\n  CTable,\n  CTableBody,\n  CTableDataCell,\n  CTableHead,\n  CTableHeaderCell,\n  CTableRow,\n} from '@coreui/react'\nimport { Store } from '../validation/store'\nimport base_url from 'src/base_url'\nimport expireToken from 'src/global_function/unauthorizedToken'\nimport { showAlert } from 'src/global_function/GlobalFunctions'\n\nconst CustomStyles = (Batches,setBatches,setBatchCout) => {\n  \n  const { state, dispatch: ctxDispatch } = useContext(Store);\n  const { accessToken, refreshToken, batches, currentBatch} = state\n  const [validated, setValidated] = useState(false)\n  const currentYear = new Date().getFullYear() \n  const [Start, setStart] = useState(currentYear);\n  const EndYear = (parseInt(Start, 10) + 1).toString();\n  const navigate = useNavigate()\n  const addBatches = async(body) => {\n    const header = {\n      \"Content-Type\":\"application/json\",      \n      'ngrok-skip-browser-warning':true\n    }\n    const axiosInstance = axios.create()\n    let endpoint = `/manage/add_batch`;let method='post';let headers = header;\n    let response_obj = await APIMiddleware(axiosInstance,endpoint,method,headers,body,null)\n    if(response_obj.error == false){\n        let response = response_obj.response\n        let batchCount = {...objectCount}\n        batchCount.batches += 1\n        console.log(batchCount);\n        ctxDispatch({ type: 'GET_OBJECTS', payload: batchCount });\n        setBatches(prevArray => [...prevArray, response.data.data]);\n        setBatchCout(preValue => preValue + 1);\n      }else{  \n        console.log(response_obj.error)\n      }    \n  }\n\n  const handleSubmit = (event) => {\n    const form = event.currentTarget\n    event.preventDefault()\n    if (form.checkValidity() === false) {\n      event.preventDefault()\n      event.stopPropagation()\n    }\n    setValidated(true)\n    const body = {\n      batch_name: Start + \"-\" + EndYear\n    }\n    addBatches(body)\n    showAlert(\"success\",\"Bactch Added successfully...!\")\n    \n  }\n  return (\n    <>\n    <CForm\n      className=\"row g-3 needs-validation\"\n      noValidate\n      validated={validated}\n      onSubmit={handleSubmit}\n    >\n      <CCol md={6}>\n        <CFormLabel htmlFor=\"validationCustom01\">Start Year</CFormLabel>\n        <CFormInput type=\"number\" min={currentYear} max=\"2099\" step=\"1\" value={Start}  id=\"validationCustom01\" onChange={e => setStart(e.target.value)} required maxLength={4} />\n        <CFormFeedback valid>Looks good!</CFormFeedback>\n      </CCol>\n      <CCol md={6}>\n        <CFormLabel htmlFor=\"validationCustom02\">End Year</CFormLabel>\n        <CFormInput type=\"number\" value={EndYear}  readOnly step=\"1\" id=\"validationCustom02\"   required maxLength={4}/>\n        <CFormFeedback valid>Looks good!</CFormFeedback>\n      </CCol>\n      <CCol xs={12}>\n        <button className='btn btn-outline-dark form-control' type=\"submit\" >\n          Submit form\n        </button>\n      </CCol>\n    </CForm>\n    </>\n  )\n}\n\nconst Validation = (props) => {\n  const {chageSteps} = props\n  const {setSlug} = props\n  const {setBatchCout} = props\n  const { state, dispatch: ctxDispatch } = useContext(Store);\n  const { accessToken, refreshToken, batches, currentBatch} = state\n  const navigate = useNavigate()\n  const [Batches, setBatches] = useState(batches);\n  \n  // function for the load batches\n  \nconst loadBatches = async() => {\n    const header = {\n      \"Content-Type\":\"application/json\",        \n      'ngrok-skip-browser-warning':true\n    }\n    const axiosInstance = axios.create()\n    let endpoint = `/manage/get_batches`;let method='get';let headers = header;\n    let response_obj = await APIMiddleware(axiosInstance,endpoint,method,headers,null,null)\n    if(response_obj.error == false){\n      let response = response_obj.response\n      ctxDispatch({ type: 'GET_BATCHES', payload: response.data.data });      \n      response.data.data.map((item)=>{\n          if(item.active){\n            console.log(item);\n            ctxDispatch({ type: 'CURRENT_BATCH_SLUG', payload: item });    \n          }\n      })\n      setBatches(response.data.data)\n    }else{  \n      console.log(response_obj.error)\n    }    \n  }\n\n  // useEffect(() => {\n  //   if(accessToken){\n  //     loadBatches()\n  //   }\n  // }, []);\n\n  useEffect(() => {\n    setBatches(batches)\n  }, [batches]);\n  \n  \n  return (\n    <>\n      <CRow>\n        <CCol xs={12}>\n          <CCard className=\"mb-3\">\n            <CCardHeader>\n              <strong>Batches</strong>\n            </CCardHeader>\n            <CCardBody>{CustomStyles(Batches,setBatches,setBatchCout)}</CCardBody>\n          </CCard>\n        </CCol>\n      </CRow>\n      <CRow>\n        <CCol xs>\n          <CCard className=\"mb-4\">\n            <CCardHeader>\n              <strong>Batches History</strong>\n            </CCardHeader>\n            <CCardBody>\n              <CTable align=\"middle\" className=\"mb-0 border text-center\" hover responsive>\n                <CTableHead color=\"light\">\n                  <CTableRow>\n                    <CTableHeaderCell>Batches</CTableHeaderCell>\n                    <CTableHeaderCell>Activation Status</CTableHeaderCell>\n                  </CTableRow>\n                </CTableHead>\n                <CTableBody>\n                  {Batches.map((item, index) => (\n                    <CTableRow v-for=\"item in tableItems\" key={index}>\n                      <CTableDataCell>\n                        <div  onClick={() => {chageSteps('semester'); setSlug(item.slug);}}>{item.batch_name}</div>   \n                      </CTableDataCell>\n                      <CTableDataCell>\n                        <div  onClick={() => {chageSteps('semester'); setSlug(item.slug);}}>\n                          {item.active ? (<div><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" className=\"bi bi-check-circle-fill\" viewBox=\"0 0 16 16\">\n                            <path d=\"M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zm-3.97-3.03a.75.75 0 0 0-1.08.022L7.477 9.417 5.384 7.323a.75.75 0 0 0-1.06 1.06L6.97 11.03a.75.75 0 0 0 1.079-.02l3.992-4.99a.75.75 0 0 0-.01-1.05z\" />\n                          </svg>{}\n                          </div>):<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" className=\"bi bi-x-circle-fill\" viewBox=\"0 0 16 16\">\n                      <path d=\"M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zM5.354 4.646a.5.5 0 1 0-.708.708L7.293 8l-2.647 2.646a.5.5 0 0 0 .708.708L8 8.707l2.646 2.647a.5.5 0 0 0 .708-.708L8.707 8l2.647-2.646a.5.5 0 0 0-.708-.708L8 7.293 5.354 4.646z\"/>\n                          </svg>}\n                        </div>   \n                      </CTableDataCell> \n                    </CTableRow>\n                  ))}\n                </CTableBody>\n              </CTable>\n            </CCardBody>\n          </CCard>\n        </CCol>\n      </CRow>\n      \n    </>\n  )\n}\n\nValidation.propTypes = {\n  chageSteps: PropTypes.func.isRequired,\n  setSlug: PropTypes.func.isRequired,\n  setBatchCout:PropTypes.func.isRequired\n}\n\nexport default Validation\n"],"names":["CustomStyles","Batches","setBatches","setBatchCout","state","dispatch","ctxDispatch","useContext","Store","accessToken","refreshToken","batches","currentBatch","validated","setValidated","useState","currentYear","Date","getFullYear","Start","setStart","EndYear","parseInt","toString","useNavigate","_jsx","_Fragment","children","_jsxs","CForm","className","noValidate","onSubmit","event","form","currentTarget","preventDefault","checkValidity","stopPropagation","async","axiosInstance","axios","create","headers","response_obj","APIMiddleware","body","error","response","batchCount","objectCount","console","log","type","payload","prevArray","data","preValue","addBatches","batch_name","showAlert","CCol","md","CFormLabel","htmlFor","CFormInput","min","max","step","value","id","onChange","e","target","required","maxLength","CFormFeedback","valid","readOnly","xs","props","chageSteps","setSlug","useEffect","CRow","CCard","CCardHeader","CCardBody","CTable","align","hover","responsive","CTableHead","color","CTableRow","CTableHeaderCell","CTableBody","map","item","index","CTableDataCell","onClick","slug","active","xmlns","width","height","fill","viewBox","d"],"sourceRoot":""}