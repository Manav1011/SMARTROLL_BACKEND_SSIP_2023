{"version":3,"file":"static/js/3255.3c6051c4.chunk.js","mappings":"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","sources":["views/forms/form-control/FormControl.js"],"sourcesContent":["import React from 'react'\nimport { useState, useEffect } from 'react'\nimport { useContext } from 'react'\nimport PropTypes from 'prop-types'\nimport axios from 'axios'\nimport { Store } from '../validation/store'\nimport {base_url} from 'src/base_url'\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CForm,\n  CFormInput,\n  CFormFeedback,\n  CFormLabel,\n  CRow,\n  CTable,\n  CTableBody,\n  CTableHead,\n  CTableHeaderCell,\n  CTableRow,\n  CFormSelect,\n  CTableDataCell\n} from '@coreui/react'\nimport expireToken from 'src/global_function/unauthorizedToken'\nimport { APIMiddleware } from 'src/global_function/GlobalFunctions'\nimport { useNavigate } from 'react-router-dom'\nimport { showAlert } from 'src/global_function/GlobalFunctions'\nimport useAPI from 'src/global_function/useApi'\n\nconst CustomStyles = (set_divisions, semester_slug) => {\n  const [StoredTokens,CallAPI] = useAPI()\n  const [validated, setValidated] = useState(false)\n  const [division_name, set_division_name] = useState(\"\")\n  const { state, dispatch: ctxDispatch } = useContext(Store);\n  const { accessToken,refreshToken, semesters , objectCount } = state\n  const [semCount, setsemCount] = useState(objectCount);\n  const navigate = useNavigate()\n\n\n\n\n  const add_division = async (body) => {\n    const header = {\n      \"Content-Type\":\"application/json\",      \n      'ngrok-skip-browser-warning':true\n    }\n    const axiosInstance = axios.create()\n    let endpoint = `/manage/add_division/`;let method='post';let headers = header;\n    let response_obj = await CallAPI(StoredTokens,axiosInstance,endpoint,method,headers,body,null)\n    if(response_obj.error == false){\n      let response = response_obj.response\n      let changeCount = {...objectCount}\n      changeCount.divison += 1  \n        set_divisions(prevArray => [...prevArray, response.data.data])\n      showAlert(\"success\",\"Semester Added successfully...!\")\n    }else{        \n      alert(response_obj.errorMessage.message)\n    }    \n  }\n\n  const handleSubmit = (event) => {\n    const form = event.currentTarget\n    if (form.checkValidity() === false) {\n      event.preventDefault()\n      event.stopPropagation()\n    }\n    event.preventDefault()\n    setValidated(true)\n    const body = {\n      division_name: division_name,\n      semester_slug: semester_slug,\n    }\n    add_division(body);\n    \n  }\n  return (\n    <CForm\n      className=\"row g-3 needs-validation\"\n      noValidate\n      validated={validated}\n      onSubmit={handleSubmit}\n    >\n      <CCol md={12}>\n        <CFormLabel htmlFor=\"validationCustom01\">Division Name</CFormLabel>\n        <CFormInput type=\"text\" id=\"validationCustom01\" onChange={e => set_division_name(e.target.value)} required />\n        <CFormFeedback valid>Looks good!</CFormFeedback>\n      </CCol>      \n      <CCol xs={12}>\n        <button className='btn btn-outline-dark form-control' type=\"submit\">\n          Submit form\n        </button>\n      </CCol>\n    </CForm>\n  )\n}\n\nconst FormControl = (props) => {\n  const { semester_slug ,chageSteps , set_division_slug } = props\n  const [divisions, set_divisions] = useState([]);\n  const { state, dispatch: ctxDispatch } = useContext(Store);\n  const { accessToken,refreshToken, semesters } = state\n  const navigate = useNavigate()\n  const load_division = async () => {    \n    const header = {\n      \"Content-Type\":\"application/json\",        \n      'ngrok-skip-browser-warning':true\n    }\n    const axiosInstance = axios.create()\n    let endpoint = `/manage/get_divisions`;let method='get';let headers = header;\n    let response_obj = await APIMiddleware(axiosInstance,endpoint,method,headers,null,{semester_slug: semester_slug })\n    if(response_obj.error == false){\n      let response = response_obj.response      \n        set_divisions(response.data.data)        \n    }else{        \n      alert(response_obj.errorMessage.message)\n    }\n  }\n\n  useEffect(() => {\n    load_division()\n  }, []);\n\n\n  return (\n    <>\n      <CRow>\n        <CCol xs={12}>\n          <CCard className=\"mb-3\">\n            <CCardHeader>\n              <strong>Divison</strong>\n            </CCardHeader>\n            <CCardBody>{CustomStyles(set_divisions, semester_slug)}</CCardBody>\n          </CCard>\n        </CCol>\n      </CRow>\n      <CRow>\n        <CCol xs>\n          <CCard className=\"mb-4\">\n            <CCardHeader>\n              <strong>Division History</strong>\n            </CCardHeader>\n            <CCardBody>\n              <CTable align=\"middle\" className=\"mb-0 border\" hover responsive>\n                <CTableHead color=\"light\">\n                  <CTableRow onClick={() => {chageSteps('batch');}} style={{textAlign:\"center\"}}>\n                    <CTableHeaderCell>Division Name</CTableHeaderCell>\n                  </CTableRow>\n                </CTableHead>\n                <CTableBody style={{textAlign:\"center\"}}>\n                  {divisions.map((item, index) => (\n                  \n                      <CTableRow key={index} onClick={() => {chageSteps('batch'); set_division_slug(item.slug);}}>\n                        <CTableDataCell>\n                          <div>{item.division_name}</div>\n                        </CTableDataCell>\n                         \n                        \n                      </CTableRow>\n                    \n                  ))}\n                </CTableBody>\n\n              </CTable>\n            </CCardBody>\n          </CCard>\n        </CCol>\n      </CRow>\n    </>\n  )\n}\n\nFormControl.propTypes = {\n  chageSteps:PropTypes.func.isRequired,\n  setsemSlug:PropTypes.func.isRequired,\n  batchSlug: PropTypes.string\n}\nexport default FormControl\n"],"names":["CustomStyles","set_divisions","semester_slug","StoredTokens","CallAPI","useAPI","validated","setValidated","useState","division_name","set_division_name","state","dispatch","ctxDispatch","useContext","Store","accessToken","refreshToken","semesters","objectCount","semCount","setsemCount","useNavigate","_jsxs","CForm","className","noValidate","onSubmit","event","currentTarget","checkValidity","preventDefault","stopPropagation","async","axiosInstance","axios","create","headers","response_obj","body","error","response","divison","prevArray","data","showAlert","alert","errorMessage","message","add_division","children","CCol","md","_jsx","CFormLabel","htmlFor","CFormInput","type","id","onChange","e","target","value","required","CFormFeedback","valid","xs","props","chageSteps","set_division_slug","divisions","useEffect","APIMiddleware","load_division","_Fragment","CRow","CCard","CCardHeader","CCardBody","CTable","align","hover","responsive","CTableHead","color","CTableRow","onClick","style","textAlign","CTableHeaderCell","CTableBody","map","item","index","slug","CTableDataCell"],"sourceRoot":""}